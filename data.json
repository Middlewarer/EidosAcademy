[
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$1000000$LNln6oE9Ke5kQ0rpMdFg8J$R/RRnkf36Rt7UIXqg1+WHc1/U9vG49jtL0xf9wWTm9k=",
    "last_login": "2025-10-01T20:04:45.241Z",
    "is_superuser": true,
    "username": "admin",
    "first_name": "",
    "last_name": "",
    "email": "aaa@mail.ru",
    "is_staff": true,
    "is_active": true,
    "date_joined": "2025-09-04T20:25:00.117Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$1000000$ejcNIPkICSkrbIwqOnQObD$NGnKUGAMmMNofNDS5rMyXeETa97NXMzicNQDtNP9Tl8=",
    "last_login": "2025-09-22T13:43:56.880Z",
    "is_superuser": false,
    "username": "kirill",
    "first_name": "",
    "last_name": "",
    "email": "vasilievkirill333@gmail.com",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-09-22T13:43:25.430Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$1000000$KkL8345bgFntzZBMhXqJMk$t5wvwa90JUl63BVIB15tFyMu5IoXguv4KBqJRxkL8qs=",
    "last_login": "2025-09-25T08:17:29.353Z",
    "is_superuser": false,
    "username": "new_user",
    "first_name": "",
    "last_name": "",
    "email": "email@mail.ru",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-09-25T08:17:29.144Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$1000000$ytN5Bdj2IAwankURZB6glj$POSGS5KxVGRRc0oMIjR19zbZqzUJt2HQE7kyNSFBVaM=",
    "last_login": "2025-10-01T20:04:17.381Z",
    "is_superuser": false,
    "username": "criacria",
    "first_name": "",
    "last_name": "",
    "email": "onmyfirstway@mail.ru",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-10-01T19:33:25.587Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$1000000$I2scCDo6CFw9h99fv7siEh$osF3ygI12fCYBy5uVwREgKZx47ClZSMEXlSPStbs9Vk=",
    "last_login": null,
    "is_superuser": false,
    "username": "imnotalex11",
    "first_name": "",
    "last_name": "",
    "email": "grabalexchuk@proton.me",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-10-01T19:35:13.023Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "auth.user",
  "fields": {
    "password": "pbkdf2_sha256$1000000$BiJZiwFnL59xBjPGyQLONO$/jJ6daa/xUNgoiBMqDtQ0QzkrSoLHpSQXesZv+38cKo=",
    "last_login": "2025-10-01T19:38:31.165Z",
    "is_superuser": false,
    "username": "imnotalex112",
    "first_name": "",
    "last_name": "",
    "email": "grabalexchuk@proton.me",
    "is_staff": false,
    "is_active": true,
    "date_joined": "2025-10-01T19:38:29.987Z",
    "groups": [],
    "user_permissions": []
  }
},
{
  "model": "users.userprofile",
  "pk": 1,
  "fields": {
    "user": [
      "admin"
    ],
    "name": "Alex",
    "username": "imnotalex235",
    "surname": "Grabchuk",
    "avatar": "avatars/article_dummy.png",
    "name_displayed": "grabalexchuk",
    "score": 0,
    "level": 1,
    "streak": 0,
    "daily_goal_minutes": 5,
    "daily_goal_score": 10,
    "localization": "ru",
    "country_of_origin": "Mordva",
    "purpose_language": "Python",
    "account_created_at": "2025-09-04T20:25:47.172Z",
    "tasks_confirmed": 0,
    "course_studied": [
      5,
      6
    ]
  }
},
{
  "model": "users.userprofile",
  "pk": 7,
  "fields": {
    "user": [
      "kirill"
    ],
    "name": "Alex",
    "username": null,
    "surname": null,
    "avatar": "",
    "name_displayed": null,
    "score": 0,
    "level": 1,
    "streak": 0,
    "daily_goal_minutes": 25,
    "daily_goal_score": 10,
    "localization": null,
    "country_of_origin": null,
    "purpose_language": null,
    "account_created_at": "2025-09-22T13:43:25.598Z",
    "tasks_confirmed": 0,
    "course_studied": [
      5
    ]
  }
},
{
  "model": "users.userprofile",
  "pk": 8,
  "fields": {
    "user": [
      "new_user"
    ],
    "name": "Alexey",
    "username": null,
    "surname": null,
    "avatar": "",
    "name_displayed": null,
    "score": 0,
    "level": 1,
    "streak": 0,
    "daily_goal_minutes": 25,
    "daily_goal_score": 10,
    "localization": null,
    "country_of_origin": null,
    "purpose_language": null,
    "account_created_at": "2025-09-25T08:17:29.346Z",
    "tasks_confirmed": 0,
    "course_studied": [
      5
    ]
  }
},
{
  "model": "users.userprofile",
  "pk": 9,
  "fields": {
    "user": [
      "criacria"
    ],
    "name": null,
    "username": null,
    "surname": null,
    "avatar": "",
    "name_displayed": null,
    "score": 0,
    "level": 1,
    "streak": 0,
    "daily_goal_minutes": 25,
    "daily_goal_score": 10,
    "localization": null,
    "country_of_origin": null,
    "purpose_language": null,
    "account_created_at": "2025-10-01T19:33:26.817Z",
    "tasks_confirmed": 0,
    "course_studied": []
  }
},
{
  "model": "users.userprofile",
  "pk": 10,
  "fields": {
    "user": [
      "imnotalex11"
    ],
    "name": null,
    "username": null,
    "surname": null,
    "avatar": "",
    "name_displayed": null,
    "score": 0,
    "level": 1,
    "streak": 0,
    "daily_goal_minutes": 25,
    "daily_goal_score": 10,
    "localization": null,
    "country_of_origin": null,
    "purpose_language": null,
    "account_created_at": "2025-10-01T19:35:14.077Z",
    "tasks_confirmed": 0,
    "course_studied": []
  }
},
{
  "model": "users.userprofile",
  "pk": 11,
  "fields": {
    "user": [
      "imnotalex112"
    ],
    "name": null,
    "username": null,
    "surname": null,
    "avatar": "",
    "name_displayed": null,
    "score": 0,
    "level": 1,
    "streak": 0,
    "daily_goal_minutes": 25,
    "daily_goal_score": 10,
    "localization": null,
    "country_of_origin": null,
    "purpose_language": null,
    "account_created_at": "2025-10-01T19:38:31.157Z",
    "tasks_confirmed": 0,
    "course_studied": []
  }
},
{
  "model": "courses.category",
  "pk": 1,
  "fields": {
    "title": "Python"
  }
},
{
  "model": "courses.course",
  "pk": 5,
  "fields": {
    "title": "Python | Первая ступень",
    "main_image": "courses/firstcourse_main.png",
    "description": "Курс по Python состоит из шести модулей, которые помогут вам освоить основы программирования на этом популярном языке. Вы познакомитесь с различными возможностями Python и быстро втянетесь язык в максимально интересной мере. После теории последует определенное количество интересных практических задaч, которые сразу закрепят ваши знания. Мы старались внедрить в курс все те вещи и трюки, которых не хватало лично нам во время нашего собственного обучения концептам. Надеемся, вам понравится. Удачи в изучении!",
    "author": [
      "admin"
    ],
    "created_at": "2025-09-22T10:41:14.472Z",
    "updated_at": "2025-10-01T17:36:14.645Z",
    "price": "0.00",
    "category": 1
  }
},
{
  "model": "courses.course",
  "pk": 6,
  "fields": {
    "title": "Python | Вторая ступень",
    "main_image": "courses/secondcourse_main.png",
    "description": "\"Вторая ступень Python\" – курс для тех, кто уже знаком с основами и нашем первым курсом по python и хочет углубить знания. Рассматриваются продвинутые структуры данных, работа с исключениями, работа с функциями, модули для практической работы и многое другое. Включает практические задачи и проекты.",
    "author": [
      "admin"
    ],
    "created_at": "2025-09-22T13:02:47.548Z",
    "updated_at": "2025-10-01T17:36:19.266Z",
    "price": "0.00",
    "category": 1
  }
},
{
  "model": "courses.course",
  "pk": 9,
  "fields": {
    "title": "Разбор 50 LeetCode задач на Python | Тренировка алгоритмизации",
    "main_image": "courses/thirdcourse_main.png",
    "description": "Разберем решения 50 задач на Python с популярной платформы LeetCode — ведущего ресурса для прокачки алгоритмического мышления и подготовки к техническим собеседованиям.",
    "author": [
      "admin"
    ],
    "created_at": "2025-09-23T21:36:23.488Z",
    "updated_at": "2025-10-01T17:36:09.151Z",
    "price": "0.00",
    "category": 1
  }
},
{
  "model": "courses.topicsblock",
  "pk": 3,
  "fields": {
    "title": "Введение в Python | Первые шаги",
    "course": 5
  }
},
{
  "model": "courses.topicsblock",
  "pk": 4,
  "fields": {
    "title": "Ввод и вывод | Переменные и типы данных",
    "course": 5
  }
},
{
  "model": "courses.topicsblock",
  "pk": 5,
  "fields": {
    "title": "Математика в Python | Арифметические операции",
    "course": 5
  }
},
{
  "model": "courses.topicsblock",
  "pk": 6,
  "fields": {
    "title": "Условные операторы | If - elif - else",
    "course": 5
  }
},
{
  "model": "courses.topicsblock",
  "pk": 7,
  "fields": {
    "title": "Строковый тип данных | Str | String",
    "course": 5
  }
},
{
  "model": "courses.topicsblock",
  "pk": 8,
  "fields": {
    "title": "Введение в циклы | for/while | знакомство",
    "course": 5
  }
},
{
  "model": "courses.topicsblock",
  "pk": 9,
  "fields": {
    "title": "Итог | Что делать дальше?",
    "course": 5
  }
},
{
  "model": "courses.topicsblock",
  "pk": 10,
  "fields": {
    "title": "Приветственное слово.",
    "course": 6
  }
},
{
  "model": "courses.topicsblock",
  "pk": 11,
  "fields": {
    "title": "Списки | Тип данных - list",
    "course": 6
  }
},
{
  "model": "courses.topicsblock",
  "pk": 12,
  "fields": {
    "title": "Кортежи | Тип данных - tuple",
    "course": 6
  }
},
{
  "model": "courses.topicsblock",
  "pk": 13,
  "fields": {
    "title": "Множества | Типы данных set и frozenset",
    "course": 6
  }
},
{
  "model": "courses.topicsblock",
  "pk": 14,
  "fields": {
    "title": "Словари | Тип данных dict",
    "course": 6
  }
},
{
  "model": "courses.topicsblock",
  "pk": 15,
  "fields": {
    "title": "Знакомство с модулями | random, time",
    "course": 6
  }
},
{
  "model": "courses.topicsblock",
  "pk": 16,
  "fields": {
    "title": "Функции | Введение в функциональное программирование",
    "course": 6
  }
},
{
  "model": "courses.topicsblock",
  "pk": 17,
  "fields": {
    "title": "Обработка исключений | try, except",
    "course": 6
  }
},
{
  "model": "courses.topicsblock",
  "pk": 18,
  "fields": {
    "title": "Что делать дальше?",
    "course": 6
  }
},
{
  "model": "courses.topicsblock",
  "pk": 19,
  "fields": {
    "title": "5 Easy - задач",
    "course": 9
  }
},
{
  "model": "courses.topicsblock",
  "pk": 20,
  "fields": {
    "title": "5 Easy - задач | модуль 2",
    "course": 9
  }
},
{
  "model": "courses.topicsblock",
  "pk": 21,
  "fields": {
    "title": "5 Easy - задач | модуль 3",
    "course": 9
  }
},
{
  "model": "courses.topicsblock",
  "pk": 22,
  "fields": {
    "title": "5 Easy - задач | модуль 4",
    "course": 9
  }
},
{
  "model": "courses.topicsblock",
  "pk": 23,
  "fields": {
    "title": "5 Easy - задач | модуль 5",
    "course": 9
  }
},
{
  "model": "courses.topicsblock",
  "pk": 24,
  "fields": {
    "title": "5 Easy - задач | модуль 6",
    "course": 9
  }
},
{
  "model": "courses.topicsblock",
  "pk": 25,
  "fields": {
    "title": "5 Easy - задач | модуль 7",
    "course": 9
  }
},
{
  "model": "courses.topicsblock",
  "pk": 26,
  "fields": {
    "title": "5 Easy - задач | модуль 8",
    "course": 9
  }
},
{
  "model": "courses.topicsblock",
  "pk": 27,
  "fields": {
    "title": "5 Easy - задач | модуль 9",
    "course": 9
  }
},
{
  "model": "courses.topicsblock",
  "pk": 28,
  "fields": {
    "title": "Последние 5 Easy - задач | Финишная",
    "course": 9
  }
},
{
  "model": "courses.topic",
  "pk": 5,
  "fields": {
    "block": 3,
    "title": "Введение в курс. 🕵️",
    "description": "",
    "min_time_duration": 0
  }
},
{
  "model": "courses.topic",
  "pk": 6,
  "fields": {
    "block": 3,
    "title": "История языка | Особенности | Где используется | Место в топах🥇",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 7,
  "fields": {
    "block": 3,
    "title": "Установка и настройка Python | Первая программа 1️⃣",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 8,
  "fields": {
    "block": 3,
    "title": "Что по итогу? | Планы на будущее 🕐",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 9,
  "fields": {
    "block": 4,
    "title": "Команда print() | Вывод данных на экран 💻",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 10,
  "fields": {
    "block": 4,
    "title": "Команда input() | Переменные 💻",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 11,
  "fields": {
    "block": 4,
    "title": "Аргументы команды print() | Разделители и окончания строки",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 12,
  "fields": {
    "block": 4,
    "title": "Основные типы данных | Строки, числа (целые и дробные)",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 13,
  "fields": {
    "block": 4,
    "title": "Стандарт оформления кода PEP 8 и осмысленные названия переменных",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 14,
  "fields": {
    "block": 5,
    "title": "Арифметические операции | + - * / % // **",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 15,
  "fields": {
    "block": 5,
    "title": "Учимся доставать разряды из чисел | Работа с делением",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 16,
  "fields": {
    "block": 5,
    "title": "Операции сравнения | <= >= != > < =",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 17,
  "fields": {
    "block": 5,
    "title": "Логические операции",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 18,
  "fields": {
    "block": 5,
    "title": "Операции присваивания",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 19,
  "fields": {
    "block": 5,
    "title": "Модуль | math",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 20,
  "fields": {
    "block": 6,
    "title": "Обработка случаев | if",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 21,
  "fields": {
    "block": 6,
    "title": "Вложенные условия | if-if",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 22,
  "fields": {
    "block": 6,
    "title": "Обработка дополнительных значений | elif",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 23,
  "fields": {
    "block": 6,
    "title": "Обработка всех остальных значений | else",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 24,
  "fields": {
    "block": 6,
    "title": "Комбинированное ветвление | if-elif-else",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 25,
  "fields": {
    "block": 7,
    "title": "Проверка на вхождение строки | IN",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 26,
  "fields": {
    "block": 7,
    "title": "Методы форматирования строк | format, f-string, %s",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 27,
  "fields": {
    "block": 7,
    "title": "Индексация и Срезы",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 28,
  "fields": {
    "block": 7,
    "title": "Методы Строк",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 29,
  "fields": {
    "block": 8,
    "title": "While | Первый цикл",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 30,
  "fields": {
    "block": 8,
    "title": "Цикл For | Возможности пробегаться по сущностям |",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 31,
  "fields": {
    "block": 9,
    "title": "Итог",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 32,
  "fields": {
    "block": 9,
    "title": "Что делать дальше?",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 33,
  "fields": {
    "block": 9,
    "title": "Планы на будущее | Задачник",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 34,
  "fields": {
    "block": 10,
    "title": "Прошли прошлый курс?",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 35,
  "fields": {
    "block": 10,
    "title": "Для кого двух курсов хватит?",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 36,
  "fields": {
    "block": 10,
    "title": "Спасибо!",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 37,
  "fields": {
    "block": 11,
    "title": "Введение в списки | list() и индексация",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 38,
  "fields": {
    "block": 11,
    "title": "Вложенные списки | list[1][2][3][4]",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 39,
  "fields": {
    "block": 11,
    "title": "Методы изменения списков | append, insert, extend,...",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 40,
  "fields": {
    "block": 11,
    "title": "Генераторы списков | [i for i in ...]",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 41,
  "fields": {
    "block": 11,
    "title": "Итерация по вложенным спискам | for i in [1, 2, 3]",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 42,
  "fields": {
    "block": 12,
    "title": "Введение в кортежи",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 43,
  "fields": {
    "block": 12,
    "title": "Преобразование других типов в кортежи | Метод tuple()",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 44,
  "fields": {
    "block": 12,
    "title": "Задачи на усвоение кортежей + списков",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 45,
  "fields": {
    "block": 13,
    "title": "Введение в множества | Тип данных set",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 46,
  "fields": {
    "block": 13,
    "title": "Операции с множествами",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 47,
  "fields": {
    "block": 13,
    "title": "Итерация по множествам и использование функций",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 48,
  "fields": {
    "block": 13,
    "title": "Замороженные множества | Тип данных frozenset",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 49,
  "fields": {
    "block": 14,
    "title": "Введение в словари | dict()",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 50,
  "fields": {
    "block": 14,
    "title": "Методы изменения словарей | del() pop() popitem() clear()",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 51,
  "fields": {
    "block": 14,
    "title": "Основные методы словарей | keys() values() items() get()",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 52,
  "fields": {
    "block": 14,
    "title": "Словари, как значения других словарей. Вложенные словари",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 53,
  "fields": {
    "block": 14,
    "title": "Итерирование по словарям | enumerate() и zip()",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 54,
  "fields": {
    "block": 15,
    "title": "Модуль random | Работа с случайностью",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 55,
  "fields": {
    "block": 15,
    "title": "Модуль time | Работа с временем",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 56,
  "fields": {
    "block": 16,
    "title": "Введение в функции | Простые примеры",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 57,
  "fields": {
    "block": 16,
    "title": "Функции с параметрами | Прием значений извне",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 58,
  "fields": {
    "block": 17,
    "title": "try - except | Конструкция обработки исключений",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 59,
  "fields": {
    "block": 18,
    "title": "Как быть?",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 60,
  "fields": {
    "block": 18,
    "title": "Что бы хотелось увидеть в новых курсах? | Пожелания",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 61,
  "fields": {
    "block": 19,
    "title": "Решение задачи 1: Two Sum | Две суммы",
    "description": "​\r\nРешение задачи 1: Two Sum | Две суммы\r\n\r\n\r\nЗдесь мы видим явное решение данной задачи. Давайте разберем подробно каждый шаг построчно. \r\n\r\nстрока 1.На первой строке мы видим приемку списка. Первым принимается число цикольного выражения (for i in range(int(input()))) где int(input()) который в конце - количество чисел внутри списка. Допустим, вводим 3. Теперь цикл 3 раза запросит int(input()) - который вначале и поместит его в цикл\r\n\r\nстрока 2. Прием таргета (сумма двух чисел в списке должна давать это число)\r\n\r\nстрока 4. Флаг для завершения программы. Так как нам необходимо только одно решение - первое подходящее, следовательно нам нужен флаг, который сменится на True после нахождения правильного решения и завершит программу. \r\n\r\nстрока 5. Данная строка проходится по всему списку и переменная i принимает его индексы, не сами числа. Дальше будет легче доставать числа и выводить индексы на экран (по условию задачи)\r\n\r\nстрока 6. Цикл - принимающий числа, которые идут после i. Как по условию. Если i - это индекс условно первого числа, то j будет принимать все числа после первого и суммировать их. Иными словами, если у нас есть список [1, 2, 3, 4] то когда первый цикл примет число 1, второй цикл будет суммировать эту единицу с всеми последующими числами то есть будет искать сумму, которая дает таргет в таком порядке: 1 + 2; 1 + 3; 1 + 4; | 2 + 3; 2 + 4; | 3 + 4 | То есть первое число - по порядку из списка, а второе - все после него.\r\n\r\nстрока 7. Условие на нахождение той самой суммы. Если первое число + второе число дает таргет, выполняем вывод и завершаем программу\r\n\r\nстрока 8. Выводим на экран список из двух тех самых индексов\r\n\r\nстрока 9. Для того, чтобы внешний цикл не повторялся, меняем флаг на True, ведь ниже у нас есть условие на продолжение цикла - 11 и 12 строки. Нет смысла считать дальше, так как мы нашли решение, а программа требует первое найденное. Поэтому этот флаг показывает, что наша сумма уже найдена и можно не продолжать считать\r\n\r\nстрока 10. Флаг показывает только внешнему циклу, продолжать перебирать числа или же нет. Для завершения внутреннего цикла (его тоже нет смысла считать, так как решение уже найдено) используем оператор break\r\n\r\nстрока 11. Условие на продолжение перебора внешнего цикла. Если решение еще не найдено (found == False) то продолжать поиск. Если же найдено ( if flag == True:) или можно писать просто (if flag:) \r\n\r\nстрока 12. В таком случае завершить и внешний цикл с помощью break\r\n\r\nРешение на LeetCode:\r\n\r\nТут то же самое, только оформлено в виде ООП (о нем у нас есть отдельный курс, который готовится к выходу) и методами внутри класса (о них мы уже говорили в нашем втором курсе по python). В данном коде приемку оформляет метод, а return заменяет нам оба break для внутреннего и внешнего цикла так как return полностью сворачивает функцию и выводит результат\r\n\r\n​",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 62,
  "fields": {
    "block": 19,
    "title": "​ Решение задачи 9 на LeetCode | Вторая задача | Число - палиндром",
    "description": "​\r\nРешение задачи 9 на LeetCode | Вторая задача | Число - палиндром\r\n\r\nСуть задачи предельно ясна: Дано число на входе, узнать, читается ли оно одинаково как слева направо так и справа налево.\r\n\r\nТо есть является ли палиндромом\r\n\r\n \r\n\r\nЗадача с LeetCode\r\n\r\n\r\n\r\nЧто касается решения этой задачи, то тут все максимально просто. \r\n\r\nНе будем превращать строку в число с помощью int(), а сразу попробуем развернуть ее и сравнить обычную строку с развернутой. Если равны - то это палиндром, если нет - не палиндром.\r\n\r\nРешение для Stepik:\r\n\r\nстрока 1. Прием строки (нашего числа)\r\n\r\nстрока 2. Проверка простого числа с его обратной частью. срез[::-1] дает нам строку справа налево.\r\n\r\n \r\n\r\nРешение задачи для LeetCode:\r\n\r\n\r\n\r\n​",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 63,
  "fields": {
    "block": 19,
    "title": "Решение задачи 3 | Римское в арабское",
    "description": "​\r\nВот само условие задачи с LeetCode: \r\n\r\n \r\n\r\nПринимается на вход строка и конвертируется в привычное нам число. Так как существуют различные необычные случаи (нельзя просто обработать каждую цифру по отдельности) то нам нужно обработать сначала случаи \"пар\" например: 'IV' или 'XC' а потом уже пройтись по обычным оставшимся цифрам. \r\n\r\nРешение для LeetCode:\r\n\r\n\r\n\r\nНа самом деле код очень прост. Мы просто обрабатываем различные случаи, проходясь по строке ровно столько раз, сколько может быть у нас значений. \r\n\r\nстрока 3. Создается счетчик (именно его мы будем выводить по окончанию)\r\n\r\nстрока 4. Особенных значений у нас всего 6 и все мы заменим на пустую строку и прибавим это значение к счетчику. То есть: Нашли условно в строке IX, удалили из строки и прибавили к счетчику. Поэтому цикл проходиться только 7 раз, ведь это максимальное количество разнообразий. Даже если все случаи будут в числе, они все заменятся за 7 проходов цикла.\r\n\r\nМетод replace() : replace(arg1, arg2) где arg1 заменится на arg2. У нас же s.replace('IV', '') заменяет IV на пустую строку.\r\n\r\nстрока 5 - 6. Если строка пустая, заканчиваем программу и выводим счетчик на экран (ведь строка пуста, нечего больше считать)\r\n\r\nстроки 7 - 24. Обработчики различных случаев. Если нашлась такая последовательность - удалить ее из строки и прибавить значение к счетчику. Затем идти дальше\r\n\r\nстрока 26. Такой же самый момент. Только тут мы обрабатываем уже оставшиеся простые цифры. \r\n\r\nстрока 27 - 49. Такой же обработчик, как и в прошлый раз, только теперь уже прибавляем не просто, допустим, 10,  а количество десяток * 10.\r\n\r\n \r\n\r\nСтатистика задачи:\r\n\r\n\r\n​",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 64,
  "fields": {
    "block": 19,
    "title": "Решение задачи 4 | Самый длинный общий префикс",
    "description": "​\r\nРешение задачи 4 | Самый длинный общий префикс\r\nРешение для LeetCode:\r\n\r\nДавайте разберем каждую строку подробно.\r\n\r\nАлгоритм в том, чтобы выбрать какое - то слово (в нашем случае - самое минимальное, ведь нет смысла сравнивать дальше, так как префикс в таком случае уже не общий будет. Ведь длина самого минимального слова - и есть максимально возможная длина префикса) выбирать из него по букве и сравнивать со всеми остальными словами. Если буква есть в том же срезе, что и у нашего слова, то добавляем ее как общую для всех. \r\n\r\nСтроки 3 - 4. Определения переменных\r\n\r\nСтрока 5. Так как нам нужны именно срезы [0:0] работать не будет, а также если слово длиной 4 символа срез [0:4] даст нам только первые 3, так как последний индекс в срезе идет не включительно. Поэтому ставим от 1 до длины нашего слова + 1.\r\n\r\nСтрока 6. Создаем флаг. Если следующая буква хоть где - то не будет общей - закрываем программу и выводим результат.\r\n\r\nСтрока 7. Данная переменная будет олицетворять нашу строку, которую мы проверяем. Если в слове flow, то сначала она заберет от этого слова только f и проверит (как в строке 10) на вхождение в той же позиции этой буквы. Дальше с fl и так далее.\r\n\r\nСтрока 8 - 9. Проход по словам и только если flag = True, то есть префиксы все еще общие.\r\n\r\nСтрока 10. Проверка на вхождение сравниваемой строки и ее среза в том же положении в проверяемых словах.\r\n\r\nСтрока 11. Если есть, то начинаем проверять у следующего слова\r\n\r\nСтрока 12 - 14. В ином же случае получается, что этот префикс уже не общий для всех и поэтому закрываем цикл и меняем флаг на False, чтобы он не перезапускался.\r\n\r\nСтрока 15 - 16. Если же цикл завершился штатно (то есть все слова проверены и у всех есть этот общий префикс) то добавляем этот символ к нашей строке для вывода.\r\n\r\nСтрока 17 - 18. Выход из программы если префикс не общий.\r\n\r\nСтатистика задачи на LeetCode:\r\n\r\n\r\n​",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 65,
  "fields": {
    "block": 19,
    "title": "​ Решение задачи 5 | Валидные скобки",
    "description": "​\r\nРешение задачи 5 | Валидные скобки\r\n\r\n\r\nНа самом деле решение тоже довольно простое. Все что нам нужно это убрать все правильные скобки с помощью цикла и посмотреть, осталось ли что - то еще помимо правильных скобок. Вот, как это сделать:Так как у каждой скобки есть своя, закрывающая, то проходиться циклом можно len(s) / 2 раз, так как если строка - [()], то всего 2 раза (одна для круглых скобок, другая для внешних - квадратных). Таким образом те скобки, что снаружи будут соединяться после того, как внутренние уйдут. И если после всех этих процедур останется что - то, то скобки - неправильные. \r\n\r\nУ нас булевый вывод (true/false) поэтому мы возвращаем результат выражения: Пустой ли стала строка или нет.\r\n\r\nCтатистика решения задачи:\r\n\r\n\r\n​",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 66,
  "fields": {
    "block": 20,
    "title": "Решение задачи 6 | Найдите вставленную позицию",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 67,
  "fields": {
    "block": 20,
    "title": "Задача 7 | Найдите индекс первого вхождения в строке.",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 68,
  "fields": {
    "block": 20,
    "title": "Задача 8 | Длина последнего слова",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 69,
  "fields": {
    "block": 20,
    "title": "Задача 9 | Плюс один",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 70,
  "fields": {
    "block": 20,
    "title": "Задача 10 | Добавить двоичное",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 71,
  "fields": {
    "block": 21,
    "title": "Задача 11 | Валидный палиндром",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 72,
  "fields": {
    "block": 21,
    "title": "Задача 12 | Одиночное число",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 73,
  "fields": {
    "block": 21,
    "title": "Задача 13 | Главный элемент",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 74,
  "fields": {
    "block": 21,
    "title": "Задача 14 | Обычную дату в бинарную",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 75,
  "fields": {
    "block": 21,
    "title": "Задача 15 | Счастливое число",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 76,
  "fields": {
    "block": 22,
    "title": "Задача 16 | Лучшее время купли-продажи",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 77,
  "fields": {
    "block": 22,
    "title": "Задача 17 | Cтепень ли двойки",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 78,
  "fields": {
    "block": 22,
    "title": "Задача 18 | Анаграмма ли?",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 79,
  "fields": {
    "block": 22,
    "title": "Задача 19 | Добавить цифр",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 80,
  "fields": {
    "block": 22,
    "title": "Задача 20 | Уродливый номер",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 81,
  "fields": {
    "block": 23,
    "title": "Задача 21 | Потерянное число",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 82,
  "fields": {
    "block": 23,
    "title": "Задача 22 | Передвинуть нули",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 83,
  "fields": {
    "block": 23,
    "title": "Задача 23 | Игра Нима",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 84,
  "fields": {
    "block": 23,
    "title": "Задача 24 | Степень ли тройки?",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 85,
  "fields": {
    "block": 23,
    "title": "Задача 25 | Подсчет битов",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 86,
  "fields": {
    "block": 24,
    "title": "Задача 26 | Cтепень четырех",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 87,
  "fields": {
    "block": 24,
    "title": "Задача 27 | Перевернуть строку",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 88,
  "fields": {
    "block": 24,
    "title": "Задача 28 | Перевернуть только гласные в строке",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 89,
  "fields": {
    "block": 24,
    "title": "Задача 29 | Пересечение двух массивов",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 90,
  "fields": {
    "block": 24,
    "title": "Задача 30 | Пересечение двух массивов 2",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 91,
  "fields": {
    "block": 25,
    "title": "Задача 31 | Идеальный валидный квадрат",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 92,
  "fields": {
    "block": 25,
    "title": "Задача 32 | ransomNote",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 93,
  "fields": {
    "block": 25,
    "title": "Задача 33 | Первый уникальный символ в строке",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 94,
  "fields": {
    "block": 25,
    "title": "Задача 34 | Найди разницу",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 95,
  "fields": {
    "block": 25,
    "title": "Задача 35 | FizzBuzz",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 96,
  "fields": {
    "block": 26,
    "title": "Задача 36 | Третий максимальный номер",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 97,
  "fields": {
    "block": 26,
    "title": "Задача 37 | Добавить строки",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 98,
  "fields": {
    "block": 26,
    "title": "Задача 38 | Номер сегментов в строке",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 99,
  "fields": {
    "block": 26,
    "title": "Задача 39 | Разбиение монеточек",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 100,
  "fields": {
    "block": 26,
    "title": "Задача 40 | Найти все пропавшие номера в списке",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 101,
  "fields": {
    "block": 27,
    "title": "Задача 41 | Hamming Distance",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 102,
  "fields": {
    "block": 27,
    "title": "Задача 42 | Периметр острова",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 103,
  "fields": {
    "block": 27,
    "title": "Задача 43 | Дополненное число",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 104,
  "fields": {
    "block": 27,
    "title": "Задача 44 | Самые последовательные",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 105,
  "fields": {
    "block": 27,
    "title": "Задача 45 | Cледующий больший элемент",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 106,
  "fields": {
    "block": 28,
    "title": "Задача 46 | Клавиатурный ряд",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 107,
  "fields": {
    "block": 28,
    "title": "Задача 47 | По основанию семи",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 108,
  "fields": {
    "block": 28,
    "title": "Задача 48 | Идеальное число",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 109,
  "fields": {
    "block": 28,
    "title": "Задача 49 | Выявить столицу",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.topic",
  "pk": 110,
  "fields": {
    "block": 28,
    "title": "Задача 50 | Перевернуть строку 2",
    "description": "",
    "min_time_duration": 1
  }
},
{
  "model": "courses.content",
  "pk": 1,
  "fields": {
    "topic": 5,
    "type": "text",
    "title": "Приветствуем вас на курсе по Python!",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h3><strong>Приветствуем вас на курсе по Python!</strong></h3>\r\n\r\n<p>Дорогие ученики, рад видеть вас на этом увлекательном пути в мир программирования. Python &mdash; это один из самых популярных и доступных языков, который откроет перед вами множество возможностей. Независимо от того, новичок вы или уже имеете опыт в программировании, этот курс поможет вам уверенно освоить все необходимые основы, научиться решать задачи и создавать реальные проекты.</p>\r\n\r\n<p>Будьте готовы к интересным задачам и новым знаниям, а главное &mdash; не бойтесь ошибаться, ведь именно на ошибках мы учимся. Удачи вам на этом пути, и вперед, к новым вершинам в программировании!</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Как проходится курс : Важно</h2>\r\n\r\n<p>На данном курсе будут рассматриваться основные концепции языка Python, чтобы как можно быстрей, интересней и подробней разобраться с основами и подготовить вас к действительно мощному курсу.</p>\r\n\r\n<p>Каждый урок включает:</p>\r\n\r\n<p><strong>1. Теоретическую часть</strong> &mdash; мы разберемся с основами Python, синтаксисом и ключевыми концепциями.&nbsp;</p>\r\n\r\n<p>В случае, если урок уже просмотрен/пройден, степик подсветит квадратик вверху (отвечающий за каждую тему) - зеленым</p>\r\n\r\n<p><img alt=\"\" height=\"46\" name=\"image.png\" src=\"https://ucarecdn.com/f1d2bae3-545c-48c1-93d3-92a3f348f74d/\" width=\"48\" />-Теоретический блок&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;<img alt=\"\" height=\"48\" name=\"image.png\" src=\"https://ucarecdn.com/3fe8f7b9-3f16-4c09-a4cf-9492d49e7c21/\" width=\"50\" />-Блок с вопросом по теории&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img alt=\"\" height=\"48\" name=\"image.png\" src=\"https://ucarecdn.com/453c2bf3-a873-4e81-9630-b83bed02ca7d/\" width=\"50\" />- Практическое задание</p>\r\n\r\n<p><strong>2.Примеры кода</strong> &mdash; чтобы вам было проще понять материал, мы показываем практические примеры и подробно объясняем каждый шаг.</p>\r\n\r\n<p><img alt=\"\" height=\"160\" name=\"carbon (1).png\" src=\"https://ucarecdn.com/d9a7e543-4e71-4191-8559-f3998387157b/\" width=\"708\" /></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>3. Практические задания</strong> &mdash; на протяжении курса вам будут даны задания, которые помогут закрепить теорию и развить практические навыки. По мере прохождения курса частота заданий и их сложность будет повышаться. Также хотелось бы, чтобы теория служила поводом узнать что - то новое или закрепить старое. Иными словами, в теоретических тестах не обязательно будет та информация, которая была в материалах. Там могут быть определения, к которым можно прийти, то есть теоретические задачи - еще один способ узнать новую теорию. В любом случае, за неправильные ответы баллы не снимаются, желательно не ошибаться но ошибка - повод узнать что - то новое. Чем дальше вы будете идти, тем сложнее будут задания, однако, если в ваши планы не входит полное изучение python и вам необходимо просто запомнить некоторые концепты, мы оставили возможность переходить на следующую тему в случае, если только несколько задач решено</p>\r\n\r\n<p><strong>Мы лично проверяем проекты и задания каждого ученика,</strong> чтобы дать максимально точную обратную связь и помочь вам в развитии. Вам не нужно беспокоиться, что ваш прогресс останется незамеченным &mdash; мы всегда рядом, чтобы поддержать и помочь на каждом этапе.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 2,
  "fields": {
    "topic": 6,
    "type": "text",
    "title": "История языка Python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">&nbsp;</h1>\r\n\r\n<h1 style=\"text-align:center;\">История языка Python</h1>\r\n\r\n<p><strong>Цель урока:</strong></p>\r\n\r\n<p>Познакомить вас с основными моментами развития языка программирования <strong>Python.</strong></p>\r\n\r\n<p><code>Python</code> был создан Гвидо ван Россумом в конце <code>1980-х</code> годов. Основные этапы истории:</p>\r\n\r\n<ul>\r\n\t<li><strong>1989 год</strong> — Гвидо ван Россум начал разработку Python во время работы в CWI (Centrum Wiskunde &amp; Informatica) в Нидерландах. Целью было создать язык, который будет прост в использовании и синтаксически понятен.</li>\r\n\t<li><strong>1991 год</strong> — первая версия Python 0.9.0 была выпущена. В ней уже были такие ключевые особенности, как работа с функциями, классами и исключениями.</li>\r\n\t<li><strong>1994 год</strong> — выход версии Python 1.0, включавшей ключевые структуры данных (списки, словари).</li>\r\n\t<li><strong>2000 год</strong> — выход версии Python 2.0, которая добавила сборку мусора на основе подсчёта ссылок.</li>\r\n\t<li><strong>2008 год</strong> — выход версии Python 3.0. Это была несовместимая версия, которая устранила многие недостатки предыдущих версий.</li>\r\n\t<br>\r\n\t<li>С тех пор Python активно развивается, и последняя основная версия — <code><strong>Python 3.12.</strong></code></li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Интересно: название <code>Python</code> не связано со змеёй — Гвидо ван Россум назвал язык в честь популярного британского комедийного шоу \"Monty Python’s Flying Circus\".</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"1051\" name=\"image.png\" src=\"https://ucarecdn.com/a6a3875c-1995-46e0-9445-eebc403aa82b/\" width=\"701\"></p>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>Вы узнали о ключевых моментах развития <code>Python </code>и интересном факте о его наименовании, теперь предлагаю перейти к уроку про особенности данного языка программирования.&nbsp;</p>"
  }
},
{
  "model": "courses.content",
  "pk": 3,
  "fields": {
    "topic": 6,
    "type": "text",
    "title": "Особенности Python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Особенности Python</h1>\r\n\r\n<p><strong>Цель урока:</strong></p>\r\n\r\n<p>Познакомить вас с особенностями языка программирования Python и его преимуществами.&nbsp;&nbsp;</p>\r\n\r\n<ul>\r\n\t<li><strong>Простота и читаемость кода:</strong>благодаря минималистичному синтаксису код на Python легко читается и пишется.</li>\r\n</ul>\r\n\r\n<p><img alt=\"\" height=\"422\" name=\"image.png\" src=\"https://ucarecdn.com/308dfd93-1f9b-4d61-a5c5-3664b689ab26/\" width=\"886\"></p>\r\n\r\n<ul>\r\n\t<li><strong>Высокий уровень абстракции:</strong> Python - высокоуровневый язык программирования, позволяющий концентрироваться на решении задач, а не на низкоуровневых деталях(о них позже).</li>\r\n\t<li><strong>Кроссплатформенность:</strong> Python работает на различных операционных системах - Windows, MacOs, Linux.</li>\r\n\t<li><strong>Динамическая типизация:</strong> переменные не требуют указания типа данных, Python автоматически определяет тип, после внесения значения в переменную.</li>\r\n\t<li><strong>Большая стандартная библиотека:</strong> Python поставляется с обширным набором стандартных модулей, которые поддерживают работу с файлами, сетями, веб-сервисами, регулярными выражениями и многим другим.&nbsp;</li>\r\n\t<li><strong>Поддержка нескольских парадигм программирования:</strong>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</li>\r\n</ul>\r\n\r\n<ol>\r\n\t<li>Процедурное программирование&nbsp;</li>\r\n\t<li>Объектно-Ориентированное программирование(ООП)</li>\r\n\t<li>Функциональное программирование</li>\r\n</ol>\r\n\r\n<ul>\r\n\t<li><strong>Большое сообщество по всему миру и Обширная экосистема:</strong> На Python пишет огромное количество разработчиков по всему миру, что повышает лёгкость обучения, так как есть детальное описание решения&nbsp;99% возможных &nbsp;проблем. Так же Python имеет множество сторонних библиотек(NumPy, Pandas, Django, Flask и т.д)</li>\r\n</ul>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>Вы узнали о главных особенностях и преимуществах <code>Python</code>,&nbsp; теперь предлагаю ответить на небольшой вопрос в следующем шаге и затем перейти к уроку о применении <code>Python</code> в современном мире.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 4,
  "fields": {
    "topic": 6,
    "type": "text",
    "title": "Где используется Python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\"><strong>Где используется Python</strong></h1>\r\n\r\n<p><strong>Цель урока:</strong></p>\r\n\r\n<p>Познакомится со сферами применения языка программирования Python в современном мире. И познакомится с основными библиотеками и фреймворками данного языка.</p>\r\n\r\n<p><code>Python </code>- универсальный язык программирования и используется в разных областях:</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>1.Data Science и машинное обучение</strong></h2>\r\n\r\n<p>Python - один из наиболее популярных языков в области анализа данных и искусственного интеллекта.&nbsp;</p>\r\n\r\n<p><strong>NumPy, Pandas</strong> - для обработки данных</p>\r\n\r\n<p><strong>Scikit-learn, TensorFlow, PyTorch</strong> - для машинного обучения</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"150\" name=\"image.png\" src=\"https://ucarecdn.com/97821d8e-9b43-4dfb-bced-07f28d32cae7/\" width=\"150\"><img alt=\"\" height=\"115\" name=\"image.png\" src=\"https://ucarecdn.com/a7b1600b-15f2-49eb-8a54-815605699157/\" width=\"214\"><img alt=\"\" height=\"179\" name=\"image.png\" src=\"https://ucarecdn.com/9f601e59-1470-4fc8-bd33-4d056f6a23cd/\" width=\"281\"></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"114\" name=\"image.png\" src=\"https://ucarecdn.com/acd2b1c7-547e-4619-ae72-fa61598fe35d/\" width=\"228\"></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"143\" name=\"image.png\" src=\"https://ucarecdn.com/f686107a-0c3f-43ea-a968-b8d73febf786/\" width=\"353\"></p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>2.Веб-разработка</strong></h2>\r\n\r\n<p>Популярные фреймворки для веб-разработки:</p>\r\n\r\n<p><strong>Django, Flask, FastAPI</strong> - позволяет быстро создавать веб-приложения.</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"132\" name=\"image.png\" src=\"https://ucarecdn.com/3d45f5c9-dca8-4887-9f10-f9985f5013ea/\" width=\"381\"><img alt=\"\" height=\"180\" name=\"image.png\" src=\"https://ucarecdn.com/4576deea-1fcd-43ff-bcae-351df6a070df/\" width=\"460\"></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"165\" name=\"image.png\" src=\"https://ucarecdn.com/7583beb9-d7da-4574-92d1-16cc7d721663/\" width=\"458\"></p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>3.Автоматизация и скрипты</strong></h2>\r\n\r\n<p>Python часто используется для написанния скриптов автоматизации задач, управления серверными процессами и DevOps.</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>4.Разработка игр</strong></h2>\r\n\r\n<p>В целом Python используется реже для игр, но существует основная библиотека:</p>\r\n\r\n<p><strong>Pygame</strong> - для разработки простых игр.</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"218\" name=\"image.png\" src=\"https://ucarecdn.com/910ab384-2fc0-47ab-9e71-8c0a5c10b49a/\" width=\"551\"></p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>5.Разработка приложений</strong></h2>\r\n\r\n<p>Python подходит для разработки настольных и мобильных приложений с помощью библиотек:</p>\r\n\r\n<p><strong>PyQt, Kivy, Tkinter&nbsp;</strong></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"201\" name=\"image.png\" src=\"https://ucarecdn.com/2bbab063-94eb-4eaf-af8a-5d5c3620ac06/\" width=\"192\">&nbsp; &nbsp; &nbsp;<img alt=\"\" height=\"202\" name=\"image.png\" src=\"https://ucarecdn.com/a683c3fe-78da-4043-9ae7-bfa197d5d653/\" width=\"202\"></p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>6.Научные исследования</strong></h2>\r\n\r\n<p>Python активно используется учёными и исследователями для проведения симуляций, анализа данных и визуализации</p>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>Мы познакомились в возможностями применения языка программирования Python, теперь предлагаю ознакомится с местами, который занимает в международных топах популярности языков программирования.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 5,
  "fields": {
    "topic": 6,
    "type": "text",
    "title": "Место в топах",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\"><strong>Место в топах</strong></h1>\r\n\r\n<p><strong>Цель урока:</strong></p>\r\n\r\n<p>Узнать о уровне популярности применения языка программирования Python на мировом уровне.</p>\r\n\r\n<p><code>Python</code> стабильно занимает высокие места в рейтингах популярности языков программирования:</p>\r\n\r\n<ul>\r\n\t<li><strong>TIOBE Index</strong>: Python уже несколько лет удерживает первое место по популярности среди языков программирования.<img alt=\"\" height=\"592\" name=\"Снимок экрана 2025-01-10 000742.png\" src=\"https://ucarecdn.com/1ab59c8c-dd2e-4fb2-a813-50f49caf487b/\" width=\"1715\"></li>\r\n\t<li><strong>Stack Overflow Developer Survey</strong>: Python входит в топ-3 наиболее используемых и любимых языков программирования.<img alt=\"\" height=\"562\" name=\"Снимок экрана 2025-01-10 000938.png\" src=\"https://ucarecdn.com/76c37c12-84f4-4950-af45-23f24bf9f1e9/\" width=\"1135\"></li>\r\n\t<li><strong>RedMonk</strong>: Python стабильно занимает первое или второе место в рейтингах популярности среди разработчиков.<img alt=\"\" height=\"586\" name=\"Снимок экрана 2025-01-10 001024.png\" src=\"https://ucarecdn.com/e0303a74-aca9-4ca9-aaef-cc99609930c5/\" width=\"411\"></li>\r\n</ul>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>Все мировые топы языков программирования показывают, что Python на протяжении многих лет находится в лидирующем положении, что указывает на стабильность и важность данной технологии. Изучение&nbsp; языка программирования Python - откроет для вас новые карьерные возможности и сделает вас как специалиста и личность <strong>сильнее</strong>. Но теперь рекомендую ознакомится с недостатками <code>Python</code> в следующем шаге.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 6,
  "fields": {
    "topic": 6,
    "type": "text",
    "title": "Недостатки Python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Недостатки Python</h1>\r\n\r\n<p><strong>Цель урока:</strong></p>\r\n\r\n<p>Познакомится с недостатками языка программирования Python.</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>1.Скорость выполнения</strong>:</h2>\r\n\r\n<p style=\"text-align:center;\">Python медленнее, чем компилируемые языки, такие как C++ или Java.</p>\r\n\r\n<p style=\"text-align:center;\"><strong>Проблема</strong>: Для вычислительно сложных задач Python может быть узким местом.</p>\r\n\r\n<p style=\"text-align:center;\"><strong>Обходные пути</strong>:</p>\r\n\r\n<p style=\"text-align:center;\">Использование модулей, написанных на C/C++ (например, <strong>NumPy</strong>, <strong>SciPy</strong>).</p>\r\n\r\n<p style=\"text-align:center;\">Переписывание критических участков кода на Cython (Python с возможностью компиляции в C-код).</p>\r\n\r\n<p style=\"text-align:center;\">Использование компиляторов JIT, таких как <strong>PyPy</strong>.</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"150\" name=\"image.png\" src=\"https://ucarecdn.com/3c94c13c-fe42-45ba-8ddd-e056eb0ec236/\" width=\"150\">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;<img alt=\"\" height=\"150\" name=\"image.png\" src=\"https://ucarecdn.com/da6478f4-d047-473d-b9ff-dd972488946c/\" width=\"150\"></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"150\" name=\"image.png\" src=\"https://ucarecdn.com/97821d8e-9b43-4dfb-bced-07f28d32cae7/\" width=\"150\"><img alt=\"\" height=\"150\" name=\"image.png\" src=\"https://ucarecdn.com/a65ab013-ff0f-4727-8e58-6c0c2b6cb0c5/\" width=\"150\"></p>\r\n\r\n<p style=\"text-align:center;\">&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>2.Не всегда подходит для мобильных приложений и создания сложных игр</strong>:</h2>\r\n\r\n<p style=\"text-align:center;\">редко используется для разработки нативных мобильных приложений и имеет ограниченный функционал для создания игр.</p>\r\n\r\n<p style=\"text-align:center;\"><strong>Проблема</strong>: Python не является основным выбором для мобильной разработки.</p>\r\n\r\n<p style=\"text-align:center;\"><strong>Обходные пути</strong>:</p>\r\n\r\n<p style=\"text-align:center;\">Использовать Python для создания серверной логики или веб-сервисов для мобильных приложений.</p>\r\n\r\n<p style=\"text-align:center;\">Использовать кроссплатформенные решения, такие как <strong>Kivy</strong>, если мобильная разработка на Python принципиальна.</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"152\" name=\"image.png\" src=\"https://ucarecdn.com/6ff2d23e-bc3c-4691-bed3-0d1994e3b67c/\" width=\"152\"></p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>3.Высокое потребление памяти</strong></h2>\r\n\r\n<p>Python использует динамическую типизацию, что требует дополнительной памяти для хранения метаинформации о типах данных. Структуры данных, такие как списки и словари, также занимают больше памяти по сравнению с аналогами в других языках.</p>\r\n\r\n<p style=\"text-align:center;\"><strong>Проблема</strong>: Высокое потребление памяти может быть критично для программ, работающих с большими объёмами данных.</p>\r\n\r\n<p style=\"text-align:center;\"><strong>Обходные пути</strong>:</p>\r\n\r\n<p style=\"text-align:center;\">Использовать специализированные библиотеки для работы с большими объёмами данных (например, <strong>Pandas</strong>, <strong>NumPy</strong>, которые оптимизированы на уровне C).</p>\r\n\r\n<p style=\"text-align:center;\">Оптимизировать структуру данных и алгоритмы.</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"143\" name=\"image.png\" src=\"https://ucarecdn.com/f686107a-0c3f-43ea-a968-b8d73febf786/\" width=\"353\"></p>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>Вы узнали об основных недостатках данного языка программирования и вариантов их решения.&nbsp;</p>"
  }
},
{
  "model": "courses.content",
  "pk": 7,
  "fields": {
    "topic": 7,
    "type": "text",
    "title": "Установка и настройка Python | Первая программа",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\"><strong>Установка и настройка Python | Первая программа</strong></h1>\r\n\r\n<p style=\"text-align:center;\"><strong>Язык Python</strong> — это один из самых простых языков, особенно если рассматривать его с точки зрения установки и настройки. В отличие от некоторых других языков, для начала работы с Python вам не нужно тратить много времени на сложные процедуры установки или конфигурации.</p>\r\n\r\n<p style=\"text-align:center;\">Давайте шаг за шагом разберемся, как установить Python и запустить вашу первую программу.</p>\r\n\r\n<p style=\"text-align:center;\">----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</p>\r\n\r\n<h2 style=\"text-align:center;\">1. Установка Python&nbsp;</h2>\r\n\r\n<p style=\"text-align:center;\">При самом первом использовании нужно установить python к себе на устройство.&nbsp;</p>\r\n\r\n<p style=\"text-align:center;\">Для этого переходим на python.org и наводимся на \"Download\\Установить\", затем на серую кнопку с Python &lt;версия&gt;</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"352\" name=\"image.png\" src=\"https://ucarecdn.com/3e6b8594-4f40-4297-8766-a29d584b9cd3/\" width=\"674\"></p>\r\n\r\n<p style=\"text-align:center;\">По завершении установки, открываем инсталлятор и обязательно ставим галочки напротив \"Add Python&nbsp;&lt;версия&gt; to PATH \"</p>\r\n\r\n<p style=\"text-align:center;\">и ту, что выше</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"461\" name=\"Python installer.png\" src=\"https://ucarecdn.com/db4a715c-ad8b-4bd4-9eb8-94e0fa2b022e/\" width=\"880\"></p>\r\n\r\n<p style=\"text-align:center;\">После установки Python на ваш компьютер вы уже можете запустить свою первую программу через командную строку. Для этого вводим сочетание клавиш Win + R и в поле вводим cmd. Это откроет нам командную строку для записи различных команд, обрабатывающихся вашим компьютером.</p>\r\n\r\n<p style=\"text-align:center;\">Для того чтобы запустить python просто введите: \"python\"&nbsp;<img alt=\"\" height=\"69\" name=\"image.png\" src=\"https://ucarecdn.com/ea1cad39-7793-419a-b08e-f67dfe834d7f/\" width=\"890\"></p>\r\n\r\n<p style=\"text-align:center;\">вы увидите название ЯП и его версию.&nbsp;</p>\r\n\r\n<p style=\"text-align:center;\">Здесь вы можете писать свой первый код. Попробуйте ввести команду для вывода текста -&gt; <code>print('Hello world!')</code> на экран и нажать Enter</p>\r\n\r\n<p style=\"text-align:center;\">Поздравляем! Это официально ваша первая программа на языке программирования Python</p>\r\n\r\n<h3 style=\"text-align:center;\">Однако, неужели нам придется постоянно писать код в такой скучной, унылой черной штуке? Нет, за десятки лет программисты придумали множество сред для разработки - IDE, программы, чтобы писать красочный код, помогать с его исправлениями и более красивым выводом на экран. Вы будете писать код, а программа будет его подсвечивать и обеспечивать более удобное взаимодействие.</h3>\r\n\r\n<p style=\"text-align:center;\">&nbsp;</p>\r\n\r\n<p style=\"text-align:center;\">В интернете есть десятки различных IDE, но по нашему мнению, лучший в разработке на Python - безусловно PyCharm. Его и установим.</p>\r\n\r\n<p style=\"text-align:center;\">&nbsp;</p>\r\n\r\n<p style=\"text-align:center;\">Переходим на&nbsp;<code><a href=\"https://www.jetbrains.com/pycharm/\" rel=\"noopener noreferrer nofollow\">PyCharm: the Python IDE for data science and web development</a></code></p>\r\n\r\n<p style=\"text-align:center;\"><span style=\"color:#000000;\">Скачиваем PyCharm Community Edition и запускаем его у себя на компьютере</span></p>\r\n\r\n<p style=\"text-align:center;\"><span style=\"color:#000000;\">При установке обязательно расставьте галочки на этом этапе:</span></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"377\" name=\"image.png\" src=\"https://ucarecdn.com/65f9065e-9753-4583-9743-e6c08a6eea39/\" width=\"490\"></p>\r\n\r\n<p style=\"text-align:center;\">После загрузки запускайте PyCharm.</p>\r\n\r\n<p style=\"text-align:center;\">Практически все! Еще пару шагов и можно взламывать пентагон..</p>\r\n\r\n<p style=\"text-align:center;\">Создаем новый проект:</p>\r\n\r\n<p style=\"text-align:center;\">&nbsp;<img alt=\"\" height=\"631\" name=\"image.png\" src=\"https://ucarecdn.com/8ac8eb7b-e11e-4a2e-b941-fb51b80c67c0/\" width=\"780\"></p>\r\n\r\n<p style=\"text-align:center;\">Выбираем путь для проекта (где будут лежать все python файлы) и жмем Create (создать)</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"594\" name=\"image.png\" src=\"https://ucarecdn.com/9e6c604e-f903-4129-8113-a9b6e577ce1a/\" width=\"631\"></p>\r\n\r\n<p style=\"text-align:center;\">Также можно создать файл прямо в любой папке и запустить его через PyCharm. Все будет работать точно так же</p>\r\n\r\n<p style=\"text-align:center;\">Просто в первом случае, за вас файл и окружение (пространство для работы) создаст pycharm, в то время как вы создадите все сами. Для этого:&nbsp;</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"33\" name=\"image.png\" src=\"https://ucarecdn.com/8810e3c9-32a6-48b9-a1ab-9eb4338303c2/\" width=\"618\"></p>\r\n\r\n<p style=\"text-align:center;\">Создать файл с расширением .py</p>\r\n\r\n<p style=\"text-align:center;\">Жмакаем на него ПКМ -&gt; Открыть с помощью -&gt; Выбираем PyCharm</p>\r\n\r\n<p style=\"text-align:center;\">Если вы создали файл сами, то открыв PyCharm нажмите дважды на файл чтобы увидеть его код<br>\r\n<img alt=\"\" height=\"170\" name=\"image.png\" src=\"https://ucarecdn.com/94d15e9b-a1f6-402b-b925-025c4baa4a9a/\" width=\"827\"></p>\r\n\r\n<p style=\"text-align:center;\">&nbsp;</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"1029\" name=\"image.png\" src=\"https://ucarecdn.com/3191a398-9b30-4f10-a30a-1c66881c7ee7/\" width=\"2047\">Cтранно, кода нет.. Логично, ведь мы же ничего еще не написали. Последний шаг... Давайте напишем уже знакомую нам команду <code>print('Hello World') #для вывода на экран надписи</code></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"105\" name=\"image.png\" src=\"https://ucarecdn.com/15ac0370-533b-478c-bba9-c724db7ea7e4/\" width=\"1353\"></p>\r\n\r\n<p style=\"text-align:center;\">Для того, чтобы запустить программу и увидеть ее результат - нажмите на кнопочку в правом верхнем углу.. Ну такую, рядом с жучком и вы увидите консоль снизу с воспроизведением вашего кода.</p>\r\n\r\n<h2 style=\"text-align:center;\">Отличная работа. Теперь приступим уже и к делу.<br>\r\n<br>\r\n&nbsp;</h2>"
  }
},
{
  "model": "courses.content",
  "pk": 8,
  "fields": {
    "topic": 8,
    "type": "text",
    "title": "Планы на будущее",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1>Что по итогу? | Планы на будущее</h1>\r\n\r\n<p>Поздравляем вас с тем, что вы успешно начали свой путь в мир программирования на Python! Мы уверены, что этот курс станет отличной основой для дальнейших успехов. Однако, это только начало! Впереди много интересных и полезных тем, которые помогут вам стать уверенным программистом и расширить свои горизонты в разработке.</p>\r\n\r\n<p><strong>Что дальше?</strong></p>\r\n\r\n<p>Мы надеемся, что вы продолжите свой путь в мире программирования и будете с нами и в будущем. В нашей команде всегда есть место для амбициозных и целеустремленных учеников, и мы бы хотели видеть вас в наших следующих частях линейки курсов по Python. Этот курс - только начало пути.</p>\r\n\r\n<p>Дальше нас ждет еще более интересный путь. Будь уверен, мы всегда будем на страже и если кому - то понадобится помощь на кодовом фронте - мы всегда будем рядом. Оставайся с нами и мы сделаем из тебя настоящего кодера<br>\r\n<br>\r\nЕсли ты не против, мы бы хотели знать, откуда ты о нас узнал, нам очень важна эта информация, чтобы распространять наш курс в еще более широкие массы. Спасибо.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 9,
  "fields": {
    "topic": 9,
    "type": "text",
    "title": "Команда print()",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center\">Команда print()</h2>\r\n\r\n<h2>Цель урока:&nbsp;</h2>\r\n\r\n<p>Научиться использовать команду <code>print()</code> для вывода информации на экран, понять как она работает и закрепить информацию на практике.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center\">Синтаксис команды print()</h2>\r\n\r\n<p>Для того, что бы вывести информацию на экран на языке программирования Python - используется команда <code>print()</code>, а внутри команды используются кавычки, которые обрамляют информацию, которую необходимо вывести на экран, возможно использование двух типов кавычек: одинарных(&#39; &#39;) и двойных(&quot; &quot;)</p>\r\n\r\n<p><em>Пример:</em></p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon (5).png\" src=\"https://ucarecdn.com/4fc05d81-04d8-4032-9108-2609cd313d2f/\" width=\"2316\" /></p>\r\n\r\n<p>Результат этих двух команд будет <em>одинаковым</em></p>\r\n\r\n<p><code>Hello world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code></p>\r\n\r\n<p>*Желательно сразу ввести в привычку использовать только один тип кавычек при написания кода, использование двух разных типов кавычек в одном проекте ухудшает его читаемость и может привести к ошибкам.&nbsp;</p>\r\n\r\n<h4 style=\"text-align:center\">Вывести текст в команде print() без кавычек - НЕЛЬЗЯ</h4>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon (7).png\" src=\"https://ucarecdn.com/95880bc3-4a85-43f5-9322-2174a3d89fdf/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом запуска этого кода будет - <strong>ошибка</strong>, так как язык программирования Python не воспринимает текст без кавычек</p>\r\n\r\n<h2 style=\"text-align:center\">Вызов нескольких объектов</h2>\r\n\r\n<p>В команде <code>print()</code> можно выводить сразу несколько объектов, путём разделения их знаком ,(запятая)</p>\r\n\r\n<p><em>Пример:</em><img alt=\"\" height=\"206\" name=\"carbon (4).png\" src=\"https://ucarecdn.com/628e1bc5-607e-4d80-a203-6b4aef93ebb3/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом будет:</p>\r\n\r\n<p><code>Hello&nbsp; world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p>*Между hello и world! два пробела, так как запятая по умолчанию добавляет один пробел и один пробел находится после Hello.</p>\r\n\r\n<h3 style=\"text-align:center\">Аргументы - что это такое</h3>\r\n\r\n<p><strong>Аргументы</strong> - значения, которые передаются внутрь команды</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 2.png\" src=\"https://ucarecdn.com/45931d8f-1267-437b-b40e-2de4c7187d52/\" width=\"33\" />&nbsp; В строке выше, мы передали два аргумента внутрь команды.</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 3.png\" src=\"https://ucarecdn.com/71eb9391-7fde-46b0-88d5-b854842901f0/\" width=\"33\" />&nbsp;Первый аргумент: &quot;Hello &quot;</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 4.png\" src=\"https://ucarecdn.com/b477f662-f43b-462d-be22-ddf5a1bac33f/\" width=\"33\" />&nbsp;Символ ,(запятая) который соединяет два (или более) аргумента</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 5.png\" src=\"https://ucarecdn.com/a5fa07ce-2907-4406-97df-2d2156d0a6ef/\" width=\"33\" />&nbsp;Второй аргумент: &quot;world!&quot;</p>\r\n\r\n<p><img alt=\"\" height=\"206\" name=\"Group 6.png\" src=\"https://ucarecdn.com/f9a45652-2528-49b2-b916-b37697d72574/\" width=\"2316\" /></p>\r\n\r\n<h2 style=\"text-align:center\">Конкатенация строк</h2>\r\n\r\n<p>Так же можно использовать знак + для того, что бы складывать строки в команде <code>print()</code></p>\r\n\r\n<p><em>Пример:</em></p>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon (6).png\" src=\"https://ucarecdn.com/d1c9584d-49ca-43ea-bef4-d48106c2dfc7/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом будет:</p>\r\n\r\n<p><code>I want to become a junior Python Developer&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center\">Автоматический перенос текста на новую строку</h2>\r\n\r\n<p>В Python команда <code>print()</code> по умолчанию добавляет символ новой строки в конце каждого вызова.&nbsp;Это означает, что каждый раз, когда вы используете&nbsp;<code>print()</code>, текст автоматически переносится на новую строку.<img alt=\"\" height=\"306\" name=\"carbon (8).png\" src=\"https://ucarecdn.com/f8935d79-0a81-4360-9313-1af0ea4f0e22/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом этого кода будет:</p>\r\n\r\n<p><code>Hello world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code></p>\r\n\r\n<p><code>Eidos Academy&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p>То есть каждый отдельный принт будет выводиться с новой строки</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Символ новой строки</strong>: В Python символ новой строки, который обозначается как&nbsp;<code>\\n</code>. Этот символ используется для указания конца строки и начала новой.</p>\r\n\r\n<p><img alt=\"\" height=\"266\" name=\"carbon (9).png\" src=\"https://ucarecdn.com/3dfa09d8-6b18-484b-a8e9-cf3d88a1df70/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом этого кода будет:</p>\r\n\r\n<p><code>Hello&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p><code>&nbsp;world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<h2 style=\"text-align:center\">Комментарии в языке программирования Python</h2>\r\n\r\n<p>Комментарии пишутся двумя способами:</p>\r\n\r\n<p>1.Если комментарии умещается в одну строку используется символ #</p>\r\n\r\n<p><img alt=\"\" height=\"266\" name=\"carbon (10).png\" src=\"https://ucarecdn.com/c42c14c8-f262-4edb-9598-853b317f444c/\" width=\"2316\" /></p>\r\n\r\n<p>2.Если требуется больше чем одна строка, комментарий нужно помещать в тройные кавычки &#39;&#39;&#39; &#39;&#39;&#39;</p>\r\n\r\n<p><img alt=\"\" height=\"856\" name=\"carbon (11).png\" src=\"https://ucarecdn.com/569989bf-b711-423a-9221-60ade1e3919d/\" width=\"2316\" /></p>\r\n\r\n<p><strong>Резюме</strong></p>\r\n\r\n<p>Вы познакомились с первой командой print() и проанализировали примеры применения данной команды. Теперь рекомендую практически закрепить применение команды print() в следующих шагах.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 10,
  "fields": {
    "topic": 10,
    "type": "text",
    "title": "Функция input() и переменные в Python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center\">Команда print()</h2>\r\n\r\n<h2>Цель урока:&nbsp;</h2>\r\n\r\n<p>Научиться использовать команду <code>print()</code> для вывода информации на экран, понять как она работает и закрепить информацию на практике.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center\">Синтаксис команды print()</h2>\r\n\r\n<p>Для того, что бы вывести информацию на экран на языке программирования Python - используется команда <code>print()</code>, а внутри команды используются кавычки, которые обрамляют информацию, которую необходимо вывести на экран, возможно использование двух типов кавычек: одинарных(&#39; &#39;) и двойных(&quot; &quot;)</p>\r\n\r\n<p><em>Пример:</em></p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon (5).png\" src=\"https://ucarecdn.com/4fc05d81-04d8-4032-9108-2609cd313d2f/\" width=\"2316\" /></p>\r\n\r\n<p>Результат этих двух команд будет <em>одинаковым</em></p>\r\n\r\n<p><code>Hello world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code></p>\r\n\r\n<p>*Желательно сразу ввести в привычку использовать только один тип кавычек при написания кода, использование двух разных типов кавычек в одном проекте ухудшает его читаемость и может привести к ошибкам.&nbsp;</p>\r\n\r\n<h4 style=\"text-align:center\">Вывести текст в команде print() без кавычек - НЕЛЬЗЯ</h4>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon (7).png\" src=\"https://ucarecdn.com/95880bc3-4a85-43f5-9322-2174a3d89fdf/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом запуска этого кода будет - <strong>ошибка</strong>, так как язык программирования Python не воспринимает текст без кавычек</p>\r\n\r\n<h2 style=\"text-align:center\">Вызов нескольких объектов</h2>\r\n\r\n<p>В команде <code>print()</code> можно выводить сразу несколько объектов, путём разделения их знаком ,(запятая)</p>\r\n\r\n<p><em>Пример:</em><img alt=\"\" height=\"206\" name=\"carbon (4).png\" src=\"https://ucarecdn.com/628e1bc5-607e-4d80-a203-6b4aef93ebb3/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом будет:</p>\r\n\r\n<p><code>Hello&nbsp; world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p>*Между hello и world! два пробела, так как запятая по умолчанию добавляет один пробел и один пробел находится после Hello.</p>\r\n\r\n<h3 style=\"text-align:center\">Аргументы - что это такое</h3>\r\n\r\n<p><strong>Аргументы</strong> - значения, которые передаются внутрь команды</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 2.png\" src=\"https://ucarecdn.com/45931d8f-1267-437b-b40e-2de4c7187d52/\" width=\"33\" />&nbsp; В строке выше, мы передали два аргумента внутрь команды.</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 3.png\" src=\"https://ucarecdn.com/71eb9391-7fde-46b0-88d5-b854842901f0/\" width=\"33\" />&nbsp;Первый аргумент: &quot;Hello &quot;</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 4.png\" src=\"https://ucarecdn.com/b477f662-f43b-462d-be22-ddf5a1bac33f/\" width=\"33\" />&nbsp;Символ ,(запятая) который соединяет два (или более) аргумента</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 5.png\" src=\"https://ucarecdn.com/a5fa07ce-2907-4406-97df-2d2156d0a6ef/\" width=\"33\" />&nbsp;Второй аргумент: &quot;world!&quot;</p>\r\n\r\n<p><img alt=\"\" height=\"206\" name=\"Group 6.png\" src=\"https://ucarecdn.com/f9a45652-2528-49b2-b916-b37697d72574/\" width=\"2316\" /></p>\r\n\r\n<h2 style=\"text-align:center\">Конкатенация строк</h2>\r\n\r\n<p>Так же можно использовать знак + для того, что бы складывать строки в команде <code>print()</code></p>\r\n\r\n<p><em>Пример:</em></p>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon (6).png\" src=\"https://ucarecdn.com/d1c9584d-49ca-43ea-bef4-d48106c2dfc7/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом будет:</p>\r\n\r\n<p><code>I want to become a junior Python Developer&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center\">Автоматический перенос текста на новую строку</h2>\r\n\r\n<p>В Python команда <code>print()</code> по умолчанию добавляет символ новой строки в конце каждого вызова.&nbsp;Это означает, что каждый раз, когда вы используете&nbsp;<code>print()</code>, текст автоматически переносится на новую строку.<img alt=\"\" height=\"306\" name=\"carbon (8).png\" src=\"https://ucarecdn.com/f8935d79-0a81-4360-9313-1af0ea4f0e22/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом этого кода будет:</p>\r\n\r\n<p><code>Hello world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code></p>\r\n\r\n<p><code>Eidos Academy&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p>То есть каждый отдельный принт будет выводиться с новой строки</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Символ новой строки</strong>: В Python символ новой строки, который обозначается как&nbsp;<code>\\n</code>. Этот символ используется для указания конца строки и начала новой.</p>\r\n\r\n<p><img alt=\"\" height=\"266\" name=\"carbon (9).png\" src=\"https://ucarecdn.com/3dfa09d8-6b18-484b-a8e9-cf3d88a1df70/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом этого кода будет:</p>\r\n\r\n<p><code>Hello&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p><code>&nbsp;world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<h2 style=\"text-align:center\">Комментарии в языке программирования Python</h2>\r\n\r\n<p>Комментарии пишутся двумя способами:</p>\r\n\r\n<p>1.Если комментарии умещается в одну строку используется символ #</p>\r\n\r\n<p><img alt=\"\" height=\"266\" name=\"carbon (10).png\" src=\"https://ucarecdn.com/c42c14c8-f262-4edb-9598-853b317f444c/\" width=\"2316\" /></p>\r\n\r\n<p>2.Если требуется больше чем одна строка, комментарий нужно помещать в тройные кавычки &#39;&#39;&#39; &#39;&#39;&#39;</p>\r\n\r\n<p><img alt=\"\" height=\"856\" name=\"carbon (11).png\" src=\"https://ucarecdn.com/569989bf-b711-423a-9221-60ade1e3919d/\" width=\"2316\" /></p>\r\n\r\n<p><strong>Резюме</strong></p>\r\n\r\n<p>Вы познакомились с первой командой print() и проанализировали примеры применения данной команды. Теперь рекомендую практически закрепить применение команды print() в следующих шагах.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 11,
  "fields": {
    "topic": 11,
    "type": "text",
    "title": "Аргументы команды print()",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center\">Команда print()</h2>\r\n\r\n<h2>Цель урока:&nbsp;</h2>\r\n\r\n<p>Научиться использовать команду <code>print()</code> для вывода информации на экран, понять как она работает и закрепить информацию на практике.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center\">Синтаксис команды print()</h2>\r\n\r\n<p>Для того, что бы вывести информацию на экран на языке программирования Python - используется команда <code>print()</code>, а внутри команды используются кавычки, которые обрамляют информацию, которую необходимо вывести на экран, возможно использование двух типов кавычек: одинарных(&#39; &#39;) и двойных(&quot; &quot;)</p>\r\n\r\n<p><em>Пример:</em></p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon (5).png\" src=\"https://ucarecdn.com/4fc05d81-04d8-4032-9108-2609cd313d2f/\" width=\"2316\" /></p>\r\n\r\n<p>Результат этих двух команд будет <em>одинаковым</em></p>\r\n\r\n<p><code>Hello world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code></p>\r\n\r\n<p>*Желательно сразу ввести в привычку использовать только один тип кавычек при написания кода, использование двух разных типов кавычек в одном проекте ухудшает его читаемость и может привести к ошибкам.&nbsp;</p>\r\n\r\n<h4 style=\"text-align:center\">Вывести текст в команде print() без кавычек - НЕЛЬЗЯ</h4>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon (7).png\" src=\"https://ucarecdn.com/95880bc3-4a85-43f5-9322-2174a3d89fdf/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом запуска этого кода будет - <strong>ошибка</strong>, так как язык программирования Python не воспринимает текст без кавычек</p>\r\n\r\n<h2 style=\"text-align:center\">Вызов нескольких объектов</h2>\r\n\r\n<p>В команде <code>print()</code> можно выводить сразу несколько объектов, путём разделения их знаком ,(запятая)</p>\r\n\r\n<p><em>Пример:</em><img alt=\"\" height=\"206\" name=\"carbon (4).png\" src=\"https://ucarecdn.com/628e1bc5-607e-4d80-a203-6b4aef93ebb3/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом будет:</p>\r\n\r\n<p><code>Hello&nbsp; world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p>*Между hello и world! два пробела, так как запятая по умолчанию добавляет один пробел и один пробел находится после Hello.</p>\r\n\r\n<h3 style=\"text-align:center\">Аргументы - что это такое</h3>\r\n\r\n<p><strong>Аргументы</strong> - значения, которые передаются внутрь команды</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 2.png\" src=\"https://ucarecdn.com/45931d8f-1267-437b-b40e-2de4c7187d52/\" width=\"33\" />&nbsp; В строке выше, мы передали два аргумента внутрь команды.</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 3.png\" src=\"https://ucarecdn.com/71eb9391-7fde-46b0-88d5-b854842901f0/\" width=\"33\" />&nbsp;Первый аргумент: &quot;Hello &quot;</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 4.png\" src=\"https://ucarecdn.com/b477f662-f43b-462d-be22-ddf5a1bac33f/\" width=\"33\" />&nbsp;Символ ,(запятая) который соединяет два (или более) аргумента</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 5.png\" src=\"https://ucarecdn.com/a5fa07ce-2907-4406-97df-2d2156d0a6ef/\" width=\"33\" />&nbsp;Второй аргумент: &quot;world!&quot;</p>\r\n\r\n<p><img alt=\"\" height=\"206\" name=\"Group 6.png\" src=\"https://ucarecdn.com/f9a45652-2528-49b2-b916-b37697d72574/\" width=\"2316\" /></p>\r\n\r\n<h2 style=\"text-align:center\">Конкатенация строк</h2>\r\n\r\n<p>Так же можно использовать знак + для того, что бы складывать строки в команде <code>print()</code></p>\r\n\r\n<p><em>Пример:</em></p>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon (6).png\" src=\"https://ucarecdn.com/d1c9584d-49ca-43ea-bef4-d48106c2dfc7/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом будет:</p>\r\n\r\n<p><code>I want to become a junior Python Developer&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center\">Автоматический перенос текста на новую строку</h2>\r\n\r\n<p>В Python команда <code>print()</code> по умолчанию добавляет символ новой строки в конце каждого вызова.&nbsp;Это означает, что каждый раз, когда вы используете&nbsp;<code>print()</code>, текст автоматически переносится на новую строку.<img alt=\"\" height=\"306\" name=\"carbon (8).png\" src=\"https://ucarecdn.com/f8935d79-0a81-4360-9313-1af0ea4f0e22/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом этого кода будет:</p>\r\n\r\n<p><code>Hello world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</code></p>\r\n\r\n<p><code>Eidos Academy&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p>То есть каждый отдельный принт будет выводиться с новой строки</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Символ новой строки</strong>: В Python символ новой строки, который обозначается как&nbsp;<code>\\n</code>. Этот символ используется для указания конца строки и начала новой.</p>\r\n\r\n<p><img alt=\"\" height=\"266\" name=\"carbon (9).png\" src=\"https://ucarecdn.com/3dfa09d8-6b18-484b-a8e9-cf3d88a1df70/\" width=\"2316\" /></p>\r\n\r\n<p>Результатом этого кода будет:</p>\r\n\r\n<p><code>Hello&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<p><code>&nbsp;world!&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</code></p>\r\n\r\n<h2 style=\"text-align:center\">Комментарии в языке программирования Python</h2>\r\n\r\n<p>Комментарии пишутся двумя способами:</p>\r\n\r\n<p>1.Если комментарии умещается в одну строку используется символ #</p>\r\n\r\n<p><img alt=\"\" height=\"266\" name=\"carbon (10).png\" src=\"https://ucarecdn.com/c42c14c8-f262-4edb-9598-853b317f444c/\" width=\"2316\" /></p>\r\n\r\n<p>2.Если требуется больше чем одна строка, комментарий нужно помещать в тройные кавычки &#39;&#39;&#39; &#39;&#39;&#39;</p>\r\n\r\n<p><img alt=\"\" height=\"856\" name=\"carbon (11).png\" src=\"https://ucarecdn.com/569989bf-b711-423a-9221-60ade1e3919d/\" width=\"2316\" /></p>\r\n\r\n<p><strong>Резюме</strong></p>\r\n\r\n<p>Вы познакомились с первой командой print() и проанализировали примеры применения данной команды. Теперь рекомендую практически закрепить применение команды print() в следующих шагах.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 12,
  "fields": {
    "topic": 12,
    "type": "text",
    "title": "Основные типы данных в Python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Основные типы данных в Python&nbsp;</h1>\r\n\r\n<p><strong>Цель урока:</strong></p>\r\n\r\n<p>Познакомиться с основными типами данных в Python. Понимание этих основ является фундаментальным для написания кода и продолжения обучения.</p>\r\n\r\n<h2><strong>Вспоминаем:</strong></h2>\r\n\r\n<p>Начнем с того, что мы уже работали с вами с одним из типов данных - string. Это тип данных строки, который может обрамляться в одиночные кавычки либо же в двойные. Таким образом python распознает строку и распознает действия, которые он может с ней совершить, ведь, нельзя же отнять одну строку от другой, верно? За то можно их приплюсовать, то есть, соединить друг с другом как мы уже и делали. У строк есть интересные методы, о которых мы поговорим на второй ступени курса, после того, как введем вас во все основы языка программирования python.&nbsp;</p>\r\n\r\n<p>Пока что нужно запомнить, что в зависимости от типов данных, python может выполнять различные операции с ними. Сейчас мы поговорим о некоторых из них</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Проверка типа данных</h2>\r\n\r\n<p>Для проверки типа данных в Python используется функция <code>type()</code>&nbsp;, которая возвращает тип объекта присвоеного к переменной.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" height=\"600\" name=\"carbon (27).png\" src=\"https://ucarecdn.com/6bca7254-728a-42fb-8468-2b55614a5851/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">1. Числовые типы данных</h2>\r\n\r\n<p>В языке программирования Python существуют типы данных, олицетворяющие числа. Причем за различные числа отвечают различные типы данных.</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>1.1 Целые числа | Тип данных - (<code>int</code>)</strong></h2>\r\n\r\n<p>Целые числы представляют собой числа без дробной части.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon (19).png\" src=\"https://ucarecdn.com/53ab3856-c06e-4c57-a018-468244eb7601/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Как можно увидеть, разница между строковым типом и числовым заключается в отсутствии кавычек.</h2>\r\n\r\n<p>Это дает нам возможность увидеть некоторые особенности языка python. Начнем с того, что в математике над числами можно производить различные математические операции. В языке python так делать тоже можно</p>\r\n\r\n<p><img alt=\"\" height=\"382\" name=\"carbon (30).png\" src=\"https://ucarecdn.com/23ca7fbb-1f54-4c3e-a345-2cfb121fe6d3/\" width=\"2560\"></p>\r\n\r\n<p>Выбор типов данных в программе - очень важный момент, так как программа может сработать неправильно в зависимости от случая.</p>\r\n\r\n<p><img alt=\"\" height=\"382\" name=\"carbon (32).png\" src=\"https://ucarecdn.com/adfc332e-a468-43be-bb32-4260916f5aa1/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4 style=\"text-align:center;\">Арифметических операций несколько больше в языке программирования Python, однако сейчас мы сконцентрируем внимание на четырех из них и посмотрим на некоторые аспекты арифметических действий.</h4>\r\n\r\n<p><img alt=\"\" height=\"552\" name=\"carbon (31).png\" src=\"https://ucarecdn.com/8a717693-4c33-4b3a-849f-5f07f2f5dbcb/\" width=\"2560\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Преобразование строки в число и наоборот</h2>\r\n\r\n<p>На практике постоянно случается, что нам нужно уметь преобразовывать введенное число от пользователя, которое, как мы помним, с помощью input() превращается в строку, в число. Рассмотрим ситуацию:<img alt=\"\" height=\"340\" name=\"carbon (33).png\" src=\"https://ucarecdn.com/47014389-5a85-41b9-8387-452af9679999/\" width=\"2560\"></p>\r\n\r\n<h3 style=\"text-align:center;\">Как решить такую задачу? Ведь если мы попробуем написать 2 числа: допустим, 12 и 15, то, так как они строки, программа выведет следующее: Сумма двух чисел - 1215 лет</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Так как input() превращает все в строку, мы не можем правильно сложить 2 числа, нам нужно сложить именно числа и получить нормальный результат, поэтому и существует функция int(). Эта функция превращает в числовой тип данных все, что может быть в него превращено. То есть если сделать int('15') программа превратит ее в число 15 которое уже можно сложить:</p>\r\n\r\n<p><img alt=\"\" height=\"424\" name=\"carbon (34).png\" src=\"https://ucarecdn.com/d72fbcf7-a532-44a4-9b6c-bb2be5bb83b5/\" width=\"2560\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Таким образом мы смогли сделать из двух строк - 2 числа.</h2>\r\n\r\n<p>Теперь же они смогут сложиться, однако, тут выходит другая проблема. Сначала мы приняли 2 строки и превратили их в числа, а затем результат их сложения пытаемся соединить с строкой в функции <code>print()</code>, хотя как мы помним, строки с числами складывать нельзя ведь результат сложения двух чисел тоже число. следовательно, мы можем превратить число обратно в строку с помощью функции <code>str()</code> от слова string.</p>\r\n\r\n<p>Для этого: введем новую переменную для хранения результата сложения</p>\r\n\r\n<p><img alt=\"\" height=\"35\" name=\"image.png\" src=\"https://ucarecdn.com/8848dac3-5135-4c80-a497-869c3ee52317/\" width=\"258\">&nbsp;и превратим ее в строку на мгновение внутри <code>print()</code> для того, чтобы ее легко можно было соединить с другой строкой</p>\r\n\r\n<p><img alt=\"\" height=\"510\" name=\"carbon (35).png\" src=\"https://ucarecdn.com/149c741c-c815-4b16-8dae-84431d29b76e/\" width=\"2560\"></p>\r\n\r\n<h4 style=\"text-align:center;\">На заметку! в данном случае функция str(result) меняет тип данных переменной result только на время выполнения команды <code>print()</code>, после этого это будет опять числовой тип данных</h4>\r\n\r\n<p>Если мы хотим навсегда поменять тип данных:&nbsp;<img alt=\"\" height=\"27\" name=\"image.png\" src=\"https://ucarecdn.com/fd0f1f3c-b616-473f-8a42-f7c02d0669ab/\" width=\"259\"></p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>1.2 Числа с плавающей точкой(float)</strong></h2>\r\n\r\n<p>Числа с плавающей точкой точкой представляют собой числа с дробной частью&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"182\" name=\"Group 3.png\" src=\"https://ucarecdn.com/cb97e51f-afbe-4019-9aba-b0461f56f000/\" width=\"316\"></p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon (21).png\" src=\"https://ucarecdn.com/d7a1429f-023a-4ef2-a6d5-a015272ada6d/\" width=\"2316\"></p>\r\n\r\n<p>Строку в числа с плавающей точкой также можно преобразовать с помощью функции <code>float()</code> для строки, как правило</p>\r\n\r\n<p>Давайте решим задачу, которая принимает число, умножает его на 2 и выводит результат:<img alt=\"\" height=\"298\" name=\"carbon (38).png\" src=\"https://ucarecdn.com/94a9cad6-5801-491b-8e30-02c7a9e24f5b/\" width=\"2560\"></p>\r\n\r\n<p style=\"text-align:center;\">Также стоит отметить, что при преобразовании числа типа float() в число типа int(), округление не работает по привычным правилам математики. В таком случае дробная часть просто отбрасывается. То есть:</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"298\" name=\"carbon (39).png\" src=\"https://ucarecdn.com/6c03523f-129e-488c-8782-c45b1075ede1/\" width=\"2560\"></p>\r\n\r\n<h2 style=\"text-align:center;\">2.Строки(<code>str</code>)</h2>\r\n\r\n<p>Строки представляют собой последовательность символов, заключенную в одинарные, дворные или тройные кавычки.</p>\r\n\r\n<p>Пример:</p>\r\n\r\n<p><img alt=\"\" height=\"748\" name=\"carbon (23).png\" src=\"https://ucarecdn.com/4369e075-636c-410d-a8d7-63e33426f155/\" width=\"2316\"></p>\r\n\r\n<p>Так же вам следует знать, что будет если применять математические операции к переменам с типом данных <code>str</code>&nbsp;</p>\r\n\r\n<p><strong>- Конкатенация(сложение) строк:</strong></p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (29).png\" src=\"https://ucarecdn.com/78b8a972-6326-4ec7-81ff-4846b5cb9526/\" width=\"2316\"></p>\r\n\r\n<p><strong>-Повторение(Умножение) строки:</strong></p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon (30).png\" src=\"https://ucarecdn.com/02c0acef-c73d-4b61-9ef0-417ed79a7a6e/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">3.Логический тип(<code>bool</code>)</h2>\r\n\r\n<p>Логический тип данных, который принимает только два значения. <code>True</code>(истина) и <code>False</code>(ложь)</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (24).png\" src=\"https://ucarecdn.com/7a238634-3d0c-4f66-91f1-e8de505db24a/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"600\" name=\"carbon (25).png\" src=\"https://ucarecdn.com/caac9b59-1a05-4b8e-af3d-74dbf69a5e65/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">4.NoneType</h2>\r\n\r\n<p><code>None</code> - это специальный тип, представляющий \"пустое значение\" или отсутствие значения. Данный тип данных используется когда необходимо показать, что переменная ещё не имеет значения:</p>\r\n\r\n<p>&nbsp;&nbsp;<img alt=\"\" height=\"306\" name=\"carbon (26).png\" src=\"https://ucarecdn.com/c2c31bdb-3ec8-49ba-8e7b-2e7053ac4e63/\" width=\"2316\"></p>\r\n\r\n<p>Так же следует учесть что пустая строка не одно и тоже с переменной со значение None, пустая строка относится к&nbsp;строчному типу данных</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (28).png\" src=\"https://ucarecdn.com/610f0432-fde5-465f-83b3-9e0f09ce812d/\" width=\"2316\"></p>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>Вы познакомились с основными типами данных, теперь предлагаю закрепить тему на практике в следующих шагах.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 13,
  "fields": {
    "topic": 13,
    "type": "text",
    "title": "Стандарт оформления кода PEP 8 и осмысленные названия переменных",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Стандарт оформления кода PEP 8 и осмысленные названия переменных</h1>\r\n\r\n<p><strong>Цель урока:</strong></p>\r\n\r\n<p>Узнать, что такое <code>PEP8</code> и познакомиться с основными рекомендациями данного стиля оформления кода. Так же узнать как правильно называть переменные при написании кода.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><code>PEP 8</code> (Python Enhancement Proposal 8) — это стиль оформления кода Python, который помогает писать понятный и поддерживаемый код. Соблюдение <code>PEP 8</code> делает ваш код единообразным и облегчает его чтение как для вас, так и для других разработчиков. В этом уроке мы рассмотрим основные рекомендации <code>PEP 8</code> и разберём, как правильно выбирать осмысленные названия переменных.</p>\r\n\r\n<h2 style=\"text-align:center;\">Длина строки</h2>\r\n\r\n<p>Максимальная длина строки по <code>PEP8</code> должна составлять <code>79</code> символов. Если строка длинная, её можно разбить с помощью обратного слэша <code>\\</code> или заключить выражение в скобки:</p>\r\n\r\n<p><img alt=\"\" height=\"340\" name=\"carbon - 2025-01-12T175302.519.png\" src=\"https://ucarecdn.com/64c07eaa-c117-4383-94dc-43c455150898/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon - 2025-01-12T173107.058.png\" src=\"https://ucarecdn.com/86b18fea-e089-4c16-bb25-e797fa89416d/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Пробелы вокруг операторов и запятых</h2>\r\n\r\n<p>Добавляйте пробелы вокруг операторов присваивания и сравнения.</p>\r\n\r\n<p><img alt=\"\" height=\"488\" name=\"carbon - 2025-01-12T175722.442.png\" src=\"https://ucarecdn.com/95b7f875-14cc-4168-bd13-d7a38e7ef833/\" width=\"2316\"></p>\r\n\r\n<p>Не ставьте пробелы перед запятыми и скобками.</p>\r\n\r\n<p><img alt=\"\" height=\"266\" name=\"carbon - 2025-01-12T180407.053.png\" src=\"https://ucarecdn.com/a4eed279-f734-4b3f-8ca5-3b8602ab188e/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Как PEP 8 рекомендует оформлять многострочные комментарии?</h2>\r\n\r\n<p><code>PEP 8</code> рекомендует оформлять многострочные комментарии в <code>Python </code>следующим образом:</p>\r\n\r\n<p><strong>Использование тройных кавычек</strong>: Многострочные комментарии можно создавать, заключая текст в тройные кавычки (как одинарные, так и двойные). Это позволяет комментировать несколько строк одновременно. Однако важно помнить, что такие строки на самом деле являются строковыми литералами, которые не присваиваются переменной, и <code>Python </code>игнорирует их, если они не используются.</p>\r\n\r\n<p><img alt=\"\" height=\"528\" name=\"carbon - 2025-01-13T132913.813.png\" src=\"https://ucarecdn.com/0441c0ed-cf9a-4e05-bc79-178ea56da456/\" width=\"2316\"></p>\r\n\r\n<p><strong>Однострочные комментарии</strong>: Альтернативный способ оформления многострочных комментариев — это использование нескольких однострочных комментариев подряд, каждый из которых начинается с символа&nbsp;<code>#</code>. Это может быть полезно для документирования небольших блоков кода. Пример:</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon - 2025-01-13T133139.934.png\" src=\"https://ucarecdn.com/0ffde91a-74e3-454a-83f6-eee604658682/\" width=\"2316\"></p>\r\n\r\n<p><strong>Ограничение длины строк</strong>: <code>PEP 8</code> рекомендует ограничивать длину строк комментариев до <code>72</code> символов. Если комментарий превышает эту длину, его следует разбить на несколько строк.</p>\r\n\r\n<p><strong>Структура и форматирование</strong>: Комментарии должны быть написаны полными предложениями и начинаться с заглавной буквы. Также рекомендуется использовать пробел после символа&nbsp;<code>#</code>&nbsp;для улучшения читаемости.</p>\r\n\r\n<p>Эти рекомендации помогают сделать код более понятным и поддерживаемым как для других разработчиков, так и для вас самих в будущем.</p>\r\n\r\n<p style=\"text-align:center;\">&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Осмысленные названия переменных</h2>\r\n\r\n<p>Важно правильно выбирать названия для переменных, ведь это важная часть написания понятного кода. Хорошие названия переменных должны отражать их назначение и быть понятными без дополнительных комментариев.</p>\r\n\r\n<h3>Общие рекомендации по выбору названий&nbsp;</h3>\r\n\r\n<p>Используйте понятные и краткие названия, избегайте однобуквенных названий.</p>\r\n\r\n<p><img alt=\"\" height=\"708\" name=\"carbon - 2025-01-12T181429.035.png\" src=\"https://ucarecdn.com/5e33099c-36b4-436f-bde1-0d66f06fe1da/\" width=\"2316\"></p>\r\n\r\n<p>Используйте <code>snake_case</code> для названий переменных. В <code>Python</code> принято использовать стиль <code>snake_case</code>, где слова разделяются символом подчёркивания <code>_</code>.</p>\r\n\r\n<p><code>snake_case</code> — это стиль именования, при котором составные слова разделяются символом нижнего подчеркивания и пишутся в нижнем регистре. Например, переменная может быть названа как&nbsp;<code>my_variable_name</code>. Этот стиль получил свое название благодаря тому, что символ подчеркивания выглядит как змея(от англ.яз - snake), ползущая по строке.</p>\r\n\r\n<p><img alt=\"\" height=\"634\" name=\"carbon - 2025-01-12T182939.144.png\" src=\"https://ucarecdn.com/9f0c3e06-d662-4e70-8f2f-7d8e60c6d7e8/\" width=\"2316\"></p>\r\n\r\n<p>Не используйте зарезервированные слова Python в качестве переменных.</p>\r\n\r\n<p><img alt=\"\" height=\"562\" name=\"carbon - 2025-01-12T183250.194.png\" src=\"https://ucarecdn.com/cb3e378e-0572-4b08-9bd3-0a1c0f665140/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3 style=\"text-align:center;\">Примеры хороших и плохих названий переменных</h3>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Плохое название</th>\r\n\t\t\t<th>Хорошее название</th>\r\n\t\t\t<th>Пояснение</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>a</td>\r\n\t\t\t<td>age</td>\r\n\t\t\t<td>Отражает смысл переменной</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>s</td>\r\n\t\t\t<td>student_name</td>\r\n\t\t\t<td>Ясно, что это имя студента</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>t</td>\r\n\t\t\t<td>temperature</td>\r\n\t\t\t<td>Понятно, что это температура</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>n</td>\r\n\t\t\t<td>num_of_items</td>\r\n\t\t\t<td>Показывает, что это количество</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>Вы познакомились с основами PEP8 и правилами названия переменных, теперь рекомендую закрепить материал, отвечая на вопросы в следующих шагах.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 14,
  "fields": {
    "topic": 14,
    "type": "text",
    "title": "Арифметические операции",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Арифметические операции</h1>\r\n\r\n<p><strong>Цель урока:</strong></p>\r\n\r\n<p>Целью данного урока является ознакомление с основными арифметическими операциями в языке Python: сложение, вычитание, умножение, деление, целочисленное деление, остаток от деления и возведение в степень. Мы рассмотрим синтаксис этих операций, примеры их использования, а также особенности работы с целыми числами и числами с плавающей точкой. Понимание этих операций позволит вам эффективно выполнять математические вычисления в процессе работы с программами на Python.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В языке программирования Python, переменные могут участвовать в различных операциях. В этом уроке мы рассмотрим арифметические операции, которые позволяют выполнять основные математические действия:</p>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>&nbsp;Операция&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</th>\r\n\t\t\t<th>Оператор&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</th>\r\n\t\t\t<th>Пример&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</th>\r\n\t\t\t<th>Результат&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>&nbsp;Сложение</td>\r\n\t\t\t<td><code>+</code></td>\r\n\t\t\t<td><code>a + b</code></td>\r\n\t\t\t<td>Сумма <code>a</code> и&nbsp;<code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Вычитание</td>\r\n\t\t\t<td><code>-</code></td>\r\n\t\t\t<td><code>a - b</code></td>\r\n\t\t\t<td>Разность <code>a</code> и <code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Умножение</td>\r\n\t\t\t<td><code>*</code></td>\r\n\t\t\t<td><code>a * b</code></td>\r\n\t\t\t<td>Произведение <code>a</code> и <code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Деление</td>\r\n\t\t\t<td><code>/</code></td>\r\n\t\t\t<td><code>a / b</code></td>\r\n\t\t\t<td>Частное <code>a</code> и <code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>\r\n\t\t\t<p>Целочисленное деление</p>\r\n\t\t\t</td>\r\n\t\t\t<td><code>//</code></td>\r\n\t\t\t<td><code>a // b</code></td>\r\n\t\t\t<td>Целая часть от деления <code>a</code> на <code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Остаток от деления</td>\r\n\t\t\t<td><code>%</code></td>\r\n\t\t\t<td><code>a % b</code></td>\r\n\t\t\t<td>Остаток от деления <code>a</code> на <code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Возведения в степень</td>\r\n\t\t\t<td><code>**</code></td>\r\n\t\t\t<td><code>a ** b</code></td>\r\n\t\t\t<td><code>a</code> в степени <code>b</code></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;&nbsp;</p>\r\n\r\n<p>Разберем каждый из них по примеру и посмотрим некоторые аспекты:</p>\r\n\r\n<h3><strong>Пример использования</strong></h3>\r\n\r\n<p><img alt=\"\" height=\"822\" name=\"carbon (31).png\" src=\"https://ucarecdn.com/92638125-0191-4f68-b145-dcee8f1ea816/\" width=\"2316\"></p>\r\n\r\n<p>Скорее всего, уже по этому коду все понятно, однако давайте разберем каждый тип операции и поймем, что к чему.</p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3>1. Сложение (<code>+</code>)</h3>\r\n\r\n<p>Сложение — это операция, которая складывает два числа. Если оба числа целые (<code>int</code>), то результат также будет целым числом. Если хотя бы одно из чисел — с плавающей точкой (<code>float</code>), результат будет числом с плавающей точкой.</p>\r\n\r\n<p><img alt=\"\" height=\"382\" name=\"carbon (40).png\" src=\"https://ucarecdn.com/6dd4a8bc-d31e-4b38-ae3b-1f05172d3fda/\" width=\"2560\"></p>\r\n\r\n<p><em>пример с float</em></p>\r\n\r\n<p><img alt=\"\" height=\"424\" name=\"carbon (41).png\" src=\"https://ucarecdn.com/46cb830f-d52b-4fa6-9b68-c401548980fa/\" width=\"2560\"></p>\r\n\r\n<h3>2. Вычитание (<code>-</code>)</h3>\r\n\r\n<p>Операция вычитания вычитает одно число из другого. Подобно сложению, если хотя бы одно число с плавающей точкой, результат будет с плавающей точкой.</p>\r\n\r\n<p><img alt=\"\" height=\"468\" name=\"carbon (42).png\" src=\"https://ucarecdn.com/6e3b9c3f-15db-4820-b4f9-5cd732ef0499/\" width=\"2560\"></p>\r\n\r\n<h3>3. Умножение (<code>*</code>)</h3>\r\n\r\n<p>Умножение — это операция, которая умножает два числа. Если одно из чисел с плавающей точкой, результат будет с плавающей точкой.</p>\r\n\r\n<p><img alt=\"\" height=\"382\" name=\"carbon (44).png\" src=\"https://ucarecdn.com/2b08bb37-8fd8-434a-bbcb-41df685f0a34/\" width=\"2560\"><img alt=\"\" height=\"382\" name=\"carbon (45).png\" src=\"https://ucarecdn.com/c27181ce-efd6-4b24-ba45-42324270102e/\" width=\"2560\"></p>\r\n\r\n<h3>4. Деление (<code>/</code>)</h3>\r\n\r\n<p>Операция деления в Python всегда возвращает результат с плавающей точкой, даже если оба операнда — целые числа и делятся нацело без остатка.</p>\r\n\r\n<p><img alt=\"\" height=\"382\" name=\"carbon (46).png\" src=\"https://ucarecdn.com/7da647aa-eb59-4626-9e7b-9aae02b01cbc/\" width=\"2560\"></p>\r\n\r\n<p><strong>Важно:</strong> Деление всегда возвращает число с плавающей точкой, даже если результат — целое число.</p>\r\n\r\n<h3>5. Целочисленное деление (<code>//</code>)</h3>\r\n\r\n<p>Целочисленное деление выполняет деление, но результат округляется до целого числа (вниз).Иными словами: сколько раз одно число помещается в другое.<img alt=\"\" height=\"424\" name=\"carbon (47).png\" src=\"https://ucarecdn.com/6a87283c-23fe-4903-a6f5-609afe26aef4/\" width=\"2560\"></p>\r\n\r\n<h3>6. Остаток от деления (<code>%</code>)</h3>\r\n\r\n<p>Операция остатка от деления (или модуль) возвращает остаток, который остаётся после целочисленного деления.<img alt=\"\" height=\"382\" name=\"carbon (48).png\" src=\"https://ucarecdn.com/73a41607-12e7-4eb2-894e-0ccc53a74dda/\" width=\"2560\"></p>\r\n\r\n<h3>7. Возведение в степень (<code>**</code>)</h3>\r\n\r\n<p>Операция возведения в степень позволяет возводить число в степень. &lt;число&gt; ** &lt;степень числа&gt;.</p>\r\n\r\n<p><img alt=\"\" height=\"382\" name=\"carbon (49).png\" src=\"https://ucarecdn.com/49806bad-ee01-4382-b044-fc7b4a01143d/\" width=\"2560\"></p>\r\n\r\n<p>В основном пока ничего больше и не нужно.</p>\r\n\r\n<p>В языке python работают такие же приоритеты операций, как и в математике.<img alt=\"\" height=\"254\" name=\"carbon (51).png\" src=\"https://ucarecdn.com/5b055b00-699a-4aa1-a6d5-b54305dde1f1/\" width=\"2560\">Далее мы порешаем практические задачи для полного закрепления темы от лекгих к немного более сложным не затрагивая пока приоритеты выполнения операций. Это тема следующего урока.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>Таким образом, арифметические операции в Python позволяют легко выполнять базовые математические вычисления. Мы рассмотрели основные операции: сложение, вычитание, умножение, деление, целочисленное деление, остаток от деления и возведение в степень. Эти операции станут основой для решения более сложных задач и работы с данными. В следующем уроке мы перейдем к приоритетам выполнения операций, чтобы понять, как Python обрабатывает несколько операций в одном выражении. Теперь рекомендую закрепить пройденный материал на практических заданиях в следующих шагах.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 15,
  "fields": {
    "topic": 15,
    "type": "text",
    "title": "Извлечение разрядов числа с помощью деления и остатка",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Извлечение разрядов числа с помощью деления и остатка</h1>\r\n\r\n<h2>Цель урока:</h2>\r\n\r\n<p>Целью данного урока является изучение метода извлечения разрядов числа с помощью операций деления и остатка в Python. Мы разберём, как можно с помощью операций целочисленного деления (//) и взятия остатка (%) извлекать единицы, десятки, сотни и тысячи числа. Этот подход часто используется при обработке чисел и решении задач, связанных с анализом их разрядной структуры.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Метод заключается в использовании операций деления <code>/</code> и получения остатка <code>%</code>.</p>\r\n\r\n<p>Извлечение разрядов числа - это распространённая задача в программировании. В <code>Python</code> можно использовать эту задачу с помощью арифметических операций, таких как деление и взятие остатка. В этом уроке мы разберём как извлекать единицы, десятки, сотни и тысячи числа.</p>\r\n\r\n<p>Рассмотрим число <code>num = 1234</code> и извлечём его разряды:</p>\r\n\r\n<p><img alt=\"\" height=\"600\" name=\"carbon - 2025-01-12T155208.266.png\" src=\"https://ucarecdn.com/a0d43055-8240-468a-8eba-4be9a4e0907f/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 2.png\" src=\"https://ucarecdn.com/2fb0f019-8925-477a-9e8e-3b36c675d8d9/\" width=\"33\"><code>num % 10</code> возвращает остаток от деления числа на <code>10</code>, т.е. последнюю цифру - единицы.&nbsp; <code>1234 / 10 = 123</code>, остаток <code>4</code>. Операция <code>%</code> извлекает остаток от делению.</p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 3.png\" src=\"https://ucarecdn.com/04654e6a-2d9c-4588-81e4-b04664764a99/\" width=\"33\"><code>(num // 10) % 10</code> сначала удаляет последнюю цифру с помощью целочисленного деления на <code>10</code>, а затем берёт остаток от деления на <code>10</code>, что бы получить десятки. <code>1234 // 10 = 123</code>, <code>123 % 10 = 3</code></p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 4.png\" src=\"https://ucarecdn.com/19017982-2d13-4474-a12a-62d95bdd979c/\" width=\"33\">&nbsp;<code>(num // 100) % 10</code> первое действие удаляет последнюю и предпоследнюю цифру <code>1234 // 100 = 12</code>, <code>12 % 10 = 2</code></p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 5.png\" src=\"https://ucarecdn.com/e2b4d87b-456a-46dc-b4a9-731120442a29/\" width=\"33\"><code>(num // 1000) % 10</code> первое действие удаляет три последние цифры, <code>1234 // 1000 = 1</code>, <code>1 % 10 = 1</code>. Последним действием мы находим количество тысяч, в случае если число пятизначное или больше.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Так же в языке программирования <code>Python</code> существуют и другие, более интересные методы нахождения разряда числа, о них вы сможете узнать во время дальнейшего прохождения курса.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>Таким образом, извлечение разрядов числа с помощью операций деления и остатка позволяет эффективно работать с каждым отдельным разрядом числа в Python. Мы рассмотрели, как извлечь единицы, десятки, сотни и тысячи числа, используя простые арифметические операции. Этот метод полезен при решении задач, связанных с анализом и обработкой чисел, и является важной частью работы с числами в программировании. Теперь рекомендую&nbsp; закрепить пройденный материал в следующих шагах.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 16,
  "fields": {
    "topic": 16,
    "type": "text",
    "title": "Операции сравнения",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2><strong>Цель урока:</strong></h2>\r\n\r\n<p>Целью данного урока является изучение операторов сравнения в Python, таких как равно (==), не равно (!=), больше (&gt;), меньше (&lt;), больше или равно (&gt;=), и меньше или равно (&lt;=). Мы разберем их применение для числовых типов данных и строк, а также особенности лексикографического порядка при сравнении строк. Понимание этих операторов является важной основой для работы с условиями и принятием решений в программировании.</p>\r\n\r\n<h1 style=\"text-align:center;\">Операции сравнения</h1>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Операция</th>\r\n\t\t\t<th>Оператор</th>\r\n\t\t\t<th>Пример</th>\r\n\t\t\t<th>Результат</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Равно&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>\r\n\t\t\t<td><code>==</code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</td>\r\n\t\t\t<td><code>a == b</code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</td>\r\n\t\t\t<td><code>True</code>, если <code>a</code> равно <code>b</code>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Не равно</td>\r\n\t\t\t<td><code>!=</code></td>\r\n\t\t\t<td><code>a != b</code></td>\r\n\t\t\t<td><code>True</code>, если <code>a</code> не равно <code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Больше</td>\r\n\t\t\t<td><code>&gt;</code></td>\r\n\t\t\t<td><code>a &gt; b</code></td>\r\n\t\t\t<td><code>True</code>, если <code>a</code> больше <code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Меньше</td>\r\n\t\t\t<td><code>&lt;</code></td>\r\n\t\t\t<td><code>a &lt; b</code></td>\r\n\t\t\t<td><code>True</code>, если <code>a</code> меньше <code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Больше или равно</td>\r\n\t\t\t<td><code>&gt;=</code></td>\r\n\t\t\t<td><code>a &gt;= b</code></td>\r\n\t\t\t<td><code>True</code>, если <code>a</code> больше или равно <code>b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Меньше или равно</td>\r\n\t\t\t<td><code>&lt;=&nbsp;</code></td>\r\n\t\t\t<td><code>a &lt;= b</code></td>\r\n\t\t\t<td><code>True</code>, если <code>a</code> меньше или равно <code>b</code></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3 style=\"text-align:center;\">Пример использования</h3>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"227\" name=\"Снимок экрана 2025-01-11 165606.png\" src=\"https://ucarecdn.com/ab8a2fe9-97a9-4af6-8948-6f7c542e2bc4/\" width=\"588\"></p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>Равно <code>==</code></strong>&nbsp;</h2>\r\n\r\n<p>Оператор <code>==</code> используется когда необходимо проверить схожесть двух элементов. Если два элемента идентичны, результатом будет булево значение <code>True</code>, если же нет - <code>False</code>&nbsp;.</p>\r\n\r\n<p>*Следует не путать с операцией присваивания <code>=</code>, так как она используется для присваивания значений для переменных</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (41).png\" src=\"https://ucarecdn.com/44fa6663-2644-45f9-a64e-d699e64d3074/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (34).png\" src=\"https://ucarecdn.com/019a0bc7-a997-4fcf-a9a2-39a2eaccc4d3/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (35).png\" src=\"https://ucarecdn.com/09cf9cde-92d6-4efe-a935-cc63582f26cd/\" width=\"2316\"></p>\r\n\r\n<p>Так в языке программирования <code>Python</code> операторы сравнения можно использовать сравнивая сразу три значения и больше, <strong>Например:</strong></p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (52).png\" src=\"https://ucarecdn.com/885be155-51c0-454b-a209-7e0ab90358e5/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (53).png\" src=\"https://ucarecdn.com/62503086-f3d2-472d-9054-457a77ec1fdf/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Не равно !=</h2>\r\n\r\n<p>Оператор <code>!=</code> используется когда необходимо проверить если элементы не равны. Результатом так же будет булево значение.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (36).png\" src=\"https://ucarecdn.com/ca03c6db-6698-4e59-afbc-fe16508012ae/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (39).png\" src=\"https://ucarecdn.com/e9727272-7b26-4612-bdfe-f655eb8c98cb/\" width=\"2316\"><img alt=\"\" height=\"232\" name=\"carbon (38).png\" src=\"https://ucarecdn.com/aef16cee-e3be-48f9-a34c-5b163ca39825/\" width=\"2316\"></p>\r\n\r\n<p>Так же можно использовать тройное сравнение:</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (55).png\" src=\"https://ucarecdn.com/72225652-d01e-431f-80c3-c1fe66a3b6e2/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Больше <code>&gt;</code></h2>\r\n\r\n<p>Оператор <code>&gt;</code>(больше) используется для того, что бы проверить какой элемент больше. Результатом так же будет булево значение, как и для всех операций сравнений.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (40).png\" src=\"https://ucarecdn.com/2e41ae69-435a-4cb6-944f-b4fa89e8801c/\" width=\"2316\"></p>\r\n\r\n<p>Оператор больше так же можно использовать при цепном сравнении:</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (54).png\" src=\"https://ucarecdn.com/314b762a-8488-4c44-90a6-809ae49e1d80/\" width=\"2316\"></p>\r\n\r\n<p><code>28</code> &gt; <code>21</code> и <code>21</code> &gt; <code>14</code> #Результат будет <code>True</code></p>\r\n\r\n<p>В <code>Python</code> оператор &gt; так же может использоваться и для сравнения строк. Сравнение строк выполняется на основе <strong>лексикографического порядка</strong>(так же, как слова сравниваются в словаре). Это значит, что строки сравниваются посимвольно использую <code><strong>Unicode</strong></code> символов</p>\r\n\r\n<p><code><strong>Unicode</strong></code> — это международный стандарт для кодирования символов, который присваивает уникальный номер (код) каждому символу из любых письменных систем, включая буквы, цифры, знаки и эмодзи. <a href=\"https://en.wikipedia.org/wiki/List_of_Unicode_characters\" rel=\"noopener noreferrer nofollow\">Ссылка на Википедию</a>. <a href=\"https://symbl.cc/en/unicode-table/\" rel=\"noopener noreferrer nofollow\">Ссылка на Unicode таблицу</a>.</p>\r\n\r\n<h2 style=\"text-align:center;\">Правила работы операторов сравнения&nbsp;для строк:</h2>\r\n\r\n<p>&nbsp;<img alt=\"\" height=\"33\" name=\"Group 2.png\" src=\"https://ucarecdn.com/6f18f6ef-6883-4482-bfb8-2244ea756ded/\" width=\"33\">&nbsp;Сравнение символов по порядку: Сравнение начинается с первого символа каждой строки. Если один символ больше другого по <code>Unicode</code>, строка с большим символом считается большей.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" height=\"33\" name=\"Group 3.png\" src=\"https://ucarecdn.com/927ec78e-3fb5-41ee-bd95-78bc0d3f3b4d/\" width=\"33\">&nbsp;Если первые символы равны, сравнение продолжается со следующей парой символов.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" height=\"33\" name=\"Group 4.png\" src=\"https://ucarecdn.com/3d06241d-c7e5-4dcd-b12e-cd76b05b277c/\" width=\"33\">&nbsp;Длина строки учитывается только если одна строка является начальной частью другой. В таком случае более длинная строка считается большей.</p>\r\n\r\n<p><strong>Примеры:</strong></p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 2.png\" src=\"https://ucarecdn.com/6f18f6ef-6883-4482-bfb8-2244ea756ded/\" width=\"33\"></p>\r\n\r\n<p><img alt=\"\" height=\"528\" name=\"carbon (46).png\" src=\"https://ucarecdn.com/cd378a70-8853-4210-95a1-a1b779d63568/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"33\" name=\"Group 3.png\" src=\"https://ucarecdn.com/927ec78e-3fb5-41ee-bd95-78bc0d3f3b4d/\" width=\"33\"></p>\r\n\r\n<p><img alt=\"\" height=\"528\" name=\"carbon (49).png\" src=\"https://ucarecdn.com/65a28fca-bc34-4632-b0ce-bbb21f112632/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;<img alt=\"\" height=\"33\" name=\"Group 4.png\" src=\"https://ucarecdn.com/3d06241d-c7e5-4dcd-b12e-cd76b05b277c/\" width=\"33\"></p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (47).png\" src=\"https://ucarecdn.com/c61fe025-3e1f-4471-a2ea-3efbe36c196c/\" width=\"2316\"></p>\r\n\r\n<h3 style=\"text-align:center;\">Как узнать <code>Unicode</code> символа не заглядывая в таблицу?</h3>\r\n\r\n<p>Для этого в языке программирования <code>Python</code> есть функция <code>ord()</code>&nbsp; - Которая возвращает <code>Unicode</code> символа:</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (50).png\" src=\"https://ucarecdn.com/8714cb48-a999-4116-b4ea-e510e1abdb3c/\" width=\"2316\"></p>\r\n\r\n<h3 style=\"text-align:center;\">Важный момент!</h3>\r\n\r\n<p>Регистр символов имеент значение: Символы в верхнем регистре имеют меньшие <code>Unicode</code>, чем символы в нижнем регистре.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (51).png\" src=\"https://ucarecdn.com/5453e072-a12a-470a-8580-9e4ddf9da3a3/\" width=\"2316\"></p>\r\n\r\n<p>Так же следует отметить, что лексикографический порядок не учитывает алфавитный порядок с точки зрения человеческого языка, а основан на <code>Unicode</code> .</p>\r\n\r\n<h2 style=\"text-align:center;\">Оператор <code>&lt;</code></h2>\r\n\r\n<p><span style=\"color:#000000;\">Оператор <code>&lt;</code>&nbsp;(меньше) работает по той же аналогии как и оператор <code>&gt;</code>, только измененено условие проверки, данный оператор проверяет меньше ли одно число другого и выдаёт значение типа <code>bool</code>.</span></p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (56).png\" src=\"https://ucarecdn.com/e12e4709-f29a-4b09-8df7-ac27d9224020/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (57).png\" src=\"https://ucarecdn.com/8a53fdb3-3f7b-4a9b-beb1-6b872a82e325/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (58).png\" src=\"https://ucarecdn.com/28afeb00-638f-4b55-bd68-8b8be291fbfd/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Оператор <code>&gt;=</code></h2>\r\n\r\n<p>Оператор <code>&gt;=</code>&nbsp;(больше или равно) используется когда нужно проверить больше или равно одно значение в сравнении с другим значением.</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (60).png\" src=\"https://ucarecdn.com/39f9494f-2da4-4e47-8c95-8b647dfea50f/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (61).png\" src=\"https://ucarecdn.com/4946ec67-beee-4038-82e4-167ce9cafb94/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Оператор <code>&lt;=</code></h2>\r\n\r\n<p>Оператор <code>&lt;=</code>(меньше или равно) используется когда необходимо проверить если один элемент меньше или равен в сравнении с другим элементом.</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (62).png\" src=\"https://ucarecdn.com/65725747-ab29-4b15-9a8d-8a16c75c1282/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (63).png\" src=\"https://ucarecdn.com/b2036b00-f961-4345-9ae3-cec97600bece/\" width=\"2316\"></p>\r\n\r\n<h2>Резюме:</h2>\r\n\r\n<p>В данном уроке мы рассотрели операторы сравнения для числовых типов данных и строк. Следует закрепить полученную информацию и выполнить практические задачи. Операторы сравнения являются важной темой для понимания, так как она ложиться фундаментов для получения дальнейших результатов в программировании.&nbsp;</p>"
  }
},
{
  "model": "courses.content",
  "pk": 17,
  "fields": {
    "topic": 17,
    "type": "text",
    "title": "Логические операции",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Логические операции</h1>\r\n\r\n<p><strong>Цель урока:</strong></p>\r\n\r\n<p>Изучение логических операций в Python, таких как логическое И (and), логическое ИЛИ (or) и логическое НЕ (not). Мы рассмотрим, как эти операции используются для объединения условий, а также изучим таблицы истинности и приоритет операций. Понимание логических операций важно для создания сложных условий и принятия решений в программировании.</p>\r\n\r\n<p>Логические операции позволяют объединять нескольких условий.</p>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Операция</th>\r\n\t\t\t<th>Оператор</th>\r\n\t\t\t<th>Пример</th>\r\n\t\t\t<th>Результат</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Логическое И</td>\r\n\t\t\t<td><code>and</code></td>\r\n\t\t\t<td><code>a &gt; 0 and b &gt; 0</code></td>\r\n\t\t\t<td><code>True</code>, если оба условия истинны</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Логическое ИЛИ</td>\r\n\t\t\t<td><code>or</code></td>\r\n\t\t\t<td><code>a &gt; 0 or b &lt; 0</code></td>\r\n\t\t\t<td><code>True</code>, если хотя бы одно из условий истинно</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Логическое НЕ</td>\r\n\t\t\t<td><code>not&nbsp;</code></td>\r\n\t\t\t<td><code>not a &gt; 0</code></td>\r\n\t\t\t<td><code>True</code>, если условие ложно</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"528\" name=\"carbon (32).png\" src=\"https://ucarecdn.com/8e7353a8-459e-4c4d-b501-18131b86ab36/\" width=\"2316\"></p>\r\n\r\n<h1 style=\"text-align:center;\">Оператор <code>and</code></h1>\r\n\r\n<p>Оператор <code>and</code> возвращает <code>True</code> в случае, когда два операнда истинны.</p>\r\n\r\n<p><strong>Операнд -</strong>&nbsp;это важное понятие как в математике, так и в программировании. Он представляет собой аргумент операции, то есть данные, над которыми выполняется какая-либо операция.&nbsp;Например, в арифметическом выражении&nbsp;<code>3+6=9</code>, числа <code>3</code> и <code>6</code> являются операндами, тогда как знак \"<code>+</code>\" — оператором, который указывает на выполнение операции сложения.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"488\" name=\"carbon (65).png\" src=\"https://ucarecdn.com/6051c8ad-00d5-4153-8a5f-1b1f6a69851d/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"266\" name=\"carbon (66).png\" src=\"https://ucarecdn.com/8956d0ea-5927-46d7-9b71-d5ff0fefd390/\" width=\"2316\"></p>\r\n\r\n<p>\"Напомним, что Unicode — это таблица символов, которая включает в себя тысячи символов для различных языков и алфавитов, а функция ord() позволяет преобразовать символ в его уникальный числовой код в Unicode, который называется кодовой точкой.\"</p>\r\n\r\n<h2 style=\"text-align:center;\">Таблица Истинности для <code>and</code></h2>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th><code>A</code></th>\r\n\t\t\t<th><code>B</code></th>\r\n\t\t\t<th><code>A and B</code></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h1 style=\"text-align:center;\">Оператор <code>or</code></h1>\r\n\r\n<p>Оператор <code>or</code> возвращает <code>True</code>, если хотя бы один из операндов истинный.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"562\" name=\"carbon (67).png\" src=\"https://ucarecdn.com/eb68eae5-cf8d-4310-904d-c6a66e2b63da/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"414\" name=\"carbon (68).png\" src=\"https://ucarecdn.com/6203cce2-8886-40a4-b17a-d5560139b43c/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Таблица Истинности для <code>or</code></h2>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th><code>A</code></th>\r\n\t\t\t<th><code>B</code></th>\r\n\t\t\t<th><code>A or B</code></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h1 style=\"text-align:center;\">Оператор <code>not</code></h1>\r\n\r\n<p><span style=\"color:#000000;\">Оператор not инвертирует логическое значение, т.е превращает True в False и наоборот.</span></p>\r\n\r\n<p><strong>Инвертация - </strong>явление проявленности некоих психологических качеств, характеристик в «инверсной», «инвертированной» форме&nbsp;— то есть в форме, в некоем смысле или отношении противоположной их нормальному проявлению.</p>\r\n\r\n<p>&nbsp;<img alt=\"\" height=\"306\" name=\"carbon (69).png\" src=\"https://ucarecdn.com/432f43f0-9a32-455a-872a-642a18f13fa8/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon (69).png\" src=\"https://ucarecdn.com/035fabb0-cde5-42f1-941d-5fc6db18a8ce/\" width=\"2316\"></p>\r\n\r\n<h1 style=\"text-align:center;\">Таблица Истинности для <code>not</code></h1>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>\r\n\t\t\t<p><code>A</code></p>\r\n\t\t\t</th>\r\n\t\t\t<th><code>Not A</code></th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><code>True</code></td>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>False</code></td>\r\n\t\t\t<td>\r\n\t\t\t<p><code>True</code></p>\r\n\t\t\t</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">&nbsp;</h2>\r\n\r\n<h2 style=\"text-align:center;\">Приоритет логических операций</h2>\r\n\r\n<p>Логические операции выполняются в следующем порядке, при отсутсвии скобок:</p>\r\n\r\n<ol>\r\n\t<li><code>not</code></li>\r\n\t<li><code>and</code></li>\r\n\t<li><code>or</code></li>\r\n</ol>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (71).png\" src=\"https://ucarecdn.com/0d2d18fe-06ca-4e8c-a3c7-be43801c91c4/\" width=\"2316\"></p>\r\n\r\n<p>В данном примере, сначала cчиталось <code>not c</code>(<code>True</code>) - что дало результат <code>False</code>, следующим считалось and - <code>b</code>(<code>False</code>) <code>and</code> (<code>not c</code>)]<code>False</code>] - что дало результат - False и последним считалось <code>a</code>(<code>True</code>) or (<code>b and not c</code>)[<code>False</code>] - что дало итоговый результат <code>True</code>&nbsp;</p>\r\n\r\n<h2>Итоги урока:</h2>\r\n\r\n<p>В этом уроке мы рассмотрели основные логические операции в <code>Python</code>, их приоритет, работу с числами и строками, а также таблицы истинности. Логические операции широко используются в следующих модулях, поэтому важно хорошо их понимать и уметь применять на практике.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 18,
  "fields": {
    "topic": 18,
    "type": "text",
    "title": "Операции присваивания",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2>Цель урока</h2>\r\n\r\n<p>Цель данного урока — изучить операции присваивания в Python, включая различные варианты их использования с арифметическими операторами. Мы разберемся, как можно сократить код с помощью операций типа +=, -=, *= и других, а также увидим, как эти операции могут быть применены к числам и строкам.</p>\r\n\r\n<h1 style=\"text-align:center;\">Операции присваивания</h1>\r\n\r\n<p>Операции присваивания позволяют изменять значение переменных, используя различные арифметические операторы вместе с оператором <code>=</code>. Тем самым сокращая длину записи.&nbsp;</p>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Операция</th>\r\n\t\t\t<th>Оператор</th>\r\n\t\t\t<th>Пример</th>\r\n\t\t\t<th>Эквивалент</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Присваивание</td>\r\n\t\t\t<td><code>=</code></td>\r\n\t\t\t<td><code>a = b</code></td>\r\n\t\t\t<td>Присвоить <code>b</code> значению <code>a</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Сложение с присваиванием</td>\r\n\t\t\t<td><code>+=</code></td>\r\n\t\t\t<td><code>a += b</code></td>\r\n\t\t\t<td><code>a = a + b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Вычитание с присваиванием</td>\r\n\t\t\t<td><code>-=</code></td>\r\n\t\t\t<td><code>a -= b</code></td>\r\n\t\t\t<td><code>a = a - b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Умножение с присваиванием</td>\r\n\t\t\t<td><code>*=</code></td>\r\n\t\t\t<td><code>a *= b</code></td>\r\n\t\t\t<td><code>a = a * b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Деление с присваиванием</td>\r\n\t\t\t<td><code>/=</code></td>\r\n\t\t\t<td><code>a /= b</code></td>\r\n\t\t\t<td><code>a = a / b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Целочисленное деление с присваиванием</td>\r\n\t\t\t<td><code>//=</code></td>\r\n\t\t\t<td><code>a //= b</code></td>\r\n\t\t\t<td><code>a = a // b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Остаток от деления с присваиванием</td>\r\n\t\t\t<td><code>%=</code></td>\r\n\t\t\t<td><code>a %= b</code></td>\r\n\t\t\t<td><code>a = a % b</code></td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Возведение в степень с присваиванием</td>\r\n\t\t\t<td><code>**=</code></td>\r\n\t\t\t<td><code>a **= b</code></td>\r\n\t\t\t<td><code>a = a ** b</code></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p><strong>Пример:</strong></p>\r\n\r\n<p><img alt=\"\" height=\"748\" name=\"carbon (74).png\" src=\"https://ucarecdn.com/4d5bf732-9fe1-4e0a-a70f-a41a94f022f6/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Операции присваивания так же работают для строк и для других типов данных о которых мы поговорим позже.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (72).png\" src=\"https://ucarecdn.com/faad6fd3-dcd7-4f20-b55b-f2ae6af29abc/\" width=\"2316\"></p>\r\n\r\n<p>Изменение типа переменной: Операции присваивания могут привести к изменению типа переменной. Например:</p>\r\n\r\n<p><img alt=\"\" height=\"528\" name=\"carbon (73).png\" src=\"https://ucarecdn.com/6ce31a80-3acc-4cf3-832b-3506b52dc563/\" width=\"2316\"></p>\r\n\r\n<h3>Резюме:</h3>\r\n\r\n<p>Мы рассмотрели различные операции присваивания, их использование с числами и строками. Эти операции часто&nbsp; используются для сокращения кода и повышения его читаемости. Важно понимать, как они работают, чтобы эффективно применять их в своих программах.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 19,
  "fields": {
    "topic": 19,
    "type": "text",
    "title": "Модуль math в python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Модуль math в python</h2>\r\n\r\n<p style=\"text-align:center;\">Модуль - нечто новое в нашей практике.&nbsp;Модуль в программировании — это файл, содержащий набор функций и переменных, который используется для организации и упрощения кода. Модули позволяют разделить программу на логические части, повышая ее читаемость, повторное использование и масштабируемость. В Python модули могут быть стандартными (встроенными в язык) или внешними (создаваемыми пользователями или доступными через пакеты и библиотеки).</p>\r\n\r\n<p style=\"text-align:center;\">Иными словами модуль - сгустки кода, которые можно подключить в любую вашу программу через импорт и использовать функции подключенного модуля для своих значений.</p>\r\n\r\n<h2><strong>Цель урока:</strong></h2>\r\n\r\n<p>Цель данного урока — познакомиться с модулем <code>math</code> в Python, который предоставляет широкий набор математических функций для выполнения различных операций. Мы изучим, как подключать модули, как использовать их функции для выполнения арифметических, тригонометрических, логарифмических операций и работы с числами, а также разберемся основные функции модуля <code>math</code>.</p>\r\n\r\n<h2 style=\"text-align:center;\">Как подключаются модули?</h2>\r\n\r\n<p style=\"text-align:center;\">В Python модули подключаются с помощью ключевого слова <code>import</code>. Когда вы импортируете модуль, вы получаете доступ ко всем его функциям, классам и переменным. Существует несколько способов подключения модулей, в зависимости от того, что именно вам нужно импортировать и как вы хотите это делать.</p>\r\n\r\n<p style=\"text-align:center;\">1. <strong>Импорт всего модуля</strong></p>\r\n\r\n<p style=\"text-align:center;\">Для того, чтобы импортировать весь модуль, используется ключевое слово <code>import</code>&nbsp;прямо в начале кода с названием модуля после него.</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"274\" name=\"carbon (76).png\" src=\"https://ucarecdn.com/65dfb35b-5804-4f2a-98e1-0a63a9a76c86/\" width=\"2560\"></p>\r\n\r\n<p>И все. Теперь, в нашем коде мы можем использовать все возможности модуля math. Однако в таком случае, для использования отдельной функции нам придется каждый раз обращаться к ней по имени модуля, то есть:</p>\r\n\r\n<p><img alt=\"\" height=\"360\" name=\"carbon (77).png\" src=\"https://ucarecdn.com/7096d35a-b387-4f76-a1ea-a14429f4cee1/\" width=\"2560\"></p>\r\n\r\n<h4><img alt=\"\" height=\"76\" name=\"Frame 39.svg\" src=\"https://ucarecdn.com/a2ef4e05-3580-4eee-afe0-3aafeb2ba13c/\" width=\"152\">&nbsp; &nbsp;По рекомендации PEP8, импорты всегда должны распологаться в начале файла.</h4>\r\n\r\n<h2>Что касается модуля math:</h2>\r\n\r\n<p>Модуль <code>math</code> в Python предоставляет полезные функции для работы с математическими вычислениями. Он включает в себя функции для работы с числами, математическими операциями, логарифмами, тригонометрией и многим другим. Этот модуль упрощает работу с числовыми вычислениями, особенно при использовании более сложных функций и операций.</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>2. Импорт отдельной функции</strong></h2>\r\n\r\n<p>Давайте представим, что наша программа используется для одной только задачи. Нахождения корня числа. Зачем тогда нам импортировать весь модуль внутрь? Это ведь только загрузит лишние функции в код, а соответственно, ухудшит оптимизацию проекта. Поэтому в python можно импортировать&nbsp;только отдельные - необходимые в программе функции<img alt=\"\" height=\"360\" name=\"carbon (78).png\" src=\"https://ucarecdn.com/7c27e412-0134-4b9f-ae8f-cf94f81811d6/\" width=\"2560\">Что касается импортов, то другими словами, мы достаем участки кода - написанные другими кодерами, которые собраны в один пакет. В данном случае, мы достаем только одну переменную из чужого кода - переменную pi и используем ее у себя в программе.</p>\r\n\r\n<h2>Особенности импорта</h2>\r\n\r\n<p>В следующих частях мы обязательно разберем особенности импорта, как работают функции, разберем детально Объектно - Ориентированное программирование (ООП) и поймем, как работают импорты внутренне. Пока же стоит запомнить, что импорт - заимствование чужого кода в виде переменных либо полнофункциональных частей кода. В данном случае мы буквально заимствуем чужую переменную pi с точностью 15 цифр после запятой. Однако можно заимствовать и функции - участки кода, которые иногда требуют (а иногда и нет) какие - то аргументы внутрь себя. Они могут быть обязательными и нет. Например в <code>print()</code>&nbsp;необязательными аргументами являются все составляющие. Давайте разберем на практике:</p>\r\n\r\n<p><img alt=\"\" height=\"360\" name=\"carbon (77).png\" src=\"https://ucarecdn.com/7096d35a-b387-4f76-a1ea-a14429f4cee1/\" width=\"2560\"></p>\r\n\r\n<p>Как мы видим, некоторые функции требуют внутрь себя параметры. Оно и не удивительно, как же мы можем вычислить корень из пустого места? В этом случае мы буквально: берем чужой код, который решает какую - то проблему (в нашем случае - вычисляет корень любого числа) и используем ее в нашей программе как свою собственную</p>\r\n\r\n<p style=\"text-align:center;\">Теперь давайте поговорим про модуль math и разберемся, почему его функционал удобно использовать в некоторых своих программах</p>\r\n\r\n<p style=\"text-align:center;\">&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>Введение в модуль math в Python</strong></h2>\r\n\r\n<p>Модуль <code>math</code> в Python — это стандартный модуль, который предоставляет широкий набор математических функций и констант, сделав работу с числовыми вычислениями более удобной, точной и быстрой. Он включает в себя функции для выполнения базовых арифметических операций, работы с тригонометрией, логарифмами, а также с более сложными математическими задачами, такими как извлечение квадратного корня или нахождение факториала числа.</p>\r\n\r\n<p>Использование модуля <code>math</code> может значительно упростить решение многих математических задач, повышая читаемость и уменьшив необходимость в написании собственных функций для выполнения простых математических операций.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Широкий набор математических функций:</strong> Модуль <code>math</code> включает в себя более 40 математических функций, что позволяет выполнять множество задач, начиная от базовых математических операций до более сложных вычислений. Среди тех, что мы разберем:</p>\r\n\r\n<ul>\r\n\t<li>Арифметические функции: <code>sqrt()</code>, <code>pow()</code>, <code>fabs()</code>.</li>\r\n\t<li>Тригонометрические функции: <code>sin()</code>, <code>cos()</code>, <code>tan()</code>, <code>asin()</code>, <code>acos()</code>, <code>atan()</code>.</li>\r\n\t<li>Логарифмические функции: <code>log()</code>, <code>log10()</code>, <code>log2()</code>.</li>\r\n\t<li>Степенные функции: <code>exp()</code>, <code>pow()</code>, <code>isqrt()</code>.</li>\r\n\t<li>Функции для работы с числами: <code>ceil()</code>, <code>floor()</code>, <code>trunc()</code>, <code>factorial()</code>.</li>\r\n</ul>\r\n\r\n<p><strong>Также модуль math обеспечивает необходимую точность вычислений</strong>, которой не всегда можно добиться используя произвольные значения.</p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p>Например, функция <code>math.sqrt()</code> гарантирует точное извлечение квадратного корня, а <code>math.log()</code> вычисляет логарифм с высокой точностью, избегая ошибок округления.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Основные функции модуля <code>math</code></h2>\r\n\r\n<h2>Округление и работа с числами&nbsp;</h2>\r\n\r\n<p>-<code>math.ceil(x)</code> - возвращает ближайшее целое число, большее или равное <code>x</code> (округление вверх).</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (84).png\" src=\"https://ucarecdn.com/166415f2-7eb2-4c9c-bf92-3b98a34e8d1a/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.floor(x)</code> - возвращает ближайшее целое число, меньшее или равное x (округление вниз).</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (85).png\" src=\"https://ucarecdn.com/4b9d9a68-dff9-4388-8246-178e94b2a38b/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.fabs(x)</code> - возвращает модуль числа <code>x</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (86).png\" src=\"https://ucarecdn.com/3ac7ca40-97bd-410a-a6e5-ec72db2edbb6/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.factorial(x)</code> - возвращает факториал числа <code>x</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (87).png\" src=\"https://ucarecdn.com/62e233d1-2315-4153-9151-457bf05d759b/\" width=\"2316\"></p>\r\n\r\n<h2>Степени и корни</h2>\r\n\r\n<p>-<code>math.pow(x, y)</code> - возвращает <code>x</code> в степени <code>y</code> .</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (83).png\" src=\"https://ucarecdn.com/e598ddc5-0e3f-45f9-b03c-070d2bc2546c/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.sqrt(x)</code> - возвращает квадратный корень из <code>x</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (82).png\" src=\"https://ucarecdn.com/79ae0832-4197-4cfc-bd95-5d24b3a5269f/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.isqrt()</code> - предназначена для вычисления целочисленного квадратного корня неотрицательного целого числа.Она возвращает наибольшее целое число <code>n</code>, такое что&nbsp;<code><span class=\"math-tex\">\\(n^2\\)</span></code>&nbsp;меньше или равно <code>x</code>. Это означает, что результат округляется вниз до ближайшего челого числа.</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (99).png\" src=\"https://ucarecdn.com/9d182b88-7279-4581-b31c-81df42edd2aa/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.exp(x)</code> - возвращает значение <code>e^x</code>. <code>e</code>(число Эйлера)&nbsp;<strong>≈</strong> <code>2.718281828459045</code> возведённоё в степень <code>x</code> .</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (81).png\" src=\"https://ucarecdn.com/90550c02-5129-4736-bd6f-4920ed69ee03/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Логарифмы</h2>\r\n\r\n<p>-<code>math.log(x, base)</code> - возвращает логарифм числа <code>x</code> по основанию <code>base</code> . Если основание не указано, вычисляется натуральный логарифм.</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (88).png\" src=\"https://ucarecdn.com/2638b792-6d1b-4910-8d7a-b60a15cbc14b/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.log10(x)</code> - возвращает десятичный логарифм числа <code>x</code> .</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (90).png\" src=\"https://ucarecdn.com/9e55d955-f0a9-4d2f-a166-dfcde54d1fe9/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.log2(x)</code> - вычисляет логарифм числа по основанию 2. Это полезно, когда часто требуется работа с двоичными числами и алгоритмами.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (100).png\" src=\"https://ucarecdn.com/0d149131-2b6d-4635-b56e-b2e77fbccc71/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Тригонометрические функции</h2>\r\n\r\n<p>-<code>math.sin(x)</code> - синус угла <code>x</code>, заданного в радианах.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (93).png\" src=\"https://ucarecdn.com/71f81d8b-6b1f-45fa-9958-0c4f629a5938/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.cos(x)</code> - косинус угла <code>x</code>, заданного в радианах.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (94).png\" src=\"https://ucarecdn.com/e0c9319f-e348-4f5a-833b-34b04766230f/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.tan(x)</code> - тангенс угла <code>x</code>, заданного в радианах.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (95).png\" src=\"https://ucarecdn.com/5f504f97-b1bd-4374-bd36-80bf75289a76/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><code>math.asin(x), math.acos(x), math.atan(x)</code> - обратные тригонометрические функции.</p>\r\n\r\n<p>-<code>math.asin(x)</code> -&nbsp; вычисляет арксинус числа <code>x</code>&nbsp;и возвращает результат в радианах. Значение <code>x</code> должно находится в диапазоне от <code>-1</code> до <code>1</code>. Если <code>x</code> выходит за эти пределы, функция вернет '<code>NaN</code>'.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (98).png\" src=\"https://ucarecdn.com/c9e1c5bf-8972-4034-814e-e608de1322fd/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.acos(x)</code> -&nbsp;возвращает арккосинус числа x в радианах. Значение <code>x</code> должно находится в диапозоне от <code>-1</code> до <code>1</code>. Если <code>x</code> выходит за эти пределы, функция вернёт ошибку.</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (96).png\" src=\"https://ucarecdn.com/283257a2-3afa-4206-b19e-f2ad91823623/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.atan(x) </code>- возвращает арктангенс числа <code>x</code> в радианах.</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon (97).png\" src=\"https://ucarecdn.com/6dad0fcb-fa67-4e6b-b7bd-f397478f93fb/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Константы</h2>\r\n\r\n<p>-<code>math.pi</code>- число Пи(<code>π</code>).</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (91).png\" src=\"https://ucarecdn.com/11f29bfd-8e94-46c4-aacb-991199178080/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>-<code>math.e</code> - основание натурального логарифма (число Эйлера).</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon (92).png\" src=\"https://ucarecdn.com/e6d41219-5f03-4f07-87a0-023ace6155f8/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Это не все преимущества модуля, однако этого пока будет достаточно, чтобы идти дальше. Также можно запомнить, что он удобен и быстр, так как его вычисления написаны и интегрированы на языке <code>C</code>.</p>\r\n\r\n<h2><strong>Резюме:</strong></h2>\r\n\r\n<p>Модуль <code>math</code> значительно упрощает выполнение сложных математических операций, позволяя использовать заранее оптимизированные функции и константы. Понимание его возможностей и правильное использование поможет вам эффективно решать различные математические задачи в Python.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 20,
  "fields": {
    "topic": 20,
    "type": "text",
    "title": "Обработка различных случаев | Оператор if",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Обработка различных случаев | Оператор if</h2>\r\n\r\n<p style=\"text-align:center;\">Раньше в наших программах не было практически никакой вариативности. Единственное, что мы могли сделать это выводить истинность, либо ложность каких либо математических выражений либо условий. Теперь же, с условным оператором if и его дальнейшими операторами - помощниками мы сможем в полной мере управлять любыми действиями программы в зависимости от различных факторов. Допустим у вас есть задача проверить цифру и написать в строчном варианте, что это за цифра. 7 - 'семь' 4 - 'четыре' и так далее. Но что, если пользователь вводит не цифру совсем? Или что, если пользователь вообще ничего не ввел? Как указать программе, что делать в различных случаях? Для этого существуют условные операторы. Они позволяют управлять программой полностью в зависимости от различных явлений. При желании можно обработать любое действие \\ любой ответ на любое действие пользователя и так далее. В этом уроке мы поговорим о первом операторе - операторе if.</p>\r\n\r\n<h2>Цели урока</h2>\r\n\r\n<p>В этом уроке мы рассмотрим оператор if, который позволяет обрабатывать различные случаи и управлять действиями программы в зависимости от условий. Этот оператор помогает создавать программы с вариативностью, где можно обработать несколько сценариев, например, проверить, что ввел пользователь.</p>\r\n\r\n<h2 style=\"text-align:center;\">Синтаксис | IF</h2>\r\n\r\n<p><strong><em>Рассмотрим пример:</em></strong></p>\r\n\r\n<p><img alt=\"\" height=\"430\" name=\"carbon (87).png\" src=\"https://ucarecdn.com/78f66d98-25f7-4a96-8e76-d6729fc95778/\" width=\"2560\"></p>\r\n\r\n<p>Отсюда видно, что конструкция if требует какое - то условие и если оно возвращает True - программа начинает выполнять блок кода, который написан ниже и определяется он двумя пробелами, четырьмя пробелами либо нажатием клавиши tab (что автоматически ставит расстояние, равное четырем пробелам, но не являющимися ими)&nbsp;</p>\r\n\r\n<h4><img alt=\"\" height=\"78\" name=\"Frame 39.svg\" src=\"https://ucarecdn.com/07f228ab-1802-4e05-b682-c831e520493a/\" width=\"156\">&nbsp;По рекомендации PEP8, для отступов следует использовать 4 пробела, так же не рекомендуется ставить</h4>\r\n\r\n<h4>ставить символ табуляции(Tab), для отступов, так как это может привести к конфликтам отображения в разных редакторах.&nbsp;</h4>\r\n\r\n<p><strong><em>Однако, важно помнить, что:&nbsp;</em></strong></p>\r\n\r\n<p><img alt=\"\" height=\"628\" name=\"carbon (88).png\" src=\"https://ucarecdn.com/8d5acb31-00bf-4e5c-ab6d-c2a49a3cd904/\" width=\"2560\"></p>\r\n\r\n<p>С условиями можно работать так, как только вздумается. Вы порешаете задачи в результате которых все станет предельно ясно. Если же нет - у нас всегда есть ролики, которые в максимально короткое время пытаются максимально подробно объяснить какой - то концепт. Давайте пока порешаем некоторые из задач</p>\r\n\r\n<p>Допустим, мы имеем переменную и хотим, что - бы в случае, если пользователь захотел, мы добавляли к этой переменной какое либо значение</p>\r\n\r\n<p><img alt=\"\" height=\"706\" name=\"carbon (86).png\" src=\"https://ucarecdn.com/f472ddbc-29a7-4dc5-8f72-9d6d68447287/\" width=\"2560\"><em>Если же условие if выбрасывает False --&gt; тогда блок условия просто пропускается и программа дальше продолжает работать в своем формате</em></p>\r\n\r\n<p><img alt=\"\" height=\"824\" name=\"carbon (90).png\" src=\"https://ucarecdn.com/0e59b009-72f9-4e9f-aebf-b0e80474d41d/\" width=\"2560\">Также можно комбинировать условия</p>\r\n\r\n<p><img alt=\"\" height=\"548\" name=\"carbon (91).png\" src=\"https://ucarecdn.com/90100778-8957-40b9-9a00-16cb5cb3ee22/\" width=\"2560\">Иными словами, сюда можно вставлять любое условие, возвращающее True или False. Мы так уже делали, однако тут мы можем управлять действиями программы, вместо слепого вывода True или False</p>\r\n\r\n<p>В случае, если по какой - то причине вы придумали условие, но не придумали, что делать в случае его истинности, используйте заглушку pass</p>\r\n\r\n<p><img alt=\"\" height=\"548\" name=\"carbon (93).png\" src=\"https://ucarecdn.com/08e15be6-2f17-4372-8caa-ad31d1cd165a/\" width=\"2560\"></p>\r\n\r\n<p>Код второго случая вызовет ошибку, так как при определении условия python ожидает какие - либо действия от программы в теле условия.</p>\r\n\r\n<p><em>еще пример:</em></p>\r\n\r\n<p><img alt=\"\" height=\"628\" name=\"carbon (96).png\" src=\"https://ucarecdn.com/95543158-bca2-494f-a982-e3a0d316b099/\" width=\"2560\">Данная программа проверяет, больше ли пользователю 18 лет. В любом случае выведется только одна из надписей, удовлетворяющих нашему условию, так как только одно из условий - True</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Таким образом, оператор if позволяет создавать гибкие условия и управлять выполнением программы в зависимости от значений, что дает больше возможностей для обработки различных сценариев.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 21,
  "fields": {
    "topic": 21,
    "type": "text",
    "title": "Вложенные условия | if-if",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2>Цели урока</h2>\r\n\r\n<p>В этом уроке мы рассмотрим вложенные условия if в Python, которые позволяют создавать сложные проверки, где одно условие зависит от выполнения другого. Мы увидим, как правильно использовать вложенные блоки if для более детализированной логики.</p>\r\n\r\n<h2 style=\"text-align:center;\">Вложенные условия <code>if</code></h2>\r\n\r\n<p>В Python конструкция <code>if</code> может быть вложена в другую конструкцию <code>if</code>. Это означает, что внутри одного блока <code>if</code> мы можем иметь еще один блок <code>if</code>, который будет выполняться только если условие внешнего <code>if</code> выполнено (т.е. оно истинно).</p>\r\n\r\n<p>Вложенные условия обычно применяются, когда нужно проверить несколько зависимых условий, и одно условие зависит от выполнения другого.</p>\r\n\r\n<p><img alt=\"\" height=\"508\" name=\"carbon (97).png\" src=\"https://ucarecdn.com/2e8cb40c-288f-4614-ac0a-95f4262b8945/\" width=\"2560\"></p>\r\n\r\n<p>Обратите внимание: вложенный цикл всегда пишется вместе с такими же отступами, создавая лесенку. Так python определяет, что один блок кода находится внутри другого</p>\r\n\r\n<p><em>другой пример:</em><img alt=\"\" height=\"508\" name=\"carbon (98).png\" src=\"https://ucarecdn.com/1e9c3cb1-5906-4595-90b0-2c0f7091d24c/\" width=\"2560\"></p>\r\n\r\n<h3>Когда использовать вложенные условия</h3>\r\n\r\n<ol>\r\n\t<li><strong>Для более сложных проверок</strong>: Если вам нужно проверять несколько зависимых условий, например, если одно условие должно быть выполнено до того, как вы проверите следующее.</li>\r\n\t<li><strong>Для упорядочивания логики программы</strong>: Вложенные <code>if</code> позволяют строить логическую цепочку, где одно условие зависит от выполнения другого.</li>\r\n</ol>\r\n\r\n<p>Важно помнить, что вложенные условия очень важно правильно использовать, а иначе они могут привести к неправильной работе программы.&nbsp;</p>\r\n\r\n<p><em><strong>Приведенный ниже код:</strong></em><img alt=\"\" height=\"588\" name=\"carbon (100).png\" src=\"https://ucarecdn.com/498b2de6-9cfc-4d82-8534-0ff8c549c9a3/\" width=\"2560\"></p>\r\n\r\n<p>Выполняется по разному. В одном случае производится проверка делимости на 4 только в случае если оно делится на 3<br>\r\nа во втором проверка проходит для 3 и 4 отдельно</p>\r\n\r\n<p>По большому счету это все с использованием сухого if, в зависимости от различных предпочтений можно комбинировать их с and и or и получать действительно интересные ветвления программ. Однако наша работа с условными операторами только начинается, ведь это даже не треть той информации, что мы собираемся вам рассказать.</p>\r\n\r\n<h2>Резюме:</h2>\r\n\r\n<p>Вложенные условия if позволяют строить более сложную логику программы, когда одно условие зависит от другого. Важно правильно их использовать, чтобы избежать ошибок в работе программы.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 22,
  "fields": {
    "topic": 22,
    "type": "text",
    "title": "Обработка дополнительных условий | Оператор elif",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Обработка дополнительных условий | Оператор elif</h2>\r\n\r\n<p style=\"text-align:center;\">В прошлых уроках мы использовали только одно сырое условие, что как бы и добавляло той самой \"вариативности\" в нашу программу, однако было весьма неудобным и не всегда полезным. В этом уроке мы поговорим про возможность обрабатывать разные значение внутри одного условного оператора. Конкретно поговорим про elif, что это такое?</p>\r\n\r\n<h2>Цель урока:</h2>\r\n\r\n<p style=\"text-align:center;\">В этом уроке мы познакомимся с оператором <code>elif</code>, который позволяет обрабатывать дополнительные условия в Python. Это позволяет сделать код более компактным, читаемым и эффективным, особенно когда нужно проверять несколько условий в одном блоке.</p>\r\n\r\n<h2 style=\"text-align:center;\">Elif - возможность устроиться поудобней. Как вам, так и коду.</h2>\r\n\r\n<p>Начнем с синтаксиса: elif позволяет нам перечислять условия до тех пор, пока у нас руки не устанут, но тут есть свои особенности. Разберем для начала синтаксис:&nbsp;<img alt=\"\" height=\"666\" name=\"carbon - 2025-01-12T184318.757.png\" src=\"https://ucarecdn.com/5bdc3f40-02b0-4967-9b7d-aeb44122fe4b/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><em>Теперь посмотрите на практический пример:</em><img alt=\"\" height=\"628\" name=\"carbon - 2025-01-12T182732.198.png\" src=\"https://ucarecdn.com/443ac9e6-7a3e-4217-8e44-1cab36983b4a/\" width=\"2560\"></p>\r\n\r\n<p><code>elif</code><strong> </strong>- возможность добавить в код больше условий и увеличить степень вариативности программы. Расшифровывается как сокращенное \"<code>else if</code>\" (иначе если). В данной программе условия будут проверяться поочередно. Однако если условий больше - выполнится первый на пути, который вызовет <code>True</code>, остальные выполнятся не будут.&nbsp;</p>\r\n\r\n<p>Раньше мы писали просто несколько условий и это не мешало нам производить такие же манипуляции с кодом, как и с <code>elif</code>. Зачем нам <code>elif</code>?</p>\r\n\r\n<p><em><strong>Возьмем пример:&nbsp;</strong></em></p>\r\n\r\n<p><img alt=\"\" height=\"786\" name=\"carbon - 2025-01-12T183545.110.png\" src=\"https://ucarecdn.com/90c83584-f958-4a2a-b0a2-5a9f73b4bc1d/\" width=\"2560\">Как видим, мы решали похожую задачу в прошлом уроке, однако тут она выглядит более практично и самое главное - она требует меньше ресурсов памяти компьютера, так как он не уделяет время на остальные проверки.</p>\r\n\r\n<p><strong><em>Этот код:</em></strong><img alt=\"\" height=\"746\" name=\"carbon - 2025-01-12T183909.479.png\" src=\"https://ucarecdn.com/32a948da-fd1a-4272-b0d3-06690889ef0b/\" width=\"2560\">Потратит больше памяти и сработает неправильно, так как каждое условие кроме последнего вернет <code>True</code>. 4 <code>if</code> отдельно - проверятся все. А одно условие с &nbsp;<code>elif</code> - выполнится только одно - первое вернувшее True</p>\r\n\r\n<h3>Почему <code>elif</code> удобен?</h3>\r\n\r\n<ul>\r\n\t<li><strong>Читаемость</strong>: Мы видим, что это четкая последовательность проверок, и только одно из условий выполнится.</li>\r\n\t<li><strong>Эффективность</strong>: После того как одно условие выполнится, остальные не проверяются, что ускоряет выполнение программы.</li>\r\n\t<li><strong>Логическая структура</strong>: Программист сразу понимает, что возраст может попадать только в одну категорию, и это явно выражено в коде.</li>\r\n</ul>\r\n\r\n<p>Таким образом, конструкция <code>elif</code> делает код более компактным, логичным и легко читаемым.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 23,
  "fields": {
    "topic": 23,
    "type": "text",
    "title": "Обработка всех остальных значений | Оператор else",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Обработка всех остальных значений | Оператор else</h2>\r\n\r\n<h2>Цели урока:</h2>\r\n\r\n<p>В этом уроке мы обсудим оператор <code>else</code>, который используется для обработки всех случаев, когда ни одно из условий <code>if</code> или <code>elif</code> не возвращает <code>True</code>. Он необходим для выполнения кода в случае, если все предыдущие условия не были удовлетворены.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Если вы на прошлых уроках усвоили темы по обработке основного условия, дополнительных условий, то <code>else</code> для вас не станет проблемой. Используется он для того, чтобы обработать случай, когда ни один из <code>if</code> и <code>elif</code> не вернул <code>True</code>. То есть во всех остальных случаях.<img alt=\"\" height=\"548\" name=\"carbon - 2025-01-12T200346.045.png\" src=\"https://ucarecdn.com/33f90561-530e-4e1d-8533-7a1018e75210/\" width=\"2560\"><em>Иногда нужно, чтобы программа выводила что - то в случае, если работа условия ничего не дала и все условия вывели <code>False</code></em><img alt=\"\" height=\"628\" name=\"carbon - 2025-01-12T200511.518.png\" src=\"https://ucarecdn.com/c388731b-e8d8-4432-82dd-8cb81d51043b/\" width=\"2560\"></p>\r\n\r\n<p>В таком случае на помощь приходит <code>else</code>: Он пишется последним и не требует условия вообще, так как выполняется всегда, когда все прошлые условия вернули <code>False</code>.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><em><code>else</code> наглядно:</em><img alt=\"\" height=\"706\" name=\"carbon - 2025-01-12T200954.374.png\" src=\"https://ucarecdn.com/7fe75a08-a815-4714-a305-5bf9c84e52d1/\" width=\"2560\">В данном случае программа принимает на вход число и выводит состояние числа (положительное либо отрицательное) также обрабатывает случай, когда число равно нулю, однако что, если человек ошибся и ввел букву? Для таких случаев и используется <code>else</code>, для случаев, когда все остальные записи не удовлетворяют условию</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Таким образом, оператор <code>else</code> является важным инструментом для обработки всех случаев, когда ни одно из условий <code>if</code> или <code>elif</code> не сработало. Это универсальный блок кода, который выполняется в тех случаях, когда все предыдущие условия возвращают <code>False</code>. Он помогает обработать неожиданные или ошибочные ситуации, такие как ввод неверных данных, и гарантирует, что программа всегда выполнит какой-то код, даже если не было выполнено ни одно из условий.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 24,
  "fields": {
    "topic": 25,
    "type": "text",
    "title": "Вхождение строки | Работа с IN",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Вхождение строки | Работа с IN</h2>\r\n\r\n<p style=\"text-align:center;\">Напомним, что раньше мы уже работали с типом данных string в целом. Мы умели сравнивать строки, умножать их, \"конкатенировать\" и так далее. В данном модуле планируется ввести вас в довольно новый, широкий аспект работы со строками, где вы обязательно расширите свой спектр знаний в языке Python. Приступим.&nbsp;</p>\r\n\r\n<p style=\"text-align:center;\">Данная тема с вхождением не является каким - то большим концептом, однако кем бы мы были, если бы не рассказали вам о возможности проверить строку на вхождение. + Это хороший повод начать и без того большой модуль типа данных string в python<br>\r\n<br>\r\nНачнем с вхождения строки в другую строку. Этот урок будет посвящен работе с проверкой на наличие одной строки в другой, то есть - наличие одной подстроки для другой. Для того, чтобы проверить вхождение, используется оператор IN.<img alt=\"\" height=\"252\" name=\"carbon - 2025-01-12T222413.477.png\" src=\"https://ucarecdn.com/14718e27-72b1-4a6d-9631-4325b54ccade/\" width=\"2560\">С помощью данного синтаксиса можно проверить, входит ли строка слева в строку справа. Будьте внимательны, если такой код вывел True, то такой код<img alt=\"\" height=\"252\" name=\"carbon - 2025-01-12T222606.726.png\" src=\"https://ucarecdn.com/7970476b-151d-46bb-8bb8-d87ae6f1bd40/\" width=\"2560\">Выведет False.</p>\r\n\r\n<p>Причем обязательно помнить, что такая проверка является очень строгой, а значит, она чувствительна к регистру и любой разнице в символах. Просмотрите внимательно данный код:<img alt=\"\" height=\"608\" name=\"carbon - 2025-01-12T223151.703.png\" src=\"https://ucarecdn.com/07ca5a3c-90bc-4562-bcf4-a18918225faa/\" width=\"2560\"></p>\r\n\r\n<p>В общем, иными словами, в строке справа обязательно должна быть полная идентичная левая строкa, тогда и только тогда программа вернет True.</p>\r\n\r\n<p>Таким образом, оператор <code>IN</code> позволяет эффективно проверять наличие подстроки в строке в Python. Эта операция чувствительна к регистру и точности совпадений, что означает, что даже малейшая разница в символах приведет к отрицательному результату. Это полезный инструмент для работы со строками, когда необходимо убедиться, что определенная последовательность символов присутствует в другой строке.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 25,
  "fields": {
    "topic": 26,
    "type": "text",
    "title": "Теперь поговорим о форматировании строк",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Теперь поговорим о форматировании строк</h2>\r\n\r\n<h2>Цели урока:</h2>\r\n\r\n<p>В этом уроке мы рассмотрим разные способы форматирования строк в Python, включая устаревший метод с операцией <code>%</code>, современные методы f-строк и метод <code>.format</code>.</p>\r\n\r\n<p style=\"text-align:center;\">Дело в том, что строки в python можно представлять в программе по разному. Методы написания одной и той же строки могут варьироваться в зависимости от предпочтений человека, пишущего код.</p>\r\n\r\n<h3>Форматирование с помощью Операции % (старый подход)</h3>\r\n\r\n<p>Для начала быстро поговорим о довольно устаревшем подходе форматирования строк. Ранее использовался довольно разнообразный стиль форматирования строки, который позволял преобразовывать число типа integer в строку при помощи одной только буквы и добавлять строки без лишней возни. Приведем пример:<img alt=\"\" height=\"356\" name=\"carbon - 2025-01-13T074306.029.png\" src=\"https://ucarecdn.com/bcf4b86b-0df3-492d-b10b-4ea475522d6b/\" width=\"2560\">Здесь присутствуют 2 переменные, которые с помощью \"<code>%s</code>\" и \"<code>%d</code>\" были отформатированы в строку без лишней конкатенации либо перечисления аргументов. Те аргументы (в нашем случае переменные) которые необходимо вставить в строку с помощью процентных выражений, записываются после окончания строки, после процента. Иными словами:&nbsp;<img alt=\"\" height=\"450\" name=\"carbon - 2025-01-13T075048.594.png\" src=\"https://ucarecdn.com/719c43ad-d5aa-407d-ae77-9285f48dd931/\" width=\"2560\">Это, безусловно, помогает нам в работе с строками, однако есть более практичные методы форматирования неудобных строк и организации текстового кода.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>Методы f-строк</strong></h2>\r\n\r\n<p>Благо python располагает более удобной концепцией - <code>f - строки</code>&nbsp;если у нас есть 2 переменные в python и мы желаем грамотно поместить туда достаточно лишь: 1. Поместить букву <code>f</code> перед началом строки внутри <code>print()</code>&nbsp;и оперировать переменными внутри <code>{}</code> прямо внутри строки:</p>\r\n\r\n<p><em>Пример:</em></p>\r\n\r\n<p><img alt=\"\" height=\"404\" name=\"carbon - 2025-01-13T075528.390.png\" src=\"https://ucarecdn.com/cf5953a8-57fb-428d-b8c4-d403e9a68ea3/\" width=\"2560\"></p>\r\n\r\n<p>внутреннее выражение автоматически подстраивается под строку и мы получаем адекватный результат. При чем внутри этих фигурных скобках можно писать все что угодно в пределах разумного. Python постарается подстроиться под правильный вывод:&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"292\" name=\"carbon - 2025-01-13T075719.158.png\" src=\"https://ucarecdn.com/ab30a97a-6c63-4410-b660-b84c98bbde22/\" width=\"2560\"></p>\r\n\r\n<p>Такой вывод даст:&nbsp;<code>Name: 37, Age: AliceAlice</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Метод .format</h2>\r\n\r\n<p>Также в питоне можно форматировать строки еще одним способом, похожим на тот, что был в первом варианте. Однако вместо перечисления в скобках через запятую после строки и знака \"<code>%</code>\" мы добавляем к строке метод форматирования format с перечислением форматируемых переменных.</p>\r\n\r\n<p><img alt=\"\" height=\"548\" name=\"carbon - 2025-01-13T080716.807.png\" src=\"https://ucarecdn.com/71f87d03-bcf3-4abd-ba2c-25916bd74d0b/\" width=\"2560\"></p>\r\n\r\n<p>Какой вам предпочтительней - выбирайте сами. На пути к совершенствованию в python вы будете с каждым разом все лучше и лучше понимать, какой вам нравится больше и какой лучше использовать в своем коде.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Резюме:</h2>\r\n\r\n<p>Таким образом, Python предоставляет несколько способов форматирования строк, и каждый из них имеет свои преимущества. Старый метод с операцией <code>%</code> был удобен в свое время, но с развитием языка появились более современные и гибкие варианты. Метод f-строк стал предпочтительным за счет своей простоты и удобства, позволяя легко вставлять переменные и выражения прямо в строку. Метод <code>.format</code> также остается полезным и дает дополнительные возможности для работы с параметрами строк. В итоге, выбор способа форматирования зависит от ваших предпочтений и задачи, которую вы решаете, но важно знать и уметь использовать разные подходы для различных ситуаций.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 26,
  "fields": {
    "topic": 27,
    "type": "text",
    "title": "Урок по индексации и срезам строк в Python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Урок по индексации и срезам строк в Python</h1>\r\n\r\n<h2>Цели Урока:</h2>\r\n\r\n<ul>\r\n\t<li>Понять, как работает индексация строк в <code>Python</code>.</li>\r\n\t<li>Научиться использовать срезы для извлечения подстрок.</li>\r\n\t<li>Ознакомиться с положительными и отрицательными индексами.</li>\r\n</ul>\r\n\r\n<h2 style=\"text-align:center;\">Индексация строк</h2>\r\n\r\n<p>Индексация строк в <code>Python</code>, позволяет получать доступ к отдельным символам строки по из позициям. Индексы начинаются с нуля, что означает, что первый символ имеет индекс <code>0</code>, второй - индекс <code>1</code> и так далее.</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"222\" name=\"image.png\" src=\"https://ucarecdn.com/bd261834-a1d6-441d-ad6d-6ae2dd6707f5/\" width=\"642\"></p>\r\n\r\n<p>Синтаксис извлечения идекса из строки</p>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon - 2025-01-13T172420.059.png\" src=\"https://ucarecdn.com/ff63a20a-fd5f-4406-bc52-65dd3d4765f1/\" width=\"2316\"></p>\r\n\r\n<p><strong>Пример:</strong><img alt=\"\" height=\"528\" name=\"carbon - 2025-01-13T154905.115.png\" src=\"https://ucarecdn.com/3ec9cfce-6341-4e34-9f5c-f6e8953c8875/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><code>text = \"Eidos\"</code></p>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Выражение</th>\r\n\t\t\t<th>Результат</th>\r\n\t\t\t<th>Пояснение</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[0]</code></td>\r\n\t\t\t<td>E</td>\r\n\t\t\t<td>Первый символ строки</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[1]</code></td>\r\n\t\t\t<td>i</td>\r\n\t\t\t<td>второй символ строки</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[2]</code></td>\r\n\t\t\t<td>d</td>\r\n\t\t\t<td>третий символ строки</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[3]</code></td>\r\n\t\t\t<td>o</td>\r\n\t\t\t<td>четвёртый символ строки</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[4]</code></td>\r\n\t\t\t<td>s</td>\r\n\t\t\t<td>пятый символ строки</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Так же можно использовать отрицательные индексы, которые позволяют обращаться к символам с конца строки. Например, <code>-1</code> соответствует последнему символу.</p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon - 2025-01-13T170244.410.png\" src=\"https://ucarecdn.com/fa7dac1e-32c8-4e35-a45e-cb7499180c09/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><code>text = \"Eidos\"</code></p>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Выражение</th>\r\n\t\t\t<th>Результат</th>\r\n\t\t\t<th>Пояснение</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[-5]</code></td>\r\n\t\t\t<td>E</td>\r\n\t\t\t<td>Первый символ строки</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[-4]</code></td>\r\n\t\t\t<td>i</td>\r\n\t\t\t<td>Второй символ строки</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[-3]</code></td>\r\n\t\t\t<td>d</td>\r\n\t\t\t<td>Третий символ строки</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[-2]</code></td>\r\n\t\t\t<td>o</td>\r\n\t\t\t<td>Четвёртый символ строки</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td><code>text[-1]</code></td>\r\n\t\t\t<td>s</td>\r\n\t\t\t<td>Пятый символ строки</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<h2 style=\"text-align:center;\">&nbsp;</h2>\r\n\r\n<h2 style=\"text-align:center;\">&nbsp;</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table align=\"left\" border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:100%;\">\r\n\t<thead>\r\n\t\t<tr>\r\n\t\t\t<th>Положительные индексы</th>\r\n\t\t\t<th>0</th>\r\n\t\t\t<th>1</th>\r\n\t\t\t<th>2</th>\r\n\t\t\t<th>3</th>\r\n\t\t\t<th>4</th>\r\n\t\t</tr>\r\n\t</thead>\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center;\"><strong>Строка</strong></td>\r\n\t\t\t<td style=\"text-align:center;\">E</td>\r\n\t\t\t<td style=\"text-align:center;\">i</td>\r\n\t\t\t<td style=\"text-align:center;\">d</td>\r\n\t\t\t<td style=\"text-align:center;\">o</td>\r\n\t\t\t<td style=\"text-align:center;\">s</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center;\"><strong>Отрицательные индексы</strong></td>\r\n\t\t\t<td style=\"text-align:center;\"><strong>-5</strong></td>\r\n\t\t\t<td style=\"text-align:center;\"><strong>-4</strong></td>\r\n\t\t\t<td style=\"text-align:center;\"><strong>-3</strong></td>\r\n\t\t\t<td style=\"text-align:center;\"><strong>-2</strong></td>\r\n\t\t\t<td style=\"text-align:center;\"><strong>-1</strong></td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Срезы Строк</h2>\r\n\r\n<p>Срезы позволяют извлекать подстрочки из строки, указывая на начальный и конечный индексы. Конечный индекс не включается в результат.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon - 2025-01-13T174800.651.png\" src=\"https://ucarecdn.com/0cb9c0a9-4b4d-431e-8521-1aa44874424e/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon - 2025-01-13T172050.274.png\" src=\"https://ucarecdn.com/c78ccf1c-7067-4980-850e-8bd88e8d405c/\" width=\"2316\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Пример:</strong></p>\r\n\r\n<p><img alt=\"\" height=\"1118\" name=\"carbon - 2025-01-13T172025.591.png\" src=\"https://ucarecdn.com/703068d8-b1e8-4c8c-9354-aab500576de1/\" width=\"2316\"></p>\r\n\r\n<p>Причем всегда при использовании срезов вида: <code>[num:num]</code> - где <code>num</code> - произвольный индекс, первый индекс всегда включительно, а второй всегда не включительно. Помните об этом</p>\r\n\r\n<h2 style=\"text-align:center;\">Шаги в срезах</h2>\r\n\r\n<p>Можно также указать шаг, который определяет, как часто берутся элементы из строки. По умолчанию шаг равен <code>1</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"232\" name=\"carbon - 2025-01-13T172156.164.png\" src=\"https://ucarecdn.com/969b1a33-ecd8-449f-92c8-a3750a42ef2f/\" width=\"2316\"></p>\r\n\r\n<p><strong>Пример:</strong></p>\r\n\r\n<p><img alt=\"\" height=\"528\" name=\"carbon - 2025-01-13T172305.985.png\" src=\"https://ucarecdn.com/ffa5ea21-afbc-40ef-9091-44d114ea7d2e/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon - 2025-01-13T174631.204.png\" src=\"https://ucarecdn.com/65927589-fe36-4f6b-b261-cdd4bef5b79a/\" width=\"2316\"></p>\r\n\r\n<p><img alt=\"\" height=\"454\" name=\"carbon - 2025-01-13T175651.247.png\" src=\"https://ucarecdn.com/de83588f-e645-4582-a549-2cb5768af8a0/\" width=\"2316\"></p>\r\n\r\n<h2>Резюме:</h2>\r\n\r\n<p>Индексация и срезы являются мощными инструментами в Python, которые значительно упрощают работу с последовательностями. Освоение этих концепций откроет новые возможности для обработки данных и разработки более эффективных алгоритмов. Теперь предлагаю закрепить пройденный материал на практике.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 27,
  "fields": {
    "topic": 28,
    "type": "text",
    "title": "Урок по методам строк в Python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Урок по методам строк в Python&nbsp;</h1>\r\n\r\n<h2>Цели урока</h2>\r\n\r\n<ul>\r\n\t<li>Познакомиться с основными методами строк в <code>Python</code>.</li>\r\n\t<li>Научиться применять методы для обработки и манипуляции строками.</li>\r\n\t<li>Понять, как методы работают с неизменяемыми строками.</li>\r\n</ul>\r\n\r\n<p><strong>Введение в методы строк</strong></p>\r\n\r\n<p><strong>Методы строк</strong> -&nbsp;это функции, которые связаны с объектами строк и могут использоваться для выполнения различных операций над ними. Поскольку строки в <code>Python</code> являются неизменяемыми, методы не изменяют исходную строку, а возвращают новую строку с примененными изменениями.</p>\r\n\r\n<p><strong>Пример вызова метода:</strong></p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon - 2025-01-13T183253.401.png\" src=\"https://ucarecdn.com/b16a534e-851e-4e94-b3db-4860cff86b25/\" width=\"2316\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Основные методы строк</h2>\r\n\r\n<p><code><strong>len()</strong></code><strong> -&nbsp;&nbsp;</strong>Возвращает длину строки(количество символов)</p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon - 2025-01-13T183727.649.png\" src=\"https://ucarecdn.com/b8d55234-b989-49a9-a39f-5e67bd47b8bc/\" width=\"2316\"></p>\r\n\r\n<p><code><strong>upper()</strong></code> и <code><strong>lower()</strong></code> - преобразует строку в верхний и нижний регистр соответственно.</p>\r\n\r\n<p><img alt=\"\" height=\"380\" name=\"carbon - 2025-01-13T185320.510.png\" src=\"https://ucarecdn.com/0650e93d-06a4-4c0f-813b-d8f959f45a68/\" width=\"2316\"></p>\r\n\r\n<p><code><strong>strip()</strong></code> - удаляет пробелы в начале и в конце строки.</p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon - 2025-01-13T185418.364.png\" src=\"https://ucarecdn.com/ae5f7235-6096-45dc-beae-258da92b1fe2/\" width=\"2316\"></p>\r\n\r\n<p><code><strong>replace(old, new)</strong></code> - Заменяет все вхождения строки old на new.</p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon - 2025-01-13T190216.630.png\" src=\"https://ucarecdn.com/cdee1591-c59f-48c0-bf31-500bb95912bb/\" width=\"2316\"></p>\r\n\r\n<p><strong><code>find(substring)</code></strong> - Возвращает индекс первого вхождения подстроки \"substring\". Если подстрока не найдена, возвращает -1.</p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon - 2025-01-13T190611.697.png\" src=\"https://ucarecdn.com/23f41426-8a94-489b-998a-ad9955ae3a46/\" width=\"2316\"></p>\r\n\r\n<p><strong><code>count(substring)</code></strong> - Возвращает количество вхождений подстроки \"substring\" в строке.</p>\r\n\r\n<p><img alt=\"\" height=\"306\" name=\"carbon - 2025-01-13T190752.054.png\" src=\"https://ucarecdn.com/73dbedb8-7f51-4dec-9bbc-d2bd3a0590cf/\" width=\"2316\"></p>\r\n\r\n<p><strong><code>capitalize()</code></strong> - Возвращает новую строку, в которой первый символ преобразован в верхний регистр, а все остальные символы — в нижний регистр.</p>\r\n\r\n<p><img alt=\"\" height=\"340\" name=\"carbon - 2025-01-13T191039.521.png\" src=\"https://ucarecdn.com/fd1a1ef0-0dc5-4e67-9405-c4b5f76c3634/\" width=\"2316\"></p>\r\n\r\n<p><strong><code>title()</code></strong> -&nbsp;Преобразует первую букву каждого слова в верхний регистр.</p>\r\n\r\n<p><img alt=\"\" height=\"340\" name=\"carbon - 2025-01-13T191256.639.png\" src=\"https://ucarecdn.com/7eaa597c-3b06-4197-94b0-eb428856f94d/\" width=\"2316\"></p>\r\n\r\n<p><strong><code>startswith(prefix)</code></strong> -&nbsp;Проверяет, начинается ли строка с указанного префикса.</p>\r\n\r\n<p><img alt=\"\" height=\"414\" name=\"carbon - 2025-01-13T192150.647.png\" src=\"https://ucarecdn.com/f0e6c6b9-d6cd-4c8c-8bc0-5f022f93d87f/\" width=\"2316\"></p>\r\n\r\n<p><strong><code>endswith(suffix)</code></strong> -&nbsp;Проверяет, заканчивается ли строка на указанный суффикс.</p>\r\n\r\n<p><img alt=\"\" height=\"414\" name=\"carbon - 2025-01-13T192309.190.png\" src=\"https://ucarecdn.com/43598ff2-49af-4ee8-8642-7756234e568c/\" width=\"2316\"></p>\r\n\r\n<p>Методов намного больше. Их суть будем изучать на практике на протяжении следующих курсов</p>\r\n\r\n<h2><strong>Резюме:</strong></h2>\r\n\r\n<p>В данном уроке вы познакомились с основными методами строк, по мере углубления в изучения <code>Python</code> вы ещё ознакомитесь с дополнительными методами, которые упрощают форматирование строк, но об этом позже. А пока можете приступить к практической части урока.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 28,
  "fields": {
    "topic": 29,
    "type": "text",
    "title": "While",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Много различных конструкций мы уже изучили в нашем начальном курсе на Python разработчика. Мы смогли разобраться с различными типами данных, на практике поработали с условными операторами и познакомились детальней с методами работы со строками. Последнее, о чем бы нам хотелось вам рассказать в этом курсе - очень важная конструкция языка python и не только - циклы. После работы с ними вы мало того, что еще лучше поймете, как тут все устроено, так еще и соберете полный базовый пакет для работы с какими - то данными в повседневной жизни, так еще и полностью будете готовы к нашему следующему курсу, который будет не только больше, но и интересней. Вы познакомитесь с еще большим количеством различных типов данных, начнете писать свои собственные функции и научитесь делать так, что вы сможете использовать их в другом своем коде. (На примере того, как мы брали чужой код для вычислений в модуле <code>math (урок 3.6)</code>) Но для того, чтобы полностью закрыть эту часть, необходимо еще чуть дожать, полностью изучив, как работают циклы.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Цели урока:</h2>\r\n\r\n<p>В этом уроке мы обсудим одну из самых важных конструкций Python — циклы, начиная с цикла <code>while</code>. Циклы позволяют многократно повторять код, пока выполняется условие.</p>\r\n\r\n<h2 style=\"text-align:center;\">Цикл while | Первый цикл</h2>\r\n\r\n<p>Начнем с того что цикл - возможность повторять код некоторое количество раз. Причем количество, сколько именно раз будет повторяться цикл определяется наличием его условия. Пока условие истинно, код будет повторяться большое количество раз. Сейчас разберем подробней и все станет понятно.<img alt=\"\" height=\"292\" name=\"carbon - 2025-01-14T034110.810.png\" src=\"https://ucarecdn.com/db9b090c-08e9-4618-bc4d-36d889bc6c42/\" width=\"2560\">Отсюда видно, что после зарезервированного слова while идет выражение, возвращающее True или False. Пока условие возвращает True блок кода будет повторяться столько же раз.&nbsp;</p>\r\n\r\n<p><em>Приведем пример:</em><img alt=\"\" height=\"330\" name=\"carbon - 2025-01-14T034423.315.png\" src=\"https://ucarecdn.com/47e3805b-5d9d-422b-85f3-8d518e508577/\" width=\"2560\">Попробуйте предположить, сколько раз надпись в print() выведется на экран? 1, 10, 15? Дело в том, что внутри цикла ничего не меняется, просто выводится надпись, поэтому из - за того, что условие не меняется и всегда возвращает True, код цикла будет выводиться бесконечное количество раз.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"327\" name=\"image.png\" src=\"https://ucarecdn.com/b5cac1dd-8c44-45b5-a49e-72f3e14534f2/\" width=\"245\"></p>\r\n\r\n<p><em>В то время как цикл:</em><img alt=\"\" height=\"330\" name=\"carbon - 2025-01-14T034847.009.png\" src=\"https://ucarecdn.com/f2167500-b7b7-417b-95b5-9720951e2f61/\" width=\"2560\"></p>\r\n\r\n<p>Не запустится вообще, так как условие изначально возвращает False и код не выполняется.</p>\r\n\r\n<p>Именно поэтому, как правило, цикл можно остановить либо изменением выражения с True на False по мере выполнения программы, либо же специальными командами о которых мы расскажем чуть позже. Пока достаточно просто запомнить вот такую конструкцию и осознать, как она работает. Один круг цикла кстати называют <strong>итерацией</strong></p>\r\n\r\n<p style=\"text-align:center;\"><em>Рассмотрим пример цикла, который рано или поздно уже остановится, по мере изменения условия.</em></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"370\" name=\"carbon - 2025-01-14T035351.720.png\" src=\"https://ucarecdn.com/3374d576-c207-48e3-aa9b-4ece78380980/\" width=\"2560\"></p>\r\n\r\n<p>Теперь уже цикл имеет иной характер. Условие рано или поздно выбросит False и прекратит выполнение цикла по кругу.</p>\r\n\r\n<p>Такой код выведет:&nbsp;<img alt=\"\" height=\"145\" name=\"image.png\" src=\"https://ucarecdn.com/998e44d4-c438-4495-987e-c90051a6c608/\" width=\"365\">&nbsp;Мы безусловно сейчас закрепим все на практике, однако опробуйте сами разобраться, как работает цикл while на практических примерах у себя в редакторах кода. Количество итераций - 4, так как цикл прошелся 4 раза&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Условия в цикле while</h2>\r\n\r\n<p>Также внутри циклов можно использовать вложенные условия, подобно обычным вложенным условиям (складывая пробелы, создавая вложенность):&nbsp;<img alt=\"\" height=\"488\" name=\"carbon - 2025-01-14T040142.285.png\" src=\"https://ucarecdn.com/5b2ccfc0-ed6b-42d8-8f23-9a5b20ec2317/\" width=\"2560\">Эта программа вычисления всех делителей числа. Она проходится по всем числам от 1 до number и выводит все числа, которые при вычислении остатка деления number на i дают ответ 0 (то есть те, которые делятся без остатка)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Другой пример:&nbsp;<img alt=\"\" height=\"646\" name=\"carbon - 2025-01-14T040941.931.png\" src=\"https://ucarecdn.com/d774351b-5e5d-493c-b13e-b280b3171720/\" width=\"2560\">Тут <code>i</code> является индексом строки, что позволяет нам автоматически проходиться по каждому символу строки.&nbsp;</p>\r\n\r\n<p style=\"text-align:center;\">Но неужели никак нельзя управлять поведением цикла и он будет выполняться до тех пор, пока условие не сменит состояние и нельзя ничего сделать внутри? Некоторые вещи сделать все таки можно, о них мы сейчас поговорим.</p>\r\n\r\n<h2 style=\"text-align:center;\"><br>\r\nОператоры break, continue</h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Оператор break</h2>\r\n\r\n<p>Что касается самих операторов, они призваны служить некими ограничителями цикла. Только первый в случае, если до него доходит код полностью заканчивает цикл, а второй заканчивает только итерацию и приступает к следующей. Приведем простые примеры, а затем сразу приступим к выполнению заданий:&nbsp;<img alt=\"\" height=\"450\" name=\"carbon - 2025-01-14T044321.726.png\" src=\"https://ucarecdn.com/291b06c6-fa49-45d5-a138-c333f35c0979/\" width=\"2560\">Таким образом. Можно заканчивать цикл раньше, если того требует программа. Такой код выведет:&nbsp;<img alt=\"\" height=\"300\" name=\"image.png\" src=\"https://ucarecdn.com/28f98999-f7e4-48dd-9590-ab41b2da0377/\" width=\"214\">И закончит выполнение цикла.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Оператор continue</h2>\r\n\r\n<p>С оператором continue происходит практически то же самое, только действует он чуть <em><strong>легче.&nbsp;</strong></em>В то время, как break полностью заканчивает выполнение цикла, continue просто заканчивает его итерацию.<img alt=\"\" height=\"568\" name=\"carbon - 2025-01-14T045453.269.png\" src=\"https://ucarecdn.com/f89d9808-d104-4d82-aedd-a83605811ced/\" width=\"2560\"></p>\r\n\r\n<p>Такой код выведет:&nbsp;<img alt=\"\" height=\"203\" name=\"image.png\" src=\"https://ucarecdn.com/909176e5-c982-48cb-986f-88c44cfeeada/\" width=\"1239\"></p>\r\n\r\n<p>Видите? Число 7 было пропущено. Таким образом continue помогает нам избежать ненужных итераций и действий программы когда нам это необходимо.</p>\r\n\r\n<p>Рассмотрим последний пример и переходим к практике:&nbsp;<img alt=\"\" height=\"450\" name=\"carbon - 2025-01-14T044626.759.png\" src=\"https://ucarecdn.com/1d92b193-cc62-4db1-9efb-4d429bb27d10/\" width=\"2560\">Внимательно посмотрите и попробуйте выявить, что будет делать данный код, сколько итераций в нем будет.&nbsp;</p>\r\n\r\n<p>Цикл будет бесконечен. Попробуйте прокрутить цикл у себя в голове и в редакторе кода и понять, почему. А мы пока расскажем:</p>\r\n\r\n<p>Дело в том, что пока программа не дойдет до 7, она будет работать в штатном режиме. Код будет выполняться, переменная повышаться на 1 и проверяться заново. Но, когда она все - таки дойдет до 7, то программа начнет внутреннюю проверку и после того, как увидит, что <code>number == 7</code>&nbsp;cвернет итерацию и вернется опять в начало. Но ведь цифра все так же будет 7 ведь итерация закончилась прежде, чем цикл успел прибавить к числу 1 для следующего прохода. Таким образом программа допишет числа от 0 до 7 и просто будет выводить одну и ту же строку бесконечное количество раз.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Таким образом, цикл <code>while</code> является мощным инструментом для выполнения повторяющихся действий, пока выполняется заданное условие. Он используется, когда количество итераций заранее неизвестно, и условие выхода зависит от динамически изменяющихся данных. Важно помнить о необходимости изменения состояния, участвующего в условии, чтобы избежать бесконечных циклов.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 29,
  "fields": {
    "topic": 30,
    "type": "text",
    "title": "for",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Раньше мы говорили об одном виде циклов, который помогал нам выполнять одну и ту же задачу с немного постоянно изменяющимися входными данными. Сегодня же мы поговорим про примерно такую же возможность python, однако на наш взгляд, довольно более практичную в применении в языке python.</p>\r\n\r\n<p>В Python циклы позволяют нам многократно выполнять один и тот же блок кода, что особенно удобно при работе с последовательностями данных. Сегодня мы рассмотрим цикл <code>for</code> — один из самых полезных инструментов в Python. Цикл <code>for</code> часто используется для итерации по элементам коллекций, таких как списки, строки или диапазоны чисел. Мы разберемся, как использовать цикл <code>for</code>, а также познакомимся с функцией <code>range()</code> и увидим её применение на практике.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Цикл for</h2>\r\n\r\n<p>Начнем с того, что данные 2 типа циклов: <code>for\\while</code> очень сильно похожи, просто имеют разные подходы своего выполнения. В то время, когда цикл <code>while</code> выполняет какой - либо блок кода, пока условие истинно, цикл <code>for</code>, как правило, применяется для работы с последовательностями и как правило, такой подход очень удобен и применяется для различных интересных задач.</p>\r\n\r\n<p>Сначала мы покажем, как использовать цикл <code>for</code> для своих целей, а затем покажем, как использовать вместо уже привычного нам цикла <code>while.</code></p>\r\n\r\n<h2>Синтаксис</h2>\r\n\r\n<p>Начнем с синтаксиса языка. Записывается очень просто<img alt=\"\" height=\"292\" name=\"carbon - 2025-01-14T055135.111.png\" src=\"https://ucarecdn.com/27f8b4f4-7619-41da-a395-475ec076d8d0/\" width=\"2560\">цикл фор всегда принимает на вход какую - то последовательность и работает с ее данными. Давайте попробуем разобрать именно практический пример.<img alt=\"\" height=\"410\" name=\"carbon - 2025-01-14T055416.910.png\" src=\"https://ucarecdn.com/8aa0d235-8da0-4311-b953-63373ac1f317/\" width=\"2560\">Иными словами, переменная i с каждым проходом цикла будет равняться следующему элементу последовательности. То есть на первую итерацию <code>i = 'a'</code> далее<code> i = 'b', i='c'</code> и так далее.</p>\r\n\r\n<p>Таким поведением очень удобно управлять при работе с строками. В будущем использование цикла for станет основой программирования, так как работа с коллекциями и другими типами данных - основная идея нашего следующего курса.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Функция range()</h2>\r\n\r\n<p>Как мы уже сказали, цикл for работает с последовательностями, где каждый проход цикла переменная принимает в себя одно из значений той же последовательности. Строка - последовательность символов, но как же быть с числами? Неужели, если нужно выполнить цикл определенное количество раз, нам нужно считать количество букв в строке? : ) Нет. Для того чтобы создать последовательность именно <code>int</code> цифр можно использовать функцию <code>range()</code> причем использовать ее можно по разному.<img alt=\"\" height=\"292\" name=\"carbon - 2025-01-14T060004.054.png\" src=\"https://ucarecdn.com/7482f284-fd63-49c5-886a-5543857faffa/\" width=\"2560\">Теперь попробуем использовать такую функцию в цикле for.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"292\" name=\"carbon - 2025-01-14T060221.470.png\" src=\"https://ucarecdn.com/51e5222f-cb45-49e6-b64a-e424685fe7e8/\" width=\"2560\">Ниже представлены строки последовательностей, которые python создает для себя, чтобы работать с числами в цикле</p>\r\n\r\n<p><img alt=\"\" height=\"528\" name=\"carbon - 2025-01-14T060614.737.png\" src=\"https://ucarecdn.com/4f6d2e84-f7fc-40fe-8c42-69d7428e681b/\" width=\"2560\">Давайте порешаем задачи:&nbsp;</p>\r\n\r\n<h3>1. Найдите все числа от 0 до введенного числа, которые делятся и на 2 и на 3 без остатка и выведите их на экран числа и их количество.</h3>\r\n\r\n<p><img alt=\"\" height=\"568\" name=\"carbon - 2025-01-14T061310.136.png\" src=\"https://ucarecdn.com/e35b5890-e90b-4403-ab79-ba5220b152b2/\" width=\"2560\"></p>\r\n\r\n<p>Если мы напишем число 100 программа пройдет по всем числам от 1 до 100 и с каждым проработает итерацию: Вывод</p>\r\n\r\n<p><img alt=\"\" height=\"71\" name=\"image.png\" src=\"https://ucarecdn.com/8351537e-cf6c-4e81-9564-7daf9978d087/\" width=\"911\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>2. Найти все делители введенного пользователем числа.&nbsp;</strong><img alt=\"\" height=\"410\" name=\"carbon - 2025-01-14T061652.710.png\" src=\"https://ucarecdn.com/4605f304-806a-41aa-b063-6c935005ad5e/\" width=\"2560\"></h2>\r\n\r\n<p><strong>Давайте также поработаем и с задачей на строки.</strong></p>\r\n\r\n<h2><strong>Выведите строку на английском языке без гласных букв</strong></h2>\r\n\r\n<p><img alt=\"\" height=\"608\" name=\"carbon - 2025-01-14T062259.407.png\" src=\"https://ucarecdn.com/933c8f0a-1827-4add-807d-375588e3316f/\" width=\"2560\"></p>\r\n\r\n<h4>Ну, пока все. Хочется отметить, что разработчики всегда на связи и готовы отметить на любой комментарий. Мы понимаем, что информации может быть недостаточно, а задач, чтобы в полной мере понять - тем более. Мы будем дополнять курс и брать во внимание каждый ваш фидбэк. Поэтому мы и оставляем опросы после каждого модуля для лучшего обновления курса. Теперь давайте сначала разберемся в <code>range()</code> и пойдем решать кучу задач по циклам.</h4>"
  }
},
{
  "model": "courses.content",
  "pk": 30,
  "fields": {
    "topic": 31,
    "type": "text",
    "title": "Поздравление",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h3>Поздравляем! 🎉</h3>\r\n\r\n<p>Вы успешно завершили первый курс по Python! 🚀</p>\r\n\r\n<p>Это было увлекательное путешествие в мир программирования, где вы:</p>\r\n\r\n<ul>\r\n\t<li>Изучили основы синтаксиса Python.</li>\r\n\t<li>Освоили переменные, типы данных и операции.</li>\r\n\t<li>Научились работать с условными операторами и циклами.</li>\r\n\t<li>Попробовали свои силы в написании программ и решении задач.</li>\r\n</ul>\r\n\r\n<p>Ваш прогресс — это отличный старт для дальнейшего изучения программирования. Теперь перед вами открыты двери в мир сложных алгоритмов, работы с данными, веб-разработки, автоматизации задач и многого другого.</p>\r\n\r\n<p>Помните: практика — ключ к успеху. Чем больше вы будете кодить, тем увереннее будете чувствовать себя как программист.</p>\r\n\r\n<p>Мы рады сообщить, что практически завершили разработку нового курса, который по желанию может стать следующим этапом вашего пути в программировании на Python! 🎉</p>\r\n\r\n<p>В новом курсе мы глубже разберем работу с различными типами данных в Python. Особое внимание будет уделено <strong>коллекциям</strong>, которые являются важной частью программирования.</p>\r\n\r\n<p>Вы узнаете, что такое:</p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><strong>Списки (<code>list</code>)</strong></p>\r\n\r\n\t<ul>\r\n\t\t<li>Хранение последовательностей элементов.</li>\r\n\t\t<li>Методы работы со списками: добавление, удаление, сортировка, фильтрация.</li>\r\n\t\t<li>Генераторы списков для лаконичной записи.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Кортежи (<code>tuple</code>)</strong></p>\r\n\r\n\t<ul>\r\n\t\t<li>Неизменяемые последовательности.</li>\r\n\t\t<li>Использование кортежей для защиты данных от изменений.</li>\r\n\t\t<li>Распаковка кортежей в переменные.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Множества (<code>set</code>)</strong></p>\r\n\r\n\t<ul>\r\n\t\t<li>Хранение уникальных элементов.</li>\r\n\t\t<li>Операции над множествами: объединение, пересечение, разность.</li>\r\n\t\t<li>Примеры использования множеств для фильтрации данных.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Словари (<code>dict</code>)</strong></p>\r\n\r\n\t<ul>\r\n\t\t<li>Хранение пар \"ключ-значение\".</li>\r\n\t\t<li>Эффективный поиск и обновление данных.</li>\r\n\t\t<li>Перебор ключей, значений и их сочетаний.</li>\r\n\t</ul>\r\n\t</li>\r\n</ul>\r\n\r\n<ul>\r\n\t<li>Работа с файлами и потоками данных.</li>\r\n\t<li>Модули и пакеты: как создавать и организовывать крупные проекты.</li>\r\n\t<li>Обработка исключений и управление ошибками.</li>\r\n\t<li>Функциональное программирование и работа с генераторами.</li>\r\n</ul>\r\n\r\n<p>Новый курс будет полон практических задач, реальных примеров и интересных проектов, которые помогут вам стать настоящим профессионалом в программировании.</p>\r\n\r\n<p>Мы верим, что он станет мощным инструментом на пути вашего карьерного роста или просто откроет новые возможности в IT!</p>\r\n\r\n<p>Следите за обновлениями — скоро курс будет доступен! 😊</p>"
  }
},
{
  "model": "courses.content",
  "pk": 31,
  "fields": {
    "topic": 32,
    "type": "text",
    "title": "Что делать дальше?",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Теперь, когда вы завершили первый этап нашего курса и освоили основные принципы программирования на Python, пришло время для следующего шага! Мы уже подготовили для вас новый курс, где мы углубимся в <strong>продвинутые темы</strong>. В этом курсе вы познакомитесь с более сложными концепциями, такими как работа с коллекциями данных, обработка исключений, создание собственных модулей и библиотек, а также освоите важные инструменты для разработки реальных проектов.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 32,
  "fields": {
    "topic": 33,
    "type": "text",
    "title": "Планы",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Мы рады сообщить, что активно разрабатываем <strong>следующий курс</strong>, который станет логичным продолжением вашего обучения. Этот курс будет охватывать более сложные темы и подходы, а также предложит вам <strong>новые инструменты</strong> и <strong>техники</strong>, которые повысят вашу экспертизу в Python.</p>\r\n\r\n<p>Кроме того, мы готовим <strong>огромный задачник</strong> с <strong>более чем 500 задачами</strong>, который будет включать как задачи для <strong>полностью начинающих</strong>, так и для тех, кто уже освоил основы программирования. В задачнике вы найдете задания, которые помогут вам закрепить теоретические знания, улучшить навыки решения алгоритмических задач, а также научиться создавать реальные проекты с нуля.</p>\r\n\r\n<p>Каждая задача будет тщательно продумана, чтобы помочь вам эффективно освоить материал и научиться применять знания в реальных условиях. Мы уверены, что такой подход даст вам возможность почувствовать себя уверенно на любом уровне — от новичка до более опытного программиста.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 33,
  "fields": {
    "topic": 34,
    "type": "text",
    "title": "Прошли прошлый курс?",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Добро пожаловать на второй курс нашей образовательной линейки, посвящённой продвинутому изучению Python!</p>\r\n\r\n<p>Этот курс предназначен для тех, кто уже освоил основы языка и готов идти дальше. Мы предполагаем, что у вас есть базовые знания Python, включая:</p>\r\n\r\n<ul>\r\n\t<li>Основы синтаксиса языка, работа с переменными, типами данных и операторами;</li>\r\n\t<li>Умение использовать стандартные конструкции условные, зацикленные и так далее;</li>\r\n\t<li>Опыт работы с основными структурами данных, такими как числа(различного рода) и строки.</li>\r\n</ul>\r\n\r\n<p>Теперь мы готовы углубиться в немного более сложные темы, такие как:</p>\r\n\r\n<ul>\r\n\t<li>Коллекционные типы данных;</li>\r\n\t<li>Работа с библиотеками;</li>\r\n\t<li>Функциональное программирование.</li>\r\n</ul>\r\n\r\n<p>Также, хотелось бы отметить, что курс нацелен на изучение базовой части более трудных понятий Python. Мы разберём более продвинутые (по сравнению с первым курсом) ключевые концепции. Однако, если вам нужно более глубокое развитие различных аспектов кода, мы предлагаем отдельный курс, в котором мы проходим 50 задач с LeetCode. Это отличный способ развить алгоритмическое мышление и укрепить навыки программирования. Каждая строчка кода будет разобрана и вы увидите самые различные методы решения различных трудных задач. Это поможет прикладным товарищам лучше понять различные конструкции, в то время как проф - ориентированные ребята получат опыт в написании задач и смогут лучше подготовиться к собеседованиям, тестам и экзаменам по информатике и так далее.</p>\r\n\r\n<p>Этот курс подготовит вас к более сложным задачам, даст практические инструменты для разработки сложных приложений и улучшит ваши навыки работы с Python на чуть более глубоком уровне.</p>\r\n\r\n<p>Это второй курс, который заходит немного дальше от первого.</p>\r\n\r\n<p>Желаем вам успешного обучения и надеемся, что курс будет интересным и полезным для вашего развития!</p>"
  }
},
{
  "model": "courses.content",
  "pk": 34,
  "fields": {
    "topic": 35,
    "type": "text",
    "title": "Для кого двух курсов хватит?",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Этот курс является <strong>вторым из четырёх</strong> в нашей образовательной линейке по Python \"С нуля до Junior\". Он нацелен на изучение <strong>базовой части более сложных понятий</strong> языка. Однако стоит отметить, что курс <strong>не ориентирован на профессиональное использование Python</strong>. Этим мы будем заниматься в третьей части линейки. Сейчас цель дать всю необходимую базу тем, кто не хочет идти в профессиональную разработку (например - школьникам). Следующий же курс будет самым полномасштабным и будет нацелен именно на профессиональную разработку в котором мы подготовим вас к собеседованию на работу. Расскажем что нужно и поможем. Что касается этого курса - это отличное введение в более сложные темы для тех, кто не планирует использовать язык на профессиональном уровне, но хочет углубить свои знания и лучше разбираться в более трудных аспектах и для тех, кто готов двигаться к профессии Python разработчика и не останавливаться на этом курсе.</p>\r\n\r\n<p>Также для тех, кто хочет развивать свои навыки программирования на более серьёзном уровне, мы рекомендуем пройти отдельный курс, в котором мы решаем <strong>50 задач с LeetCode</strong>, что позволяет развить алгоритмическое мышление и подготовиться к более сложным задачам.</p>\r\n\r\n<p><strong>Спасибо, что выбрали наш курс!</strong> Желаем вам успешного обучения и дальнейших успехов!</p>"
  }
},
{
  "model": "courses.content",
  "pk": 35,
  "fields": {
    "topic": 36,
    "type": "text",
    "title": "Спасибо",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Спасибо. Удачи в обучении!</p>"
  }
},
{
  "model": "courses.content",
  "pk": 36,
  "fields": {
    "topic": 37,
    "type": "text",
    "title": "Введение в списки",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Введение в списки</h2>\r\n\r\n<p>Начнем с того, что списки - очень популярный и часто используемый тип данных в python. На практике очень удобны и, честно говоря, <code>python</code> без списков представить довольно сложновато.</p>\r\n\r\n<p>Списки - упорядоченная коллекция данных, которая может хранить в себе элементы либо одного типа данных, либо нескольких и методы работы с ними не изменятся.</p>\r\n\r\n<h4>Основные характеристики списков:</h4>\r\n\r\n<p><strong>Изменяемость</strong>: Вы можете изменять элементы списка после его создания (добавлять, удалять, изменять).</p>\r\n\r\n<p><strong>Упорядоченность</strong>: Порядок элементов в списке сохраняется.&nbsp;</p>\r\n\r\n<p><strong>Гетерогенность</strong>: Список может содержать элементы разных типов данных.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>Cинтаксис</strong></h2>\r\n\r\n<p>Что касается синтаксиса, то чтобы создать список необходимо просто оформить какие - то данные, перечисляемые через запятую внутри квадратных скобок или с помощью функции <code>list()</code></p>\r\n\r\n<p><img alt=\"\" height=\"726\" name=\"carbon - 2025-01-26T120749.564.png\" src=\"https://ucarecdn.com/676bfd5b-d222-47f9-b952-5171d41472a1/\" width=\"2560\"></p>\r\n\r\n<p style=\"text-align:center;\">Также стоит знать, что списки могут принимать и хранить в себе различные типы данных.<img alt=\"\" height=\"252\" name=\"carbon - 2025-01-26T121000.539.png\" src=\"https://ucarecdn.com/eb4d4f35-1639-4a2b-96c2-2a5ee1d46110/\" width=\"2560\"></p>\r\n\r\n<p>Таким образом <code>list()</code> применяется для того, чтобы создать список из различных элементов объекта, в то время как квадратные <code><strong>[]</strong></code> скобки применяются для явного указания определённых различных объектов.</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>Индексация списков</strong></h2>\r\n\r\n<p>Мы не зря упомянули, что списки сохраняют порядок элементов и не перемешивают его во время исполнения программы, так как существует тип данных (о котором мы поговорим в следующих модулях) который перемешивает порядок содержимого внутри него. Из - за того, что списки <strong>упорядоченны,&nbsp;</strong>мы можем обращаться по их индексу по мере того, как мы делали со строками. И тут нет практически никакой разницы. Вот только есть одна особенность. Разберем ее подробней.<img alt=\"\" height=\"508\" name=\"carbon - 2025-01-26T121817.856.png\" src=\"https://ucarecdn.com/eac7b3b0-89e9-4d21-a732-ed2257cff106/\" width=\"2560\">Текущий код отлично показывает способность python индексировать списки и в будущем мы разберем некоторые задачи, связанные с индексацией, так как такая конструкция позволяет нам очень легко обращаться к запоминаемым элементам данных</p>\r\n\r\n<p>Что касается особенности:&nbsp;<img alt=\"\" height=\"628\" name=\"carbon - 2025-01-26T122612.924.png\" src=\"https://ucarecdn.com/2a6f29b5-08ab-41d8-a079-b7e6b28aa32b/\" width=\"2560\">Отсюда видно что python позволяет нам <strong>\"добираться\" </strong>до необходимых нам значений используя уровни вложенности</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>Изменение элементов списка</strong></h2>\r\n\r\n<p>Также в python можно изменять значения внутри списков, обращаясь по их индексу. То есть текущий код:&nbsp;<img alt=\"\" height=\"350\" name=\"carbon - 2025-01-26T123247.326.png\" src=\"https://ucarecdn.com/63068b1f-0922-42f7-b0bc-90a3ce9fc453/\" width=\"2560\"></p>\r\n\r\n<p>Изменяет последнее значение списка на 6.</p>\r\n\r\n<h2 style=\"text-align:center;\">Повторим изученное</h2>\r\n\r\n<p>Список может содержать различные типы данных и хранить их большое количество в себе</p>\r\n\r\n<p><img alt=\"\" height=\"666\" name=\"carbon - 2025-01-26T122802.942.png\" src=\"https://ucarecdn.com/a080df2f-5fe2-4dbe-90a6-9d4028bd1441/\" width=\"2560\"></p>\r\n\r\n<p>Можно изменить значение списка, обратившись по его индексу. Причем начальное значение удалится (не сместится!)</p>\r\n\r\n<p><img alt=\"\" height=\"350\" name=\"carbon - 2025-01-26T122937.611.png\" src=\"https://ucarecdn.com/781c182a-00bf-47b9-8c97-fe9c8fc9c38c/\" width=\"2560\"></p>\r\n\r\n<p>Можно обращаться к вложенной индексации для индексирования какого - либо индекса.</p>\r\n\r\n<p><img alt=\"\" height=\"390\" name=\"carbon - 2025-01-26T124135.582.png\" src=\"https://ucarecdn.com/467336a3-673d-46e7-87aa-03871554239a/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Списки — это мощный инструмент для работы с данными. Они являются основой для более сложных структур данных, таких как словари, множества и классы. Научившись эффективно работать со списками, вы сможете решать широкий круг задач в Python.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 37,
  "fields": {
    "topic": 38,
    "type": "text",
    "title": "Вложенные списки",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>В прошлом уроке мы уже затрагивали тему вложенности некоторых коллекций другими коллекциями. На самом деле, внутри списка может быть другой список. И не один, а 2 и даже больше. Сейчас мы рассмотрим более детально каждый аспект и поймем, как правильно использовать вложенные списки.&nbsp;</p>\r\n\r\n<h3 style=\"text-align:center;\">Введение в вложенные списки</h3>\r\n\r\n<p>Вложенный список — это список, который содержит другие списки как элементы.</p>\r\n\r\n<p><img alt=\"\" height=\"272\" name=\"carbon - 2025-01-26T143358.873.png\" src=\"https://ucarecdn.com/c1cdddce-7545-45cf-81c1-940dc156c435/\" width=\"2560\"></p>\r\n\r\n<p>В этом плане поведение списков практически не ограничено. Разберем различные ситуации.</p>\r\n\r\n<h2 style=\"text-align:center;\">Список внутри списка</h2>\r\n\r\n<p>Начнем с того, что каждый список внутри себя может содержать самые разнообразные типы данных. И другой список - также может являться его частью.</p>\r\n\r\n<p><img alt=\"\" height=\"430\" name=\"carbon - 2025-01-26T141731.288.png\" src=\"https://ucarecdn.com/f7ded6fb-5b84-40a2-b2e8-241703efe160/\" width=\"2560\"></p>\r\n\r\n<p>Также, с помощью вложенной индексации (о которой мы говорили в прошлом уроке) можно достать не только символ какой - то строки внутри списка, но и элемент внутри вложенного списка.</p>\r\n\r\n<p><em><strong>Текущий код:</strong></em></p>\r\n\r\n<p><img alt=\"\" height=\"312\" name=\"carbon - 2025-01-26T142009.629.png\" src=\"https://ucarecdn.com/57b11dc1-2f8c-4ffc-9652-c9bb9a8cd1d4/\" width=\"2560\">Мы надеемся - задачи помогут вам разобраться с темой лучше, ведь практика - лучший способ усвоить и закрепить информацию. Поэтому пожалуйста, указывайте в комментариях возможную неточность в формулировках или недостаточное количество теоретического материала.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>Индексирования списков внутри списка</strong></h2>\r\n\r\n<p>Как мы уже знаем, списки могут хранить внутри себя и другие списки, а значит, что и те списки которые находятся внутри - также могут хранить в себе значения и другие списки. То есть, другими словами, уровней вложенности списка может быть очень много, в зависимости от программы.</p>\r\n\r\n<p><img alt=\"\" height=\"628\" name=\"carbon - 2025-01-26T142918.477.png\" src=\"https://ucarecdn.com/87342610-eeb3-4fef-ab33-7f186ef489d0/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В этом уроке мы более детально рассмотрели концепцию вложенных списков в Python. Мы выяснили, что списки могут содержать в себе другие списки, а также различные типы данных, что позволяет создавать гибкие и мощные структуры для хранения и обработки данных. Мы научились использовать индексацию для доступа к элементам внутри вложенных списков и увидели, как можно работать с несколькими уровнями вложенности.</p>\r\n\r\n<p>Важно понимать, что благодаря этой возможности Python позволяет эффективно работать с многомерными данными и представлять более сложные структуры, такие как матрицы или таблицы (С ними будет проделана колоссальная работа в следующих уроках).</p>\r\n\r\n<p>Задачи, предложенные в уроке, помогут вам закрепить знания и лучше понять, как применять вложенные списки на практике. И, конечно, помните, что каждый уровень вложенности расширяет ваши возможности, но важно правильно организовывать структуру данных для простоты их обработки.</p>\r\n\r\n<p>В следующих уроках мы будем переходить к более сложным концепциям работы с списками и их применению в различных задачах.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 38,
  "fields": {
    "topic": 39,
    "type": "text",
    "title": "Методы изменения списков | append, insert, extend,...",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Мы уже говорили с вами о некоторых методах, применяемых к различным типам данных. В этом уроке мы поработаем именно с методами, которые применимы к спискам.</p>\r\n\r\n<h1 style=\"text-align:center;\">Основные методы списков</h1>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Методы: Увеличение</h2>\r\n\r\n<p>1.<code>append()</code> - добавление элемента в конец списка.</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T134724.292.png\" src=\"https://ucarecdn.com/a5dd3e9c-395c-4ef0-b3fd-c0ebff497a08/\" width=\"1736\"></p>\r\n\r\n<p>Данный метод позволяет добавить передаваемый аргумент в конец списка</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>2.<code>extend()</code> - Расширение списка другим списком или итерируемым объектом.</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T134956.540.png\" src=\"https://ucarecdn.com/637bbdbb-565f-491d-a034-beb148c9a7fd/\" width=\"1736\"></p>\r\n\r\n<p>Кстати, списки можно складывать друг с другом и умножать на числа подобно строкам. Поиграйтесь в IDE и посмотрите, как это работает на практике</p>\r\n\r\n<p>3.<code>insert()</code> - Вставка элемента по индексу.</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T135146.762.png\" src=\"https://ucarecdn.com/159360d6-121f-4ccb-b526-246e36cfa279/\" width=\"1736\"></p>\r\n\r\n<p>Данный элемент не заменяет (подобно индексированной замене, которую мы делали в прошлом уроке) элемент на новый, а как бы \"раздвигает\" список и вставляет туда новое переданное значение.</p>\r\n\r\n<h2>Методы: Поиск</h2>\r\n\r\n<p>4.<code>index()</code> - Получение индекса элемента.</p>\r\n\r\n<p>Возвращает индекс первого найденного элемента с указанным значением. Если элемент не найден, вызывается ошибка.</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T135752.143.png\" src=\"https://ucarecdn.com/83fcb0c6-dfa1-40f7-b9a0-82b952bd7220/\" width=\"1736\"></p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T141053.532.png\" src=\"https://ucarecdn.com/ef91da16-c711-496f-a71b-fbb0c38b136f/\" width=\"1736\"></p>\r\n\r\n<p>Если же вхождений много, функция выдаст результат <strong>только первого </strong>вхождения, остальные проигнорирует.</p>\r\n\r\n<p>5.<code>count()</code> - Подсчёт количества вхождений элемента.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T140004.758.png\" src=\"https://ucarecdn.com/7b8e58ca-515b-43bf-889c-d524a99e9838/\" width=\"1736\"></p>\r\n\r\n<h2>&nbsp;</h2>\r\n\r\n<h2>Методы: Сортировка, обращение, копирование, очистка</h2>\r\n\r\n<p>6.<code>sort()</code> - Сортировка списка.</p>\r\n\r\n<p>Сортирует элементы списка по возрастанию. Можно указать параметр <code>reverse=True</code>(подобно тому, как мы делали с sep и end) для сортировки по убыванию</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T141421.106.png\" src=\"https://ucarecdn.com/895b85d6-1b27-40bc-9d96-8137e75dbda9/\" width=\"1736\"></p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T141546.376.png\" src=\"https://ucarecdn.com/7988427a-5782-4def-9224-598a694a4a58/\" width=\"1736\"></p>\r\n\r\n<p>7.<code>reverse()</code> - Обратный порядок элементов.</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T142350.491.png\" src=\"https://ucarecdn.com/e3f697c3-2735-42cf-a83a-4b485beb973f/\" width=\"1736\"></p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T142421.296.png\" src=\"https://ucarecdn.com/bda672d3-cb45-4b5d-a934-105ad54d279e/\" width=\"1736\"></p>\r\n\r\n<p>8.<code>copy()</code> -&nbsp; Создание копии списка.</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T142552.458.png\" src=\"https://ucarecdn.com/1c8f44b5-7453-46e9-98c8-9e3532f7f186/\" width=\"1736\"></p>\r\n\r\n<p>9.<code>clear()</code> - Очистка списка.</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-26T142724.058.png\" src=\"https://ucarecdn.com/cd0bbae4-d863-4edc-b461-ce3926bdfc71/\" width=\"1736\"></p>\r\n\r\n<h2>Методы: Уменьшение</h2>\r\n\r\n<p>10.<code>pop()</code> - Удаление элемента по индексу.</p>\r\n\r\n<p>Удаляет элемент по указанному индексу и возвращает его (то есть последний элемент можно использовать). Если индекс не указан, удаляется последний элемент.</p>\r\n\r\n<p><img alt=\"\" height=\"430\" name=\"carbon - 2025-01-26T142924.460.png\" src=\"https://ucarecdn.com/eb501ec8-be09-44ed-81f8-07334308f766/\" width=\"1634\"></p>\r\n\r\n<p><img alt=\"\" height=\"430\" name=\"carbon - 2025-01-26T143037.202.png\" src=\"https://ucarecdn.com/7d1d51ff-c6b2-4738-89c0-94eaea962015/\" width=\"1634\"></p>\r\n\r\n<p>11.<code>remove()</code> - Удаление элемента по значению.</p>\r\n\r\n<p>Удаляет первый встретившийся элемент с указанным значением. Если элемента нет, вызывается ошибка.</p>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-26T143300.306.png\" src=\"https://ucarecdn.com/7d968caa-8d02-4267-9355-1ab9defd0097/\" width=\"1634\"></p>\r\n\r\n<p>12. <code>del</code> - Удаляет элемент списка по индексу или весь список.</p>\r\n\r\n<p><img alt=\"\" height=\"516\" name=\"carbon - 2025-01-26T143537.288.png\" src=\"https://ucarecdn.com/56901294-f5ce-472c-b081-ca3649dc75f4/\" width=\"1634\"></p>\r\n\r\n<h2>Заключение:</h2>\r\n\r\n<p>Методы списков в <code>Python</code> позволяют эффективно работать с данными, добавлять, удалять, сортировать и изменять элементы. Важно правильно использовать каждый из методов, для того что бы писать эффективный и правильный код.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 39,
  "fields": {
    "topic": 40,
    "type": "text",
    "title": "Генераторы списков",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1>Генераторы списков</h1>\r\n\r\n<p>Генераторы списков(list comprehensions) - это мощный и лаконичный способ создания списков в Python. Они позволяют создавать новые списки, комбинируя итерации и условия в одной строке. Генераторы делают код более читаемым и удобным, особенно при работе с простыми операциями.</p>\r\n\r\n<h2>Основной синтаксис</h2>\r\n\r\n<p>Синтаксис генераторов списков следующий:</p>\r\n\r\n<p><img alt=\"\" height=\"302\" name=\"carbon - 2025-01-26T152834.870.png\" src=\"https://ucarecdn.com/aa91912a-ef9b-492d-b070-edf0202235d6/\" width=\"1736\"></p>\r\n\r\n<p><strong>Пример:</strong></p>\r\n\r\n<p>Создадим список квадратов чисел от 1 до 5:<img alt=\"\" height=\"346\" name=\"carbon - 2025-01-26T153311.080.png\" src=\"https://ucarecdn.com/62f1f527-baad-4cd7-b523-91d28561f85f/\" width=\"1736\"></p>\r\n\r\n<h2>Условные выражения</h2>\r\n\r\n<p>Генераторы списков поддерживают условные выражения оператора <code>if</code>.</p>\r\n\r\n<p>Создаём список только четных чисел от 1 до 10:</p>\r\n\r\n<p><img alt=\"\" height=\"346\" name=\"carbon - 2025-01-26T160238.338.png\" src=\"https://ucarecdn.com/7695d48f-c520-490d-aa0b-e1f2c67223f2/\" width=\"1736\"></p>\r\n\r\n<p>Вам расскажем про метод, который создает список на основе какой - то строки, только не посимвольно (как <code>list()</code>), а используя разделитель строки.&nbsp;</p>\r\n\r\n<h2>Метод <code>.split()</code></h2>\r\n\r\n<p>Начнем с того, что метод split требуется для того, чтобы создать итератор из строки используя разделитель. Разберем на примере и пойдем дальше<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T101537.299.png\" src=\"https://ucarecdn.com/0d85a6ca-2cd9-44d5-a885-339a0374fd3c/\" width=\"2560\"></p>\r\n\r\n<p>Такой код выведет:<img alt=\"\" height=\"111\" name=\"image.png\" src=\"https://ucarecdn.com/1f53c833-2d7c-4de9-a717-8d591dfe09c7/\" width=\"100\">&nbsp;</p>\r\n\r\n<p><strong>Как это работает?</strong><br>\r\nТак как внутри split() ничего не записано, по умолчанию разделителем является пробел и split() разделяет строку на условные участки. Из них создается итератор (условный объект для прохождения по нему циклом) по которому и проходится наш цикл.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Пример с собственным разделителем:<img alt=\"\" height=\"500\" name=\"carbon - 2025-01-27T102135.238.png\" src=\"https://ucarecdn.com/624aaa8c-01c8-46ff-9cf9-3e30f7e1d585/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>А вот, как это реализуется с генератором списков. Пользователь вводит строку и получает на выходе список слов<img alt=\"\" height=\"500\" name=\"carbon - 2025-01-27T101911.726.png\" src=\"https://ucarecdn.com/37ed4441-fd31-4649-aaae-3a11d961e2a8/\" width=\"2560\"></p>\r\n\r\n<p>Грубо говоря, split() позволяет поделить строку на условные части и работать с ними. Кстати, у этого метода есть обратный - метод join. Работает он примерно также, указывается не строка разделитель, а строка, которая будет стоять между элементами какой - то коллекции символов которые с помощью этой строки соединятся друг с другом. Разберем пример и пойдем дальше.<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T102519.894.png\" src=\"https://ucarecdn.com/f2572013-a7cc-40ab-be62-3b88aee87c29/\" width=\"2560\"></p>\r\n\r\n<p>Пример с более удобным разделителем для понимания:<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T102609.852.png\" src=\"https://ucarecdn.com/82e73512-b05e-453e-8e55-464efc9e96af/\" width=\"2560\"></p>\r\n\r\n<p>Таким образом: <strong>split - разделяет строку, join - соединяет</strong></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Вложенные циклы</h2>\r\n\r\n<p>Круглые скобки внутри выводного списка - кортежи (похожий на списки тип данных). О нем поговорим в следующем модуле</p>\r\n\r\n<p>Генераторы списков поддерживают вложенные циклы.</p>\r\n\r\n<p><img alt=\"\" height=\"346\" name=\"carbon - 2025-01-26T203408.232.png\" src=\"https://ucarecdn.com/7914e230-665e-4e95-9a0a-7570153b70a0/\" width=\"1736\"></p>\r\n\r\n<p>Здесь для каждого значения <code>x</code> из диапозона <code>1-3</code> создаются пары с каждым значением <code>y</code>&nbsp;из диапозона <code>4-5</code>.</p>\r\n\r\n<h4>Комбинация с условием:</h4>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-26T203748.855.png\" src=\"https://ucarecdn.com/74453620-2018-49db-ba90-73aa6398d3af/\" width=\"1646\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Преобразование данных</h2>\r\n\r\n<p>Генераторы так же могут использоваться для преобразования данных.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-26T204602.811.png\" src=\"https://ucarecdn.com/4a2a02bb-ec5a-4eea-8d17-2c93e7509b70/\" width=\"1646\"></p>\r\n\r\n<h2>Преобразование строк в числа</h2>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-26T205037.163.png\" src=\"https://ucarecdn.com/97bca4fd-fd5d-4a6e-9f1e-c165f16e44ac/\" width=\"1646\"></p>\r\n\r\n<h2>Фильтрация слов</h2>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-26T210224.062.png\" src=\"https://ucarecdn.com/beb7cff4-486e-4e71-8622-ab865ce273fa/\" width=\"1646\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 40,
  "fields": {
    "topic": 41,
    "type": "text",
    "title": "Итерация по вложенным спискам | for i in [1, 2, 3]",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Мы уже с вами говорили про вложенные циклы и про вложенные списки. Теперь мы с вами поговорим о нечте комбинированном. О совокупности двух этих понятий и о том, как их использовать вместе.</p>\r\n\r\n<h2 style=\"text-align:center;\">Взаимодействие вложенных циклов и вложенных списков</h2>\r\n\r\n<p>Вложенные списки и вложенные циклы — это мощные инструменты, которые можно комбинировать для работы с многомерными структурами данных, таких как двумерные массивы (матрицы) или таблицы. В этом уроке мы рассмотрим:</p>\r\n\r\n<p style=\"text-align:center;\">&nbsp; 1. Что такое вложенные списки и циклы.</p>\r\n\r\n<p style=\"text-align:center;\">2. Как эффективно использовать их вместе.</p>\r\n\r\n<p style=\"text-align:center;\">&nbsp; &nbsp;3. Практические примеры и задачи для закрепления.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Вложенные списки и их структура</h2>\r\n\r\n<p><strong>Вложенный список</strong> — это список, внутри которого находятся другие списки. Например, список, представляющий матрицу 3x3:</p>\r\n\r\n<p><img alt=\"\" height=\"410\" name=\"carbon - 2025-01-26T170038.247.png\" src=\"https://ucarecdn.com/34a0f490-b546-4c8f-b2ed-b5a2c664bd90/\" width=\"2560\"></p>\r\n\r\n<p>Этот список можно представить как таблицу:</p>\r\n\r\n<pre><code>1 2 3\r\n4 5 6\r\n7 8 9</code></pre>\r\n\r\n<p>Вложенные списки удобно использовать для хранения данных в формате строк и столбцов, где каждый внутренний список — это строка, а элементы — это значения в столбцах.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Использование вложенных циклов для работы с вложенными списками</h2>\r\n\r\n<p>Чтобы обработать вложенный список, мы используем вложенные циклы:</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Внешний цикл</strong> — перебирает строки (вложенные списки).</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Внутренний цикл</strong> — перебирает элементы в каждой строке.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<h3><img alt=\"\" height=\"832\" name=\"carbon - 2025-01-26T170406.292.png\" src=\"https://ucarecdn.com/14711a29-d267-48d1-a53a-9fc924092fd4/\" width=\"2560\"></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Основные операции с вложенными списками</h2>\r\n\r\n<ol>\r\n\t<li>\r\n\t<h4><strong>Суммирование всех элементов вложенного списка</strong><img alt=\"\" height=\"862\" name=\"carbon - 2025-01-26T212305.766.png\" src=\"https://ucarecdn.com/0c428a34-81d8-4311-868f-df699a83c797/\" width=\"2560\"></h4>\r\n\t</li>\r\n\t<li>\r\n\t<h4>Поиск максимального элемента во вложенном списке<img alt=\"\" height=\"906\" name=\"carbon - 2025-01-26T212415.813.png\" src=\"https://ucarecdn.com/b69fe036-3fb8-4546-8a97-7ad181c68802/\" width=\"2560\"></h4>\r\n\t</li>\r\n\t<li><strong>Создание одномерного ( однострочного&nbsp;)&nbsp;списка из вложенного</strong><img alt=\"\" height=\"906\" name=\"carbon - 2025-01-26T212517.210.png\" src=\"https://ucarecdn.com/e3f223c1-a87e-4a54-92d2-c5267d892aba/\" width=\"2560\"></li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Таким образом:&nbsp;взаимодействие вложенных списков и вложенных циклов является мощным инструментом для работы с многомерными структурами данных.</p>\r\n\r\n<p>Вложенные списки и циклы часто используются при работе с табличными данными, матрицами, задачами в машинном обучении и графике. Навыки работы с ними делают ваш код более универсальным и эффективным.</p>\r\n\r\n<p>Для закрепления знаний рекомендуется выполнить предложенные задачи для самостоятельного решения, а также попробовать придумать свои примеры использования вложенных списков и циклов.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 41,
  "fields": {
    "topic": 42,
    "type": "text",
    "title": "Введение в кортежи",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Введение в кортежи</h1>\r\n\r\n<p>Начнем с того, что данный урок подразумевает полное прохождение темы списков, так как в общей сложности кортежи очень похожи на списки, хоть и являются абсолютно иным типом данных. Упор в данном уроке будет идти на непосредственную разницу между списками и кортежами.</p>\r\n\r\n<h2 style=\"text-align:center;\">Что такое кортежи?</h2>\r\n\r\n<p><strong>Кортежи (tuples)</strong> — это упорядоченные, неизменяемые коллекции данных. Они используются, когда нужно хранить данные, которые не должны изменяться на протяжении выполнения программы.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Основные отличия от списков:</strong></p>\r\n\r\n<ol>\r\n\t<li>Кортежи <strong>неизменяемы</strong> — после создания элементы кортежа нельзя добавлять, удалять или изменять.</li>\r\n\t<li>Кортежи занимают меньше памяти и работают быстрее, чем списки.</li>\r\n\t<li>Кортежи могут использоваться в качестве ключей словарей, тогда как списки — нет. (об этом поговорим позднее)</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3 style=\"text-align:center;\">Синтаксический пример:</h3>\r\n\r\n<p>Пример создания кортежей:</p>\r\n\r\n<p><img alt=\"\" height=\"712\" name=\"carbon - 2025-01-27T114413.637.png\" src=\"https://ucarecdn.com/645f026e-3473-4e29-96d5-c0469e2b45df/\" width=\"2560\"></p>\r\n\r\n<p>Кортеж - похожая на списки коллекция данных, только заключаются данные в круглые скобки. Можно создать кортеж с одним элементом, однако в таком случае, необходимо будет поставить запятую, иначе python просто подумает что это число в скобках, где скобки примет за приоритет операций.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Основные операции с кортежами</h2>\r\n\r\n<p>Поскольку кортежи и списки схожи, многие операции работают одинаково. Давайте рассмотрим основные:</p>\r\n\r\n<h3>Индексация и срезы</h3>\r\n\r\n<p>Вы можете обращаться к элементам кортежа по их индексу, начиная с нуля:<img alt=\"\" height=\"500\" name=\"carbon - 2025-01-27T114706.177.png\" src=\"https://ucarecdn.com/3bde0671-469e-415a-bc2b-810b7c532598/\" width=\"2560\"></p>\r\n\r\n<p><img alt=\"\" height=\"414\" name=\"carbon - 2025-01-27T114747.884.png\" src=\"https://ucarecdn.com/22408809-f927-4de1-8b14-45d2b29e45e8/\" width=\"2560\"></p>\r\n\r\n<p>Также кортежи можно перебирать с помощью циклов.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Объединение и повторение</h4>\r\n\r\n<p>Кортежи можно объединять или умножать:</p>\r\n\r\n<h3><img alt=\"\" height=\"670\" name=\"carbon - 2025-01-27T122207.769.png\" src=\"https://ucarecdn.com/4e630796-9b1d-4bc3-b90a-ff00e68d0545/\" width=\"2560\">Неизменяемость кортежей</h3>\r\n\r\n<p>Попробуем изменить элемент в кортеже:<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T115116.341.png\" src=\"https://ucarecdn.com/707b4a38-249b-4b45-b461-0c6627dbd22b/\" width=\"2560\"></p>\r\n\r\n<p>И тем не менее, изменяемые типы внутри изменить все же можно<img alt=\"\" height=\"500\" name=\"carbon - 2025-01-27T115201.555.png\" src=\"https://ucarecdn.com/8fbc698a-a152-4ecf-8414-fe9018c3d4d3/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td style=\"text-align:center;\">Краткая характеристика разницы:</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<table border=\"1\" cellpadding=\"1\" cellspacing=\"1\" style=\"width:500px;\">\r\n\t<tbody>\r\n\t\t<tr>\r\n\t\t\t<td>Характеристика</td>\r\n\t\t\t<td style=\"text-align:center;\">Списки</td>\r\n\t\t\t<td style=\"text-align:center;\">Кортежи</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Изменяемость</td>\r\n\t\t\t<td style=\"text-align:center;\">Да</td>\r\n\t\t\t<td style=\"text-align:center;\">Нет</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Скорость работы</td>\r\n\t\t\t<td style=\"text-align:center;\">Медленнее</td>\r\n\t\t\t<td style=\"text-align:center;\">Быстрее</td>\r\n\t\t</tr>\r\n\t\t<tr>\r\n\t\t\t<td>Объем памяти</td>\r\n\t\t\t<td style=\"text-align:center;\">Больше</td>\r\n\t\t\t<td style=\"text-align:center;\">Меньше</td>\r\n\t\t</tr>\r\n\t</tbody>\r\n</table>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>Распаковка кортежей</strong></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong>Распаковка кортежей (tuple unpacking) </strong>— это удобный способ извлечь элементы кортежа и сразу присвоить их переменным. Она делает код более читаемым и лаконичным, особенно при работе с несколькими значениями.</p>\r\n\r\n<h3><strong>Основы распаковки</strong></h3>\r\n\r\n<p>Распаковка позволяет \"разложить\" элементы кортежа по переменным:</p>\r\n\r\n<p><img alt=\"\" height=\"584\" name=\"carbon - 2025-01-27T115653.756.png\" src=\"https://ucarecdn.com/56f56a45-fc77-49d7-90f1-83f66a9d43d0/\" width=\"2560\"></p>\r\n\r\n<h3><strong>Количество переменных должно совпадать</strong></h3>\r\n\r\n<p>Количество переменных должно соответствовать количеству элементов в кортеже. Если их меньше или больше, возникнет ошибка:</p>\r\n\r\n<p><img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T115732.776.png\" src=\"https://ucarecdn.com/1eb6acab-f0fd-4366-ab5a-37b526613472/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3 style=\"text-align:center;\">Вывод по уроку: Кортежи в Python</h3>\r\n\r\n<p>Кортежи — это важная структура данных, которая в чём-то схожа с списками, но имеет свои особенности, такие как <strong>неизменяемость</strong> и <strong>меньший расход памяти</strong>. В ходе урока мы рассмотрели несколько ключевых аспектов работы с кортежами:</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Основные отличия от списков</strong>:</p>\r\n\r\n\t<ul>\r\n\t\t<li>Кортежи <strong>неизменяемы</strong>, в отличие от списков, которые можно изменять.</li>\r\n\t\t<li>Они занимают <strong>меньше памяти</strong> и <strong>работают быстрее</strong>, что делает их предпочтительными в некоторых ситуациях.</li>\r\n\t\t<li>Кортежи могут быть использованы как <strong>ключи в словарях</strong>, чего нельзя сделать со списками.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Распаковка кортежей</strong>:</p>\r\n\r\n\t<ul>\r\n\t\t<li>Мы узнали, как с помощью распаковки удобно извлекать элементы кортежа в отдельные переменные.</li>\r\n\t\t<li>Распаковка позволяет работать с данными, не прибегая к индексированию и делает код более читабельным.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Применение кортежей</strong>:</p>\r\n\r\n\t<ul>\r\n\t\t<li>Кортежи полезны для <strong>возврата нескольких значений из функций (о них - в этом курсе)</strong>, хранения неизменяемых данных и использования в качестве <strong>ключей словарей</strong>.</li>\r\n\t\t<li>В ситуациях, где данные должны быть защищены от изменений или требуется высокая производительность, кортежи — отличный выбор.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Сравнение с другими коллекциями</strong>:</p>\r\n\r\n\t<ul>\r\n\t\t<li>Кортежи предпочтительнее в случае, если требуется <strong>неизменность данных</strong> или <strong>быстродействие</strong>, тогда как списки более гибки, но менее эффективны в плане памяти и скорости.</li>\r\n\t</ul>\r\n\t</li>\r\n</ol>"
  }
},
{
  "model": "courses.content",
  "pk": 42,
  "fields": {
    "topic": 43,
    "type": "text",
    "title": "Метод tuple()",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h3>Преобразование других типов в кортежи | Метод <code>tuple()</code></h3>\r\n\r\n<p>В Python можно легко преобразовать другие типы данных в кортежи с помощью встроенного метода <code>tuple()</code>. Этот метод позволяет преобразовать список, строку, множество или любой итерируемый объект в кортеж.</p>\r\n\r\n<p><code>tuple(iterable)</code></p>\r\n\r\n<p>Где:</p>\r\n\r\n<ul>\r\n\t<li><code>iterable</code> — это любой итерируемый объект, такой как список, строка, множество, и даже другой кортеж.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Разберем различные примеры:<img alt=\"\" height=\"500\" name=\"carbon - 2025-01-27T125039.997.png\" src=\"https://ucarecdn.com/73968ceb-771b-42cb-8f25-abec012db16d/\" width=\"2560\">Здесь список <code>my_list</code> преобразуется в кортеж <code>my_tuple</code>.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Пример 2: Преобразование строки в кортеж</p>\r\n\r\n<p><img alt=\"\" height=\"500\" name=\"carbon - 2025-01-27T125123.261.png\" src=\"https://ucarecdn.com/5a304f94-3c52-4245-a1eb-f296e38edc11/\" width=\"2560\">В этом примере строка <code>\"hello\"</code> преобразуется в кортеж, где каждый символ строки становится отдельным элементом кортежа.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Пример 3<img alt=\"\" height=\"500\" name=\"carbon - 2025-01-27T125157.280.png\" src=\"https://ucarecdn.com/d457a95a-ba59-4058-989e-cdf537fb1602/\" width=\"2560\">Преобразование другого кортежа в кортеж.&nbsp;Если передать уже существующий кортеж в метод <code>tuple()</code>, он вернется без изменений, поскольку кортежи неизменяемы.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Примечания:</h3>\r\n\r\n<ol>\r\n\t<li>Если передать в метод <code>tuple()</code> объект, который не является итерируемым, возникнет ошибка <code>TypeError</code>.</li>\r\n\t<li>Метод <code>tuple()</code> полезен при необходимости создания неизменяемых коллекций из других типов данных, таких как списки или строки.</li>\r\n</ol>\r\n\r\n<p><img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T125233.714.png\" src=\"https://ucarecdn.com/d5c6019f-a583-4de0-93de-dcd45a3f56a0/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Метод <code>tuple()</code> является удобным инструментом для преобразования различных типов данных в кортежи. Он полезен, когда требуется создать неизменяемую версию коллекции, например, для хранения данных, которые не должны изменяться после их создания.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 43,
  "fields": {
    "topic": 45,
    "type": "text",
    "title": "Тип данных set",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Введение в множества | Тип данных <code>set</code></h1>\r\n\r\n<p><code>Множества(sets)</code> - это встроенный тип данных в <code>Python</code>, который представляет собой неупорядоченную уникальную коллекцию элементов.&nbsp;</p>\r\n\r\n<p>Создание множеств:</p>\r\n\r\n<p>Множества можно создать тремя разными способами, которые мы сейчас рассмотрим:</p>\r\n\r\n<p><img alt=\"\" height=\"770\" name=\"carbon - 2025-01-27T150201.510.png\" src=\"https://ucarecdn.com/09a39f6c-d0e7-4010-98ac-017cf9f128c3/\" width=\"1646\"></p>\r\n\r\n<p><strong>Первый вариант</strong> создания множества через функцию <code>set()</code>&nbsp;. В случае если функция <code>set()</code> будет, пустой, вывод составит:&nbsp;<code>set()</code> .</p>\r\n\r\n<p><img alt=\"\" height=\"346\" name=\"carbon - 2025-01-27T150411.823.png\" src=\"https://ucarecdn.com/995d7664-ab60-4b96-b8ab-f0e48dd38717/\" width=\"1646\"></p>\r\n\r\n<p>Так же внутрь функции <code>set()</code>, можно поместить список, который будет преобразован в множество.</p>\r\n\r\n<p><img alt=\"\" height=\"312\" name=\"carbon - 2025-01-27T181551.538.png\" src=\"https://ucarecdn.com/1d6d7d84-91dc-48c6-add8-0d1386c103dc/\" width=\"1646\"></p>\r\n\r\n<p>Рассмотрим <strong>второй вариант</strong> создания множества:&nbsp;элементы множества должны помещаться в фигурные скобки: <code>{}</code>&nbsp; и должны быть разделены запятой: <code>,</code></p>\r\n\r\n<p><img alt=\"\" height=\"312\" name=\"carbon - 2025-01-27T183104.541.png\" src=\"https://ucarecdn.com/5ce8b51e-7c4f-4d02-a25d-fd8e69dec423/\" width=\"1646\"></p>\r\n\r\n<p>Так же мы рассмотрим создание множества из строки. Поместим строку внуть функции <code>set()</code> и запишем в переменную под названием <code>chars</code>(c англ.яз - символы). Ниже вызовем переменную <code>chars</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"312\" name=\"carbon - 2025-01-27T183323.248.png\" src=\"https://ucarecdn.com/917528ce-5b16-462f-8c67-72c2700b0faa/\" width=\"1646\"></p>\r\n\r\n<p>Как мы видим вывод составил <code>{'h', 'l', 'e', 'o'}</code>. Из за чего так получилось?&nbsp;</p>\r\n\r\n<p>1.Из за того, что множества хранят только уникальные значения, что значит, что при создании множества, все дублирующиеся элементы удаляются. В данном случае один символ <code>l</code> удалился, так как ранее множество уже внесло в свою память такой же элемент.</p>\r\n\r\n<p>2.Элементы были выведены не как в изначальном порядке, потому, что множества являются неупорядоченной коллекцией уникальных элементов, то есть элементы хранятся без определённого порядка.</p>\r\n\r\n<p>Так же ниже представлен пример Уникальности элементов в типе данных <code>set( множества)</code>.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"312\" name=\"carbon - 2025-01-27T190736.965.png\" src=\"https://ucarecdn.com/04aad7eb-92b9-4e4f-9056-a6c899fb62f1/\" width=\"1646\"></p>\r\n\r\n<p>В данном примере, все дублирующиеся элементы были удалены.&nbsp;</p>\r\n\r\n<h4>Проверка принадлежности</h4>\r\n\r\n<p>Так же для проверки принадлежности элемента к множеству можно применять оператор <code>in</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"312\" name=\"carbon - 2025-01-27T231258.901.png\" src=\"https://ucarecdn.com/7b94887b-4d46-453b-a83b-ce4ed8382e0d/\" width=\"1646\"></p>\r\n\r\n<h3>Важные моменты:</h3>\r\n\r\n<ul>\r\n\t<li>Множества не могут содержать мутабельные типы данных, такие как списки или словари, поскольку они должны быть хэшируемыми. (Мутабельные типы данных в программировании, в частности в Python, — это те типы данных, значения которых могут быть изменены после их создания. Это означает, что объекты таких типов данных можно изменять на месте без создания новой копии объекта.) То есть, множества должны содержать только неизменяемые типы данных.</li>\r\n\t<li>Множества полезны для удаления дубликатов из списков или других итерируемых объектов.</li>\r\n\t<li>Используйте множество, когда вам нужно проверять принадлежность элемента к множеству быстро или когда вы работаете с уникальными значениями.</li>\r\n</ul>\r\n\r\n<h2>Типы данных, которые можно хранить в <code>set</code>:</h2>\r\n\r\n<h3>1.Числа</h3>\r\n\r\n<ul>\r\n\t<li><code>int</code> (например, <code>1</code>, <code>2</code>, <code>3</code>)</li>\r\n\t<li><code>float</code> (например, <code>3.14</code>, <code>2.718</code>)</li>\r\n\t<li><code>complex</code> (например, <code>1 + 2j</code>)</li>\r\n</ul>\r\n\r\n<h3>2.Строки</h3>\r\n\r\n<ul>\r\n\t<li><code>str</code> (например, \"<code>hello</code>\", \"<code>world</code>\")</li>\r\n</ul>\r\n\r\n<h3>3.Кортежи(если все их элементы тоже являются хэшируемыми):</h3>\r\n\r\n<ul>\r\n\t<li>Например, <code>(1, 2)</code>, <code>(\"a\", \"3.14\")</code></li>\r\n</ul>\r\n\r\n<h3>4.Булевые значения:</h3>\r\n\r\n<ul>\r\n\t<li><code>True</code>, <code>False</code></li>\r\n</ul>\r\n\r\n<h3>5.Объекты frozenset (неизменяемые множества):</h3>\r\n\r\n<ul>\r\n\t<li>Например, <code>frozenset({1, 2, 3})</code></li>\r\n</ul>\r\n\r\n<h2>Типы данных, которые нельзя хранить в <code>set</code>:</h2>\r\n\r\n<p>1.Списки (<code>list</code>), так как они изменяемы.</p>\r\n\r\n<p>-Например <code>my_set = {[1, 2, 3]}</code> выдаст ошибку.</p>\r\n\r\n<p>2.Словари (<code>dict</code>), так как они изменяемы(о них в 4 модуле этого курса).</p>\r\n\r\n<p><img alt=\"\" height=\"312\" name=\"carbon - 2025-01-28T143201.130.png\" src=\"https://ucarecdn.com/b8231b5d-6673-4bf9-9e7c-7548c926bf9e/\" width=\"2194\"></p>\r\n\r\n<p>3.Множества (<code>set</code>), так как они изменяемы.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 44,
  "fields": {
    "topic": 46,
    "type": "text",
    "title": "Основные методы и операции над множествами",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Основные методы и операции над множествами</h1>\r\n\r\n<p>В данном уроке мы изучим основные методы и операции над множествами. Мы изучим, какие методы можно применять для типа данных set, так же узнаем доступные операции над множествами и проанализируем представленные примеры.</p>\r\n\r\n<h2>Добавление и удаление элементов</h2>\r\n\r\n<p>1. <code>add(element)</code> - добавляет элемент в множество</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-27T121226.940.png\" src=\"https://ucarecdn.com/ae394116-754c-4fb8-ad7a-f2c4b654441d/\" width=\"1646\"></p>\r\n\r\n<p>2.<code>update()</code> -&nbsp;&nbsp;&nbsp;в <code>Python</code> используется для добавления элементов из других множеств или итерируемых объектов в текущее множество. Этот метод изменяет исходное множество и не возвращает никакого значения. Пример использования метода&nbsp;<code>update()</code>:</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-27T222953.781.png\" src=\"https://ucarecdn.com/1c83caff-023c-4084-a2db-2d5570c81460/\" width=\"1646\"></p>\r\n\r\n<p>В данном случае мы добавили новые элементы в уже созданное множество <code>my_set</code>, тем самым увеличив количество содержащих элементов.</p>\r\n\r\n<p>3.<code>remove(element)</code> - метод который удаляет элемент,&nbsp; и вызывает ошибку, если элемента нет.</p>\r\n\r\n<p>Пример:</p>\r\n\r\n<p>Создаём переменную <code>programming_languages</code> в которой содержится три элемента. В следующей строке применяем метод remove, который удаляет определённый указанный элемент, в данном случае <code>\"C++\"</code> и выводим содержимое множества после исполнения метода, который удалил указанный элемент.</p>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-27T121811.107.png\" src=\"https://ucarecdn.com/f2c0d363-8e6e-47f9-b611-b3db14013658/\" width=\"1646\"></p>\r\n\r\n<p>В случае, если ввесьт в метод .<code>remove()</code>, элемент, которого в множестве нет, вывод будет совершать <code>ошибку</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"346\" name=\"carbon - 2025-01-27T121442.927.png\" src=\"https://ucarecdn.com/d7ca2f9d-f36f-4f77-99b8-9b85164b0e0f/\" width=\"1646\"></p>\r\n\r\n<p>4. <code>discard(element)</code> - удаляет элемент, не вызывает ошибку, если элемента нет.</p>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-27T122102.526.png\" src=\"https://ucarecdn.com/30782f57-8e07-42e7-a8e3-122d2e0047d0/\" width=\"1646\"></p>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-27T121936.231.png\" src=\"https://ucarecdn.com/5f48c1bb-081c-4265-9252-3ad719150d77/\" width=\"1646\"></p>\r\n\r\n<p>В данном случае, в нашем методе <code>programming_languages</code> нет элемента <code>\"С#\"</code>, но из за особенности метода <code>discard</code>, ошибка не выводится, но и изначальное множество не изменяется.&nbsp;</p>\r\n\r\n<p>5. <code>pop()</code> - удаляет и возвращает случайный элемент</p>\r\n\r\n<p><img alt=\"\" height=\"438\" name=\"carbon - 2025-01-27T232941.384.png\" src=\"https://ucarecdn.com/f6df18e7-16ca-42e9-8d0a-dc27bb6679c2/\" width=\"2194\">Данный пример наглядно показывает, что при использовании метода pop в выводе он удаляет и выводит удалённый элемент.В типе данных set, удаляется случайный элемент.</p>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-27T122221.404.png\" src=\"https://ucarecdn.com/6b1fd907-3d19-49dd-afdc-1ba5418cc29c/\" width=\"1646\"></p>\r\n\r\n<p>В данном случае удалённый элемент не выводится, так как мы не использовали функцию <code>print</code> для метода <code>pop</code>. Но случайный элемент успешно удалился.</p>\r\n\r\n<p>6. <code>clear()</code> - очищает множество.</p>\r\n\r\n<p><img alt=\"\" height=\"388\" name=\"carbon - 2025-01-27T122320.352.png\" src=\"https://ucarecdn.com/37ba7c71-88e1-4f2a-9160-f83d4ca2d119/\" width=\"1646\"></p>\r\n\r\n<p>Данный метод, просто полностью очищает множество от всех элементов и в результате вывод будет составлять - пустое множество <code>set()</code>.</p>\r\n\r\n<h2>Операции над множествами</h2>\r\n\r\n<h3>1. Объединение множеств</h3>\r\n\r\n<p>Используйте оператор <code>|</code> или метод <code>union()</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"438\" name=\"carbon - 2025-01-27T115423.648.png\" src=\"https://ucarecdn.com/b2379e82-b4da-4aab-96ac-2188f8a85e07/\" width=\"1646\"></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"466\" name=\"Frame 47.png\" src=\"https://ucarecdn.com/5b5b46ba-0de1-41ae-9a8a-842bf62332f0/\" width=\"901\"></p>\r\n\r\n<p>В данном случае метод <code>union()</code> и оператор <code>|</code> соеденяют все уникальные элементы двух множеств <code>A</code> и <code>B</code>.</p>\r\n\r\n<p>Выводу получается: <code>{1, 2, 3, 4, 5}</code></p>\r\n\r\n<h3>2. Пересечение множеств</h3>\r\n\r\n<p>Используйте оператор <code>&amp;</code> или метод <code>intersection()</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"438\" name=\"carbon - 2025-01-27T115859.272.png\" src=\"https://ucarecdn.com/991ae010-a38f-4385-afc3-c3f76144d53a/\" width=\"1646\"></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"466\" name=\"Frame 47.png\" src=\"https://ucarecdn.com/addcb8b8-bf88-4d4f-a325-f71fd7398a2f/\" width=\"901\"></p>\r\n\r\n<p>В данном случае, при применении оператора <code>&amp;</code> или метода <code>intersection()</code> выводятся только элементы, которые персекаются в двух множествах <code>A</code> и <code>B</code>.&nbsp;</p>\r\n\r\n<p>Вывод получается: <code>{3}</code></p>\r\n\r\n<h3>3. Разность множеств</h3>\r\n\r\n<p>Используйте оператор <code>-</code> или метод <code>difference()</code>.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"482\" name=\"carbon - 2025-01-27T120234.588.png\" src=\"https://ucarecdn.com/e5b2f05c-9a62-4757-b7e2-58c83e32430f/\" width=\"1646\"></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"466\" name=\"Frame 48.png\" src=\"https://ucarecdn.com/e530d3be-5fe5-4789-b4a9-5d9a9a97b472/\" width=\"901\"></p>\r\n\r\n<p>При использовании метода <code>A.difference(B)</code> или оператора <code>A - B</code>&nbsp;выводятся элементы, которые есть</p>\r\n\r\n<p>только в множестве <code>A</code>.</p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"466\" name=\"Frame 49.png\" src=\"https://ucarecdn.com/30b8222f-4a87-4dcb-9b3b-da1c37da1a5e/\" width=\"901\"></p>\r\n\r\n<p>В обратном случае, при применении <code>B.difference(A)</code> или <code>B - A</code>, выводятся элементы содержащиеся</p>\r\n\r\n<p>только в множестве <code>B</code>.</p>\r\n\r\n<h3>4. Симметрическая разность</h3>\r\n\r\n<p>Используйте оператор <code>^</code> или метод <code>symmetric_difference()</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"438\" name=\"carbon - 2025-01-27T120632.351.png\" src=\"https://ucarecdn.com/7200c4fa-a81f-498f-a269-059f7ce12054/\" width=\"1646\"></p>\r\n\r\n<p style=\"text-align:center;\"><img alt=\"\" height=\"466\" name=\"Frame 50.png\" src=\"https://ucarecdn.com/025a1bc5-e535-47e7-8337-525c3c39a1e8/\" width=\"901\"></p>\r\n\r\n<p>При использовании метода <code>A.symetric_difference(B)</code> или операции <code>A ^ B</code>, выводятся все элементы, которые не пересекаются между двумя множествами <code>A и B</code>.</p>\r\n\r\n<h2>Проверка отношений между множествами</h2>\r\n\r\n<p><code>issubset(other)</code>&nbsp; - проверяет, является ли множество подмножеством.</p>\r\n\r\n<p><img alt=\"\" height=\"472\" name=\"carbon - 2025-01-27T123634.353.png\" src=\"https://ucarecdn.com/f9fc0e0d-f2a3-4095-a7de-6a6280e5f88f/\" width=\"1646\"></p>\r\n\r\n<p><code>issuperset(other)</code> - проверяет, является ли множество надмножеством.</p>\r\n\r\n<p><img alt=\"\" height=\"472\" name=\"carbon - 2025-01-27T123807.799.png\" src=\"https://ucarecdn.com/6e37a147-5419-4452-8720-c683412d7f82/\" width=\"1646\"></p>\r\n\r\n<p><code>isdisjoint(other)</code>&nbsp; - проверяет, имеют ли множества общие элементы. Если имеют выводит <code>False</code>, если не имеют, выводит <code>True</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"516\" name=\"carbon - 2025-01-27T124156.161.png\" src=\"https://ucarecdn.com/768c4666-b308-43a0-ac90-26c07bb08686/\" width=\"1646\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 45,
  "fields": {
    "topic": 47,
    "type": "text",
    "title": "Итерация по множествам",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Итерация по множествам&nbsp;</h1>\r\n\r\n<p>Множества поддерживают итерации, как и другие коллекции в <code>Python</code>.</p>\r\n\r\n<h3>Основы итераций.</h3>\r\n\r\n<p>В данном примере, мы проходимся по множеству <code>numbers</code> и выводим, каждый элемент данного множества с новой строки - используя цикл <code>for</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"780\" name=\"carbon - 2025-01-27T221814.716.png\" src=\"https://ucarecdn.com/b1ce982e-1f30-40e3-b41a-047c1b01609a/\" width=\"1646\"></p>\r\n\r\n<p>Следует заметить, что порядок вывода элементов не гарантируется, так как множества неупорядочены.</p>\r\n\r\n<h4>Фильтрация элементов в множестве</h4>\r\n\r\n<p>Используйте условные выражения внутри цикла, для фильтрации.</p>\r\n\r\n<p><img alt=\"\" height=\"354\" name=\"carbon - 2025-01-27T224145.776.png\" src=\"https://ucarecdn.com/2cede067-4751-44d1-8a54-9b0762f542b0/\" width=\"1646\">В данном случае мы отсортировали множество numbers и создали новое множество even_numbers, с помощью итерации по numbers, и условному оператору.&nbsp;</p>\r\n\r\n<p>Так же следует отметить, что множество нельзя изменить во время итерации.</p>\r\n\r\n<p><img alt=\"\" height=\"396\" name=\"carbon - 2025-01-27T224717.912.png\" src=\"https://ucarecdn.com/5a3f5e43-c31c-45c9-a8ea-344d6524d4d1/\" width=\"1646\"></p>\r\n\r\n<p>В данном случае, мы попытались добавить элемент в множество, во время исполнения цикла, но в результате выполнения кода вывелась ошибка из за того, что если вы изменяете объект (например, добавляя или удаляя элементы) во время итерации, это может нарушить порядок итерации, так как итератор не знает о новых элементах или пропущенных позициях.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 46,
  "fields": {
    "topic": 47,
    "type": "text",
    "title": "Дополнительные задачи:",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Дополнительные задачи:</p>\r\n\r\n<h3>Задача 1:</h3>\r\n\r\n<p><strong>Вывод элементов множества:</strong><br>\r\nДан список <code>numbers = [1, 2, 3, 4, 5, 2, 3, 1]</code>. Преобразуй его в множество и выведи все элементы множества по одному на каждой строке.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Задача 2:</h3>\r\n\r\n<p><strong>Подсчет длины множества:</strong><br>\r\nДан список слов: <code>words = [\"apple\", \"banana\", \"orange\", \"apple\", \"grape\", \"banana\"]</code>. Найди, сколько различных слов в списке.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Задача 3:</h3>\r\n\r\n<p><strong>Нахождение общих элементов:</strong><br>\r\nДаны множества, выведите общие элементы, которые содержатся сразу в двух множествах:</p>\r\n\r\n<p>set1 = {1, 2, 3, 4, 5}<br>\r\nset2 = {4, 5, 6, 7, 8}</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Задача 4:</h3>\r\n\r\n<h3><br>\r\n<strong>Объединение множеств:</strong><br>\r\nДаны два множества с именами студентов, записавшихся на разные курсы:</h3>\r\n\r\n<p>python_students = {\"Алексей\", \"Мария\", \"Иван\", \"Ольга\"}<br>\r\njava_students = {\"Мария\", \"Иван\", \"Дмитрий\", \"Сергей\"}</p>\r\n\r\n<p>Создай новое множество, содержащее всех студентов, записавшихся хотя бы на один курс, и выведи его элементы.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Задача 5:</h3>\r\n\r\n<p><strong>Поиск чисел с определенными свойствами:</strong><br>\r\nДано множество чисел <code>numbers = {10, 15, 21, 30, 42, 55, 60}</code>.<br>\r\nВыведи только те числа, которые делятся на 3, но не делятся на 5.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Решив эти задачи, вы поймёте как работает итериция по множествам и закрепите изученную тему на практике.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 47,
  "fields": {
    "topic": 48,
    "type": "text",
    "title": "Frozenset",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Frozenset</h1>\r\n\r\n<p><code>Frozenset </code>- неизменяемая версия множества.</p>\r\n\r\n<p>В отличие от обычного <code>set</code>, элементы во <code>frozenset</code> нельзя добавлять, удалять или изменять после создания. Это делает его полезным для хранения данных, которые должны быть защищены от изменений(например, в качестве ключей в словарях(о них в следующих модулях) или элементов других множеств).</p>\r\n\r\n<p>Особенности <code>frozenset</code>:</p>\r\n\r\n<p>- Поддерживает все операции, которые не изменяют множество(например, объединение, пересечение)</p>\r\n\r\n<p>-Элементы должны быть неизменяемы, аналогично обычному множеству.</p>\r\n\r\n<h3>Создание <code>frozenset</code></h3>\r\n\r\n<p><span style=\"color:#000000;\">для создания используется функция </span><code><span style=\"color:#000000;\">frozenset()</span></code><span style=\"color:#000000;\"> внутри которой помещаются элементы, которые будет содержать замороженное множество.</span></p>\r\n\r\n<p><img alt=\"\" height=\"524\" name=\"carbon - 2025-01-27T230300.132.png\" src=\"https://ucarecdn.com/ba4c35d1-1bf7-4d4d-ac1c-2dee477bf6b7/\" width=\"1646\"></p>\r\n\r\n<p>если же внуть функции <code>frozenset()</code> ничего не поместить создастся просто пустое замороженное множество и вывод составит: <code>frozenset()</code>.</p>\r\n\r\n<h3>Доступные методы frozenset():</h3>\r\n\r\n<p>Так как <code>frozenset</code> неизменяем, методы добавления/удаления элементов (<code>add</code>, <code>remove</code>, <code>discard</code>, <code>clear</code>) недоступны.</p>\r\n\r\n<p>Однако доступны операции, которые возвращают новые множества без изменения исходного.</p>\r\n\r\n<h4>Примеры доступных операций:</h4>\r\n\r\n<p><img alt=\"\" height=\"1034\" name=\"carbon - 2025-01-27T230938.442.png\" src=\"https://ucarecdn.com/2c549d83-0de0-4169-9e58-c221a9842737/\" width=\"1646\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 48,
  "fields": {
    "topic": 48,
    "type": "text",
    "title": "Задачи для самостоятельного решения:",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Задачи для самостоятельного решения:</p>\r\n\r\n<h3>Задача 1:</h3>\r\n\r\n<p>На ввод подаётся список, выведите только уникальные элементы списка, возвращающий в формате типа данных <code>frozenset</code>.</p>\r\n\r\n<h3>Задача 2:</h3>\r\n\r\n<p>Создайте <code>frozenset</code>, содержащий числа от 1 до 5. Попробуйте:</p>\r\n\r\n<ul>\r\n\t<li>Вывести его на экран.</li>\r\n\t<li>Проверить, содержит ли он число 3.</li>\r\n\t<li>Найти его длину.</li>\r\n</ul>\r\n\r\n<h3>Задача 3:</h3>\r\n\r\n<p>Создайте два <code>frozenset</code> из чисел:</p>\r\n\r\n<p><code>fset1 = {1, 2, 3, 4, 5}</code></p>\r\n\r\n<p><code>fset2 = {4, 5, 6, 7}</code></p>\r\n\r\n<p>Выполните и выведите результаты:</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p>Объединение&nbsp;<code>fset1</code>&nbsp;и&nbsp;<code>fset2</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Пересечение&nbsp;<code>fset1</code>&nbsp;и&nbsp;<code>fset2</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Разность&nbsp;<code>fset1 - fset2</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Проверьте, является ли&nbsp;<code>fset1</code>&nbsp;надмножеством для&nbsp;<code>{3, 4}</code>.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Решив эти задачи самостоятельно, вы поймёте основные концепции использования данного типа данных и закрепите их на практике.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 49,
  "fields": {
    "topic": 49,
    "type": "text",
    "title": "Что такое словарь?",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\"><strong>Что такое словарь?</strong></h2>\r\n\r\n<p>Словарь в Python — это коллекция, которая хранит элементы в виде пар <strong>ключ-значение</strong>. В отличие от списков и кортежей, словари являются <strong>неупорядоченными</strong> и <strong>изменяемыми</strong>. Это означает, что элементы словаря не имеют фиксированного порядка (до Python 3.7), и их можно изменять, добавлять и удалять.</p>\r\n\r\n<p>Словари удобны для хранения данных, где необходимо быстро найти значение по определенному ключу.</p>\r\n\r\n<h4><strong>Основные характеристики словарей:</strong></h4>\r\n\r\n<ol>\r\n\t<li><strong>Неупорядоченность</strong>: В старых версиях Python (до 3.7) элементы в словаре не имеют определенного порядка. В Python 3.7+ порядок добавления элементов сохраняется, но не гарантируется.</li>\r\n\t<li><strong>Неиндексируемость</strong>: В словарях доступ к значениям осуществляется через ключи, а не через индексы, как в списках.</li>\r\n\t<li><strong>Уникальные ключи</strong>: Каждый ключ в словаре должен быть уникальным.</li>\r\n\t<li><strong>Изменяемость</strong>: Словари можно изменять, добавлять новые элементы или удалять существующие.</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Создание словаря:</h2>\r\n\r\n<p>Для создания словаря можно использовать несколько способов:</p>\r\n\r\n<p><img alt=\"\" height=\"840\" name=\"carbon - 2025-01-27T214920.370.png\" src=\"https://ucarecdn.com/c285a6fa-45d5-4baa-895e-45c311b61e0d/\" width=\"2560\"></p>\r\n\r\n<p>Мы видим, что создание словаря имеет соответствия со всеми прошлыми коллекционными типами данных, изучавшимися в этом курсе. Можно создать как пустой словарь, так и наполненный, причем несколькими способами. Словарь состоит из многочисленных (или нет) пар ключ-значение. В данных примерах <code>('name', 'age' и 'city')</code> - ключи, по которым, как правило, можно обращаться к их значениям <code>('Alice', 25, 'New York')</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Мы не раз упоминали, что кортежи и списки могут являться парами в словарях для его задания. Создадим словарь и на основе списков и кортежей:&nbsp;<img alt=\"\" height=\"414\" name=\"carbon - 2025-01-27T215139.277.png\" src=\"https://ucarecdn.com/51a1f8c4-546e-4f21-b1ad-4484facd52c1/\" width=\"2560\">О методах создания словаря поговорили. Стоит сказать, что этот тип данных особенно приветствуется в профессиональной разработке и его знание дает очень сильный буст в понимании будущих концептов профессионального программирования.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Доступ к элементам словаря</h2>\r\n\r\n<p>Мы уже помним, что большинство элементов коллекций достается по их индексу (нумерации в коллекции). В словарях же нет индексации, ведь, как мы уже знаем, словарь - <strong>неиндексируемый</strong> тип данных. То есть в нем нет какого - либо порядка. <strong>Значение </strong>словаря вызывается через его <strong>ключ</strong></p>\r\n\r\n<p>Рассмотрим пример:<img alt=\"\" height=\"670\" name=\"carbon - 2025-01-27T215812.031.png\" src=\"https://ucarecdn.com/995615b4-0bc9-4a4f-9761-07bfedba86ef/\" width=\"2560\">То есть теперь в квадратных скобках вместо индекса записывается ключ.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Добавление новых значений внутрь словаря:<img alt=\"\" height=\"756\" name=\"carbon - 2025-01-27T221337.404.png\" src=\"https://ucarecdn.com/9a41468b-4156-4d3b-b17a-69fa0912f796/\" width=\"2560\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 50,
  "fields": {
    "topic": 50,
    "type": "text",
    "title": "Методы изменения словарей в Python",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h3>Методы изменения словарей в Python</h3>\r\n\r\n<p>Словари — это изменяемые коллекции, и Python предоставляет несколько методов для их модификации. Мы рассмотрим такие методы, как <code>del()</code>, <code>pop()</code>, <code>popitem()</code>, и <code>clear()</code>. Эти методы позволяют эффективно управлять содержимым словаря, удаляя или очищая элементы. Давайте рассмотрим каждый метод подробно.</p>\r\n\r\n<h2>Метод <code>del()</code></h2>\r\n\r\n<p>Метод <code>del()</code> используется для удаления элемента из словаря по ключу. Этот метод не только удаляет пару ключ-значение, но и влияет на сам словарь — после удаления элемента его больше не существует в словаре.<img alt=\"\" height=\"500\" name=\"carbon - 2025-01-27T224720.939.png\" src=\"https://ucarecdn.com/8fd38dca-a745-498f-8a83-9a9e415e6891/\" width=\"2560\"></p>\r\n\r\n<ul>\r\n\t<li>Мы создаем словарь с тремя элементами: <code>\"name\"</code>, <code>\"age\"</code>, и <code>\"city\"</code>.</li>\r\n\t<li>Используя <code>del my_dict[\"age\"]</code>, мы удаляем пару <code>\"age\": 25</code>.</li>\r\n\t<li>После этого в словаре остается только два элемента: <code>\"name\"</code> и <code>\"city\"</code>.</li>\r\n\t<li>Метод <code>del()</code> — это способ удаления конкретного ключа из словаря. Важно помнить, что если указанный ключ не существует в словаре, то будет вызвана ошибка <code>KeyError</code>.</li>\r\n</ul>\r\n\r\n<p><code>{'name': 'Alice', 'city': 'New York'}&nbsp;</code>&nbsp;# Словарь на выходе</p>\r\n\r\n<p><strong>Стоит помнить, что попытка удаления несуществующего значения приведет к ошибке.</strong></p>\r\n\r\n<p><img alt=\"\" height=\"414\" name=\"carbon - 2025-01-27T224843.009.png\" src=\"https://ucarecdn.com/e24f015b-898d-47a5-abb6-3499fadbe473/\" width=\"2560\"><br>\r\n&nbsp;</p>\r\n\r\n<h2>Метод <code>pop()</code></h2>\r\n\r\n<p>Метод <code>pop()</code> удаляет элемент из словаря по ключу и возвращает его значение. Это полезно, если вам нужно не только удалить элемент, но и сохранить его значение для дальнейшего использования. Если ключ не существует, будет выброшена ошибка <code>KeyError</code>, но можно указать значение по умолчанию, которое будет возвращено, если ключ отсутствует.</p>\r\n\r\n<p><img alt=\"\" height=\"542\" name=\"carbon - 2025-01-27T224949.384.png\" src=\"https://ucarecdn.com/207eb3a1-bd39-4233-ae81-02faf717e72e/\" width=\"2560\"></p>\r\n\r\n<ul>\r\n\t<li>В словаре есть три элемента: <code>\"name\"</code>, <code>\"age\"</code>, и <code>\"city\"</code>.</li>\r\n\t<li>Мы удаляем пару по ключу <code>\"age\"</code> с помощью <code>my_dict.pop(\"age\")</code>, и метод возвращает значение, которое было удалено — <code>30</code>.</li>\r\n\t<li>Результат удаления: словарь теперь содержит только два элемента: <code>\"name\": \"Bob\"</code> и <code>\"city\": \"London\"</code>.</li>\r\n\t<li>Также стоит отметить, что метод <code>pop()</code> возвращает удаленное значение, что полезно, если вы хотите использовать это значение в дальнейшем.</li>\r\n</ul>\r\n\r\n<p>Вывод:<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T225023.004.png\" src=\"https://ucarecdn.com/1d4e2186-2013-4f57-82c1-c1a73cafe79d/\" width=\"2560\">Тут то же самое, если ключ не будет найден в словаре, будет вызвана ошибка:<img alt=\"\" height=\"414\" name=\"carbon - 2025-01-27T225042.084.png\" src=\"https://ucarecdn.com/5d373854-0303-47ae-8c9c-c136731c8291/\" width=\"2560\">Вы можете избежать этой ошибки, указав значение по умолчанию:</p>\r\n\r\n<p><img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T225117.939.png\" src=\"https://ucarecdn.com/2f6f1683-1256-421a-a5f7-3c0265ad318c/\" width=\"2560\"></p>\r\n\r\n<h2>3. <strong>Метод <code>popitem()</code></strong></h2>\r\n\r\n<p>Метод <code>popitem()</code> удаляет и возвращает пару ключ-значение, причем возвращается последний добавленный элемент в словарь. В версиях Python до 3.7 этот метод удалял случайную пару, но с Python 3.7+ он удаляет последнюю добавленную пару. Этот метод полезен, если вам нужно удалить и использовать пару ключ-значение, например, при итерации по словарю.<img alt=\"\" height=\"542\" name=\"carbon - 2025-01-27T225217.809.png\" src=\"https://ucarecdn.com/5dcb0ba3-3f92-4a9f-a563-0e38c708f24c/\" width=\"2560\"></p>\r\n\r\n<ul>\r\n\t<li>В словаре находятся три элемента: <code>\"name\"</code>, <code>\"age\"</code>, и <code>\"city\"</code>.</li>\r\n\t<li>Метод <code>popitem()</code> удаляет последнюю добавленную пару, которая в данном случае — <code>\"city\": \"Paris\"</code>.</li>\r\n\t<li>Он возвращает пару, которая была удалена, в виде кортежа: <code>(ключ, значение)</code>.</li>\r\n\t<li>Словарь после удаления будет содержать только два элемента.</li>\r\n</ul>\r\n\r\n<p><code>Удаленная пара: city: Paris<br>\r\n{'name': 'John', 'age': 22}</code></p>\r\n\r\n<p><strong>Примечание:</strong> Если словарь пуст, метод <code>popitem()</code> вызовет ошибку:<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T225309.268.png\" src=\"https://ucarecdn.com/cb4e2bd7-6dde-47fa-8aee-51a8e144e9ef/\" width=\"2560\"></p>\r\n\r\n<h4>4. <strong>Метод <code>clear()</code></strong></h4>\r\n\r\n<p>Метод <code>clear()</code> полностью очищает словарь, удаляя все пары ключ-значение. После вызова этого метода словарь становится пустым.</p>\r\n\r\n<p><img alt=\"\" height=\"500\" name=\"carbon - 2025-01-27T225343.772.png\" src=\"https://ucarecdn.com/5cb5feeb-67a9-42df-9c4f-661b8cb2d7ec/\" width=\"2560\"></p>\r\n\r\n<p><strong>Пояснение:</strong></p>\r\n\r\n<ul>\r\n\t<li>В словаре изначально есть три элемента.</li>\r\n\t<li>После вызова <code>my_dict.clear()</code> все элементы удаляются, и словарь становится пустым.</li>\r\n\t<li>Метод <code>clear()</code> полезен, если вам нужно полностью очистить словарь и начать с нуля.</li>\r\n</ul>\r\n\r\n<p><strong>Примечание:</strong> Метод <code>clear()</code> удаляет все элементы, и словарь становится пустым. Важно отметить, что метод <code>clear()</code> не возвращает никаких значений, а просто очищает словарь.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Заключение</h3>\r\n\r\n<p>Методы изменения словарей предоставляют гибкие способы управления содержимым словаря:</p>\r\n\r\n<ul>\r\n\t<li><strong><code>del()</code></strong> — удаляет элемент по ключу, выбрасывая ошибку, если ключ отсутствует.</li>\r\n\t<li><strong><code>pop()</code></strong> — удаляет элемент по ключу и возвращает его значение, с возможностью указать значение по умолчанию.</li>\r\n\t<li><strong><code>popitem()</code></strong> — удаляет и возвращает пару ключ-значение, удаляя последнюю добавленную пару (или случайную, в старых версиях Python).</li>\r\n\t<li><strong><code>clear()</code></strong> — очищает весь словарь, делая его пустым.</li>\r\n</ul>\r\n\r\n<p>Эти методы являются важными инструментами при работе с коллекциями данных в Python и позволяют эффективно управлять содержимым словарей в различных ситуациях.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 51,
  "fields": {
    "topic": 51,
    "type": "text",
    "title": "Основные методы словарей",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h3 style=\"text-align:center;\">Основные методы словарей | <code>keys()</code>, <code>values()</code>, <code>items()</code>, <code>get()</code></h3>\r\n\r\n<p>Словари в Python являются мощным инструментом для хранения данных в виде пар \"ключ-значение\". Для работы с такими структурами данных предусмотрены различные методы, которые позволяют эффективно управлять и извлекать данные. Рассмотрим основные методы словарей: <code>keys()</code>, <code>values()</code>, <code>items()</code>, и <code>get()</code>. Они очень похожи и сейчас мы поймем их небольшую разницу.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>1. <code>keys()</code></h2>\r\n\r\n<p>Метод <code>keys()</code> используется для получения всех ключей, хранящихся в словаре. Результат работы метода — это не обычный список, а специальный объект <code>dict_keys</code>. Несмотря на то, что объект <code>dict_keys</code> не является списком, его можно итерировать (например, в цикле <code>for</code>), и он ведет себя подобно списку.</p>\r\n\r\n<p><strong>Основное преимущество:</strong> Этот метод позволяет легко получить доступ ко всем ключам в словаре для дальнейшего использования, например, при необходимости обработки всех ключей в каком-то цикле или проверке существования ключа.</p>\r\n\r\n<p>Что касается примера использования:<img alt=\"\" height=\"798\" name=\"carbon - 2025-01-27T230910.289.png\" src=\"https://ucarecdn.com/ea992cd0-4d35-45ae-a2bb-1baac29d8f30/\" width=\"2560\"><strong>Как это работает:</strong> Результат будет представлять собой объект <code>dict_keys</code>, который выглядит как список, но не является им. Для того чтобы его преобразовать в настоящий список, можно использовать функцию <code>list()</code>.<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T231003.305.png\" src=\"https://ucarecdn.com/a8175136-8143-433b-b43a-bed363936956/\" width=\"2560\"></p>\r\n\r\n<h2>2. <code>values()</code></h2>\r\n\r\n<p>Метод <code>values()</code> возвращает представление всех значений в словаре. Как и метод <code>keys()</code>, результат является объектом <code>dict_values</code>, который похож на список, но отличается от него. Этот метод полезен, если вам нужно получить доступ ко всем значениям, но без необходимости видеть или изменять ключи.</p>\r\n\r\n<p><strong>Основное преимущество:</strong> Метод <code>values()</code> позволяет извлекать все значения из словаря, что полезно, например, для подсчета общего количества или работы с результатами, независимо от ключей.</p>\r\n\r\n<p>Пример использования:<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T231228.027.png\" src=\"https://ucarecdn.com/b434508e-8f7f-4aa9-9364-aff301352383/\" width=\"2560\"><strong>Как это работает:</strong> Как и в случае с <code>keys()</code>, можно преобразовать объект <code>dict_values</code> в список с помощью функции <code>list()</code>.<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T231304.189.png\" src=\"https://ucarecdn.com/7f0f7ff4-5fe3-48cd-8294-ba24c9fec234/\" width=\"2560\"></p>\r\n\r\n<h2>3. <code>items()</code></h2>\r\n\r\n<p>Метод <code>items()</code> возвращает все пары \"ключ-значение\" из словаря в виде объекта <code>dict_items</code>, который является итерируемым и позволяет работать с парами данных. Это очень удобный метод, если нужно пройти по всем элементам словаря и получить как ключ, так и соответствующее значение.</p>\r\n\r\n<p><strong>Основное преимущество:</strong> <code>items()</code> возвращает кортежи, состоящие из двух элементов: ключа и значения, что удобно для итераций, когда нужно одновременно работать с обоими элементами.</p>\r\n\r\n<p><strong>Пример использования:</strong><img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T231405.896.png\" src=\"https://ucarecdn.com/6444276d-5f4d-4f10-81cc-e57badfcd0f2/\" width=\"2560\"><strong>Как это работает:</strong> Каждый элемент в <code>dict_items</code> — это кортеж, состоящий из двух элементов: первый — это ключ, второй — его значение. Можно пройтись по этим парам с помощью цикла <code>for</code>:<img alt=\"\" height=\"458\" name=\"carbon - 2025-01-27T231436.419.png\" src=\"https://ucarecdn.com/13abdb65-8be1-46a8-981d-50f1e721e88b/\" width=\"2560\">Попробуйте поиграться с подобным кодом у себя в IDE, чтобы понять, что именно подразумевает под собой этот метод.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>4. <code>get()</code></h2>\r\n\r\n<p>Метод <code>get()</code> используется для безопасного получения значения по ключу. Если ключ существует в словаре, возвращается соответствующее значение. Если ключ не найден, то вместо ошибки (как это происходит при прямом обращении через квадратные скобки) метод возвращает <code>None</code> (или другое значение по умолчанию, если оно указано).</p>\r\n\r\n<p><strong>Основное преимущество:</strong> Метод <code>get()</code> полезен, когда нужно безопасно обратиться к ключу и избежать ошибок, если ключа нет в словаре. Это делает код более устойчивым и защищенным от неожиданных сбоев.<img alt=\"\" height=\"798\" name=\"carbon - 2025-01-27T231632.754.png\" src=\"https://ucarecdn.com/fd556bf4-26b1-4efa-a3d4-e88a598fda2d/\" width=\"2560\"><strong>Как это работает:</strong> Метод <code>get()</code> позволяет избежать исключений, если ключа нет в словаре. Это особенно важно в больших приложениях, где частая проверка наличия ключа может быть неэффективной.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Резюме:</h3>\r\n\r\n<ul>\r\n\t<li><strong><code>keys()</code></strong> — метод для получения всех ключей в словаре.</li>\r\n\t<li><strong><code>values()</code></strong> — метод для получения всех значений в словаре.</li>\r\n\t<li><strong><code>items()</code></strong> — метод для получения всех пар \"ключ-значение\".</li>\r\n\t<li><strong><code>get()</code></strong> — безопасный способ получения значения по ключу.</li>\r\n</ul>\r\n\r\n<p>Каждый из этих методов полезен в различных ситуациях и позволяет эффективно работать с данными, хранящимися в словарях, делая код более читаемым и устойчивым к ошибкам.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 52,
  "fields": {
    "topic": 52,
    "type": "text",
    "title": "Вложенные словари",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>В Python словари могут быть использованы как значения для других словарей. Это позволяет создавать сложные структуры данных, такие как вложенные словари, которые могут хранить более сложные и многомерные данные.</p>\r\n\r\n<h3>Вложенные словари</h3>\r\n\r\n<p><strong>Вложенные словари</strong> — это словари, в которых значениями могут быть другие словари. Такой подход особенно полезен, когда нужно организовать данные, которые логически группируются в несколько уровней. Вложенные словари позволяют хранить данные в виде дерева, где каждый узел может содержать как примитивные данные, так и другие вложенные структуры.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Пример 1: Вложенные словари</h4>\r\n\r\n<p>Представим, что мы хотим хранить информацию о нескольких студентах, включая их имя, возраст и оценки. Вложенный словарь может выглядеть следующим образом:<img alt=\"\" height=\"584\" name=\"carbon - 2025-01-28T003543.501.png\" src=\"https://ucarecdn.com/26a9197e-f8c1-47a0-80dc-9dfcda65ea96/\" width=\"2560\"></p>\r\n\r\n<p>В этом примере:</p>\r\n\r\n<ul>\r\n\t<li>Каждый студент представлен ключом (например, <code>\"Alice\"</code>).</li>\r\n\t<li>Значением для каждого ключа является еще один словарь, который хранит возраст (<code>\"age\"</code>) и оценки (<code>\"grades\"</code>). Оценки, в свою очередь, тоже хранятся в виде словаря, где ключами являются предметы (например, <code>\"math\"</code>, <code>\"science\"</code>), а значениями — сами оценки.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Пример 2: Доступ к данным в вложенном словаре</h4>\r\n\r\n<p>Для того чтобы получить доступ к данным в вложенном словаре, нужно использовать несколько уровней индексации.<img alt=\"\" height=\"840\" name=\"carbon - 2025-01-28T003620.884.png\" src=\"https://ucarecdn.com/28417366-da2e-4812-8f50-aa161cb9f83e/\" width=\"2560\">Каждый уровень доступа соответствует одному словарю. Сначала мы обращаемся к словарю студентов, затем — к словарю конкретного студента, и, наконец, к его конкретной информации (например, возраст или оценка).</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h4>Пример 3: Изменение данных во вложенном словаре</h4>\r\n\r\n<p>Также можно изменять данные в вложенных словарях. Например, если мы хотим изменить возраст Алисы или добавить новую оценку для Боба, мы можем сделать это следующим образом:<img alt=\"\" height=\"712\" name=\"carbon - 2025-01-28T003651.537.png\" src=\"https://ucarecdn.com/c290c46e-0113-44c1-860e-281b6a7359da/\" width=\"2560\">Мы напрямую изменяем значение по ключу в нужном вложенном словаре.</p>\r\n\r\n<h3>Преимущества вложенных словарей</h3>\r\n\r\n<ol>\r\n\t<li><strong>Гибкость</strong>: Вложенные словари позволяют хранить сложные структуры данных, что делает их полезными для моделирования реальных объектов.</li>\r\n\t<li><strong>Удобство работы с данными</strong>: Они позволяют хранить данные по группам (например, по пользователям, категориям или любым другим признакам) и легко получать к ним доступ.</li>\r\n\t<li><strong>Управление данными</strong>: Можно удобно добавлять, изменять или удалять данные в любой части вложенной структуры.</li>\r\n</ol>\r\n\r\n<p>Еще один пример:</p>\r\n\r\n<h4>Вложенные словари с использованием циклов</h4>\r\n\r\n<p>Иногда в вложенных словарях могут быть более сложные структуры данных, например, списки. В таком случае можно использовать циклы, чтобы перебирать все данные.<img alt=\"\" height=\"798\" name=\"carbon - 2025-01-28T003756.502.png\" src=\"https://ucarecdn.com/e38eb4ae-92d1-46b7-944b-6bc99d5ec3f4/\" width=\"2560\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 53,
  "fields": {
    "topic": 53,
    "type": "text",
    "title": "Итерирование по словарям",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h3 style=\"text-align:center;\">Итерирование по словарям с использованием <code>enumerate()</code> и <code>zip()</code></h3>\r\n\r\n<p>В Python словари являются коллекциями пар \"ключ-значение\", и часто требуется перебирать такие словари для выполнения различных операций. Для этого существует несколько полезных инструментов, среди которых <code>enumerate()</code> и <code>zip()</code>, которые могут значительно упростить код и сделать его более удобочитаемым.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>1. <strong>Итерирование по словарям</strong></h3>\r\n\r\n<p>При итерировании по словарям Python, в отличие от списков, итерация происходит по ключам, а не по индексам. Это означает, что при простом цикле <code>for</code> по словарю мы будем работать с его ключами.</p>\r\n\r\n<p><img alt=\"\" height=\"522\" name=\"carbon - 2025-01-28T173251.366.png\" src=\"https://ucarecdn.com/fbbceab9-943a-4e3b-90c7-affeab5a80b3/\" width=\"2560\"><code>name Alice<br>\r\nage 30<br>\r\ncity New York</code></p>\r\n\r\n<p>Если нам нужно получить и ключи, и значения одновременно, можно использовать метод <code>.items()</code>, который возвращает пары ключ-значение.<img alt=\"\" height=\"438\" name=\"carbon - 2025-01-28T173331.215.png\" src=\"https://ucarecdn.com/41e9970f-e934-4b56-8236-49ed8d3eb8c8/\" width=\"2560\"></p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3>2. <strong>Использование <code>enumerate()</code> с итерированием по словарям</strong></h3>\r\n\r\n<p>Функция <code>enumerate()</code> полезна, когда нужно получать индекс элемента во время итерирования. Хотя в словарях нет индексов, можно использовать <code>enumerate()</code> для получения индекса ключа в процессе перебора.</p>\r\n\r\n<p><img alt=\"\" height=\"522\" name=\"carbon - 2025-01-28T173402.719.png\" src=\"https://ucarecdn.com/56031288-c6bf-4aa0-ab86-a2b7c0eac2ac/\" width=\"2560\">В этом примере мы видим, что <code>enumerate()</code> добавляет индекс к каждой паре \"ключ-значение\", что полезно, если важно знать, на каком месте в словаре находится текущая пара.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>3. <strong>Использование <code>zip()</code> для итерирования по нескольким словарям</strong></h3>\r\n\r\n<p>Функция <code>zip()</code> позволяет объединить несколько итерируемых объектов (например, списки, кортежи или словари) в одну последовательность, создавая кортежи из элементов на одинаковых позициях.</p>\r\n\r\n<p>Для словарей <code>zip()</code> часто используется, чтобы объединить ключи и значения из двух разных словарей или просто для обработки нескольких списков или других структур данных одновременно.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Итерирование по ключам и значениям двух словарей одновременно:<img alt=\"\" height=\"564\" name=\"carbon - 2025-01-28T173526.219.png\" src=\"https://ucarecdn.com/401dcee4-5d0b-42d3-a226-20cda6bb54c1/\" width=\"2560\"></p>\r\n\r\n<p><code>dict1 = {\"a\": 1, \"b\": 2, \"c\": 3}<br>\r\ndict2 = {\"x\": 10, \"y\": 20, \"z\": 30}</code></p>\r\n\r\n<p><code>for (key1, value1), (key2, value2) in zip(dict1.items(), dict2.items()):<br>\r\n&nbsp; &nbsp; print(f\"{key1}: {value1}, {key2}: {value2}\")</code><br>\r\nПопробуйте запустить программу у себя в IDE и посмотреть вывод</p>\r\n\r\n<p>В данном примере мы используем <code>zip()</code>, чтобы объединить пары \"ключ-значение\" из двух словарей и обрабатывать их одновременно в цикле.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>4. <strong>Практическое применение <code>enumerate()</code> и <code>zip()</code></strong></h3>\r\n\r\n<p>Эти функции полезны в реальных проектах, когда вам нужно обрабатывать данные в структурированном виде, например:</p>\r\n\r\n<ul>\r\n\t<li>При обработке результатов из разных источников (например, объединение данных из разных API).</li>\r\n\t<li>Когда нужно синхронизировать данные из нескольких источников и работать с ними одновременно.</li>\r\n\t<li>При анализе или выводе данных с их индексацией для более точной обработки.</li>\r\n</ul>"
  }
},
{
  "model": "courses.content",
  "pk": 54,
  "fields": {
    "topic": 54,
    "type": "text",
    "title": "Модуль Random",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h1 style=\"text-align:center;\">Урок по модулю <code>random</code> в <code>Python</code></h1>\r\n\r\n<p><strong>Цель урока: </strong>Изучить основные функции модуля random и научиться их применять на практике для решения различных задач.&nbsp;</p>\r\n\r\n<h3>Введение:</h3>\r\n\r\n<p>Модуль <code>random</code> в <code>Python</code>&nbsp;предоставляет функции для генерации случайных чисел и выполнения случайных выборок, перемешиванния последовательностей и других операций, связанных со случайностью. Это полезно для симуляций, игр, тестирования и многого другого. В этом уроке мы рассмотрим основные функции модуля <code>random</code>.</p>\r\n\r\n<h4>Импорт модуля:</h4>\r\n\r\n<p>Для использования функций модуля <code>random</code>, его необходимо импортировать.</p>\r\n\r\n<p><img alt=\"\" height=\"268\" name=\"carbon - 2025-01-28T181642.993.png\" src=\"https://ucarecdn.com/502d995d-52d8-47af-adc7-6572a40c8277/\" width=\"1742\"></p>\r\n\r\n<h2 style=\"text-align:center;\">Основные функции модуля <code>random</code></h2>\r\n\r\n<p><code>random()</code> - Возвращает случайное число от <code>0</code> до <code>1</code>(не включая <code>1</code>).</p>\r\n\r\n<p><img alt=\"\" height=\"396\" name=\"carbon - 2025-01-28T183058.360.png\" src=\"https://ucarecdn.com/dcd11e2d-8837-4210-a2bd-a5254d2d7d33/\" width=\"1742\"></p>\r\n\r\n<p><code>uniform(a, b)</code> - Возвращает случайное число в заданном диапозоне<code>[a, b]</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"396\" name=\"carbon - 2025-01-28T194907.496.png\" src=\"https://ucarecdn.com/969d1fb4-152b-4a6a-9ef9-bb236d42518b/\" width=\"1742\"></p>\r\n\r\n<p><code>randint(a,</code><code>b)</code> - Возвращает случайное целое число вы диапазоне от a до b включительно.</p>\r\n\r\n<p><img alt=\"\" height=\"396\" name=\"carbon - 2025-01-28T183620.714.png\" src=\"https://ucarecdn.com/96e86945-40ee-4f42-8673-7115d65f8467/\" width=\"1742\"></p>\r\n\r\n<p><code>choice(seq)</code> - Возвращает случайный элемент из последовательности.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"438\" name=\"carbon - 2025-01-28T183952.014.png\" src=\"https://ucarecdn.com/29422358-fa7f-4a14-a638-3b4675566d42/\" width=\"1742\"></p>\r\n\r\n<p><code>sample(seq, k)</code> - Возвращает список длины k из уникальных элементов, выбранных из последовательности <code>seq</code>.</p>\r\n\r\n<p><img alt=\"\" height=\"438\" name=\"carbon - 2025-01-28T184442.519.png\" src=\"https://ucarecdn.com/4f23def0-7629-499e-8e3d-d0856469f3d5/\" width=\"1742\"></p>\r\n\r\n<p><code>shuffle(seq)</code> - Перемешивает элементы последовательности на месте.</p>\r\n\r\n<p><img alt=\"\" height=\"438\" name=\"carbon - 2025-01-28T193339.352.png\" src=\"https://ucarecdn.com/696ef570-1508-4ffb-a14c-07e6822e0de9/\" width=\"1742\"></p>\r\n\r\n<p><strong>Резюме:</strong></p>\r\n\r\n<p>В данном уроке мы рассмотрели основные функции в модуле <code>random</code>, предлагаю закрепить тему в следующих шагах и решить предложенные задачи в последнем шаге данного урока.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 55,
  "fields": {
    "topic": 54,
    "type": "text",
    "title": "Задачи",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>В данном шаге представлены задачи для самостоятельного решения, которые помогут закрепить модуль <code>random</code> лучше.</p>\r\n\r\n<p><strong>Задача 1:</strong>&nbsp;Сгенерируйте случайное число от 1 до 100 и проверьте, является ли оно четным.</p>\r\n\r\n<p><strong>Задача 2:</strong>&nbsp;Создайте список из 10 случайных чисел от 1 до 50.</p>\r\n\r\n<p><strong>Задача 3:</strong>&nbsp;Перемешайте колоду карт (список строк), перемешайте и выберите 5 карт.</p>\r\n\r\n<p><strong>Задача 4:</strong>&nbsp;Создайте список из 100 случайных чисел от 1 до 1000 и найдите минимальное и максимальное значение.</p>\r\n\r\n<p><strong>Задача 5:</strong>&nbsp;Создайте список из 20 случайных чисел от 1 до 100 и отсортируйте его по возрастанию.</p>\r\n\r\n<p><strong>Задача 6:</strong>&nbsp;Сгенерируйте случайный цвет в формате HEX.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 56,
  "fields": {
    "topic": 55,
    "type": "text",
    "title": "Работа с временем",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>В прошлом мы уже сталкивались с вами с модулями. В курсе для начинающих мы очень много задач решали с модулем math. В том же уроке мы разобрали поверхностно, как именно работают модули, чем они являются и где применяются. Для общей компетенции и удобной работы с данными и процессами junior - y необходимо знать какое - то количество модулей хотя бы на поверхностном уровне. Обычному же пользователю, желающему уметь работать с python также не помешает знать самые базовые модули. Данный модуль(на степике) предназначен для изучения двух легких, базовых модулей после изучения основ (не считая модуль math). Cейчас мы разберем самый простой из них - модуль time для работы с временем</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Модуль <code>time</code> в Python предоставляет функции для работы с временем. Он в основном используется для работы с временными интервалами, замерами времени, а также для работы с системным временем (в зависимости от операционной системы). В отличие от модуля <code>datetime(о нем в курсе до Junior разработчика)</code>, который ориентирован на работу с датами и временем, <code>time</code> чаще используется для измерений времени, задержек, а также взаимодействия с системными часами.</p>\r\n\r\n<h3 style=\"text-align:center;\">Давайте поговорим о самых интересных и легких функциях из модуля <code>time</code></h3>\r\n\r\n<h3>Основные функции модуля <code>time</code></h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong><code>time.time()</code></strong><br>\r\n\tВозвращает текущее время в секундах с эпохи (1 января 1970 года). Это значение представляет собой количество секунд, прошедших с \"эпохи UNIX\" (1 января 1970 года). Оно используется для измерения времени в секундах с плавающей точкой.<img alt=\"\" height=\"480\" name=\"carbon - 2025-01-28T192934.089.png\" src=\"https://ucarecdn.com/af4d2827-6c29-4445-9acb-1d9b4fc1fe3b/\" width=\"2560\"></p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong><code>time.sleep(seconds)</code></strong><br>\r\n\tЗадерживает выполнение программы на указанное количество секунд. Это полезно для реализации пауз между операциями или для создания задержек.<img alt=\"\" height=\"608\" name=\"carbon - 2025-01-28T193540.188.png\" src=\"https://ucarecdn.com/5cee4429-c780-4548-94ea-da620290a2c5/\" width=\"2560\"></p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong><code>time.localtime([seconds])</code></strong><br>\r\n\tВозвращает структурированное время в виде кортежа, соответствующее локальному времени. Если аргумент не передан, используется текущее время. Если передан аргумент <code>seconds</code>, то это количество секунд с эпохи, и функция возвращает время, соответствующее этим секундам.<img alt=\"\" height=\"608\" name=\"carbon - 2025-01-28T193647.953.png\" src=\"https://ucarecdn.com/7c03b1c8-52d3-49e2-b0ac-7bdd11585c89/\" width=\"2560\"></p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong><code>time.gmtime([seconds])</code></strong><br>\r\n\tПохож на <code>localtime()</code>, но возвращает время в формате UTC (универсальное координированное время). Также можно передавать количество секунд с эпохи.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong><code>time.mktime(t)</code></strong><br>\r\n\tПреобразует структуру времени в формате <code>struct_time</code> в количество секунд с эпохи (1 января 1970 года). Это обратная функция для <code>localtime()</code> и <code>gmtime()</code>.<img alt=\"\" height=\"522\" name=\"carbon - 2025-01-28T193824.754.png\" src=\"https://ucarecdn.com/6de30891-d47d-4825-90aa-f66532c712df/\" width=\"2560\"></p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong><code>time.strftime(format[, t])</code></strong><br>\r\n\tПреобразует объект времени (структуру <code>struct_time</code>) в строку по указанному формату. Если аргумент <code>t</code> не передан, используется текущее локальное время.<img alt=\"\" height=\"522\" name=\"carbon - 2025-01-28T193908.562.png\" src=\"https://ucarecdn.com/1d6d1e5c-3e1b-4a4b-81d4-c440bbaa1762/\" width=\"2560\"><code>2025-01-28 10:45:30</code></p>\r\n\r\n\t<p>Форматирование времени с помощью <code>strftime()</code> работает следующим образом</p>\r\n\t</li>\r\n</ol>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><code>%Y</code> — год (например, 2025)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><code>%m</code> — месяц (например, 01)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><code>%d</code> — день месяца (например, 28)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><code>%H</code> — часы (например, 10)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><code>%M</code> — минуты (например, 45)</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><code>%S</code> — секунды (например, 30)</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Просто приведем пример типовой задачи, для того, чтобы понять, как же все - таки иногда стоит работать с таким, казалось бы, неприменимым модулем:<img alt=\"\" height=\"862\" name=\"carbon - 2025-01-28T194839.970.png\" src=\"https://ucarecdn.com/b484cc24-8f32-4a09-ae89-862fcf7d8c39/\" width=\"2560\">Все просто: Запоминаем время начала и отнимаем его от времени конца. Таким образом можно засекать время программы и следить за производительностью какого - либо кода</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Модуль <code>time</code> в Python предоставляет множество полезных функций для работы с временем, включая измерение времени выполнения кода, преобразование времени в различные форматы и создание задержек. Хотя для работы с датами и временем можно использовать более мощный модуль <code>datetime</code>, <code>time</code> идеален для более низкоуровневых операций, таких как тайминг, задержки и взаимодействие с системным временем.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 57,
  "fields": {
    "topic": 56,
    "type": "text",
    "title": "Введение в функции",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Функции в Python — это блоки кода, которые выполняют определенные задачи и могут быть вызваны в различных частях программы. Они помогают организовать код, сделать его более читаемым и повторно используемым. В Python функции определяются с помощью ключевого слова&nbsp;<code>def</code>.</p>\r\n\r\n<h3>Основные понятия:</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Определение функции</strong>: Функция определяется с помощью ключевого слова&nbsp;<code>def</code>, за которым следует имя функции и круглые скобки&nbsp;<code>()</code>. Внутри скобок могут быть указаны параметры функции. Тело функции начинается с двоеточия и пишется с отступом.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Параметры функции</strong>: Это переменные, которые передаются в функцию при ее вызове. Они указываются в круглых скобках после имени функции.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Возвращаемое значение</strong>: Функция может возвращать значение с помощью ключевого слова&nbsp;<code>return</code>. Если&nbsp;<code>return</code>&nbsp;не указан, функция возвращает&nbsp;<code>None</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Вызов функции</strong>: Чтобы выполнить код внутри функции, ее нужно вызвать по имени, передав необходимые аргументы.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Давайте разберем более детально, что это такое и как с этим работать.&nbsp;</p>\r\n\r\n<h2>Синтаксис</h2>\r\n\r\n<h3>Как создать функцию без параметров?</h3>\r\n\r\n<p>Функция без параметров определяется с помощью ключевого слова&nbsp;<code>def</code>, за которым следует имя функции и пустые круглые скобки&nbsp;<code>()</code>. Тело функции пишется с отступом и может содержать любой код. Если функция должна вернуть результат, используется ключевое слово&nbsp;<code>return</code>. Если&nbsp;<code>return</code>&nbsp;отсутствует, функция возвращает&nbsp;<code>None</code>.</p>\r\n\r\n<p>Функция определяется с помощью ключевого слова <code>def</code>&nbsp;<img alt=\"\" height=\"438\" name=\"carbon - 2025-01-29T003044.242.png\" src=\"https://ucarecdn.com/9fd568d6-8570-4501-9249-fa1f27f60554/\" width=\"2560\">Здесь мы создаем функцию (блок функции также отделяется символами пробела или табуляцией) которую можем использовать впоследствии в этом же коде или, (при правильном импорте (как модули)) использовать и в других программах.</p>\r\n\r\n<p>Эта функция при ее вызове буквально выводит надпись на экран <code>'Hello World!'</code>&nbsp;ее можно использовать в любой части программы сколько угодно раз просто вызывая ее как любую другую команду в python.</p>\r\n\r\n<p><img alt=\"\" height=\"564\" name=\"carbon - 2025-01-29T020529.438.png\" src=\"https://ucarecdn.com/1587f661-8de4-43b8-be94-7b7546a2bdb8/\" width=\"2560\"></p>\r\n\r\n<p>На самом деле функциональное программирование - парадигма программирования, в которой код реализуется на основе работы чередующихся функций. Является одной из нескольких парадигм, которые могут быть реализованы в python. О других парадигмах мы, кстати, поговорим тоже в следующих курсах.</p>\r\n\r\n<p>Что касается функций, то это блоки кода, которые иногда принимают, а иногда нет какие - то значения и на их основе выводят какой - то результат. О функциях с параметрами к поговорим в следующих уроках.</p>\r\n\r\n<p>Функция может выполнять любое количество действий:<img alt=\"\" height=\"650\" name=\"carbon - 2025-01-29T020655.555.png\" src=\"https://ucarecdn.com/7d49308d-0f8a-45c8-bd14-b6110fa06ce9/\" width=\"2560\"></p>\r\n\r\n<h3>Преимущества функций без параметров</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Простота</strong>: Функции без параметров легко создавать и использовать, так как они не требуют передачи аргументов.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Универсальность</strong>: Они могут выполнять задачи, которые не зависят от внешних данных.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Изоляция</strong>: Такие функции изолируют выполнение конкретной задачи, что упрощает отладку.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Когда использовать функции без параметров?</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Для выполнения повторяющихся задач</strong>: Если в программе есть блок кода, который выполняется несколько раз, его можно вынести в функцию.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Для инициализации или настройки</strong>: Например, функция может выводить приветственное сообщение или настраивать начальные значения переменных.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Для выполнения задач, не требующих входных данных</strong>: Например, вывод текущего времени, генерация случайного числа и т.д.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Функции с возвратом значения:</h2>\r\n\r\n<p>В Python функции могут возвращать значения с помощью ключевого слова&nbsp;<code>return</code>. Это позволяет использовать результат функции в других частях программы.&nbsp;</p>\r\n\r\n<h3>1.&nbsp;<strong>Что делает&nbsp;<code>return</code>?</strong></h3>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><strong><code>return</code></strong>&nbsp;завершает выполнение функции и возвращает значение, которое можно использовать дальше в программе.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>После выполнения&nbsp;<code>return</code>&nbsp;функция прекращает работу, и управление передается обратно в то место, где функция была вызвана.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Если&nbsp;<code>return</code>&nbsp;не указан, функция по умолчанию возвращает&nbsp;<code>None</code>.<img alt=\"\" height=\"564\" name=\"carbon - 2025-01-29T024601.545.png\" src=\"https://ucarecdn.com/4decd8dc-a07d-49cc-8e96-1ef62fed0d44/\" width=\"2560\"></p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>Также функции умеют выводить кортежи элементов. Допустим нам нужно получить от списка сумму всех чисел и результат их умножения. Тогда функция позволяет получать нам на выходе кортеж значений для этого случая.</p>\r\n\r\n<p><img alt=\"\" height=\"778\" name=\"carbon - 2025-01-29T022725.580.png\" src=\"https://ucarecdn.com/d0bd1730-2745-4533-b709-5787ff2daa84/\" width=\"2560\"></p>\r\n\r\n<p>Таким образом, функции позволяют выводить нам значения любого типа для корректной работы с ними.</p>\r\n\r\n<h3>Заключение</h3>\r\n\r\n<p>Функции — это простой, но мощный инструмент в Python. Они помогают организовать код, сделать его более читаемым и удобным для повторного использования. Начинайте с простых функций, чтобы понять их работу, а затем переходите к более сложным конструкциям, таким как функции с параметрами, рекурсия и лямбда-функции (о них - в следующем курсе). В любом случае, сейчас мы с вами разберем различные виды функций и поработаем с параметрами и аргументами.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 58,
  "fields": {
    "topic": 57,
    "type": "text",
    "title": "Функции с параметрами",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>В прошлом уроке мы изучали только функции, которые выполняли процедуры, не зависящие от входных данных, то есть, всегда выполняющие одни и те же действия вне зависимости от ситуации. Теперь же мы начнем работать с функциями, которые принимают в себя значения, что - то с ними делают и на их основе возвращают какой - то результат.</p>\r\n\r\n<h2 style=\"text-align:center;\">Функции с параметрами | Прием значений извне</h2>\r\n\r\n<p>Функции с параметрами — это функции, которые принимают входные данные (аргументы) для выполнения своих задач. Параметры позволяют функциям быть более гибкими и универсальными, так как они могут работать с разными значениями, переданными извне. Мы поработаем с функциями, разберем простые программы и проработаем с практикой.</p>\r\n\r\n<h3>Зачем нужны функции с параметрами?</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Гибкость</strong>: Функции могут выполнять одни и те же действия с разными входными данными.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Повторное использование</strong>: Одна функция может быть использована для обработки различных данных.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Упрощение кода</strong>: Параметры позволяют избежать дублирования кода, так как одна функция может заменить множество похожих функций.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Модульность</strong>: Функции с параметрами делают код более модульным и удобным для тестирования.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Как создать функцию с параметрами?</h3>\r\n\r\n<p>Функция с параметрами определяется с помощью ключевого слова&nbsp;<code>def</code>, за которым следует имя функции и круглые скобки&nbsp;<code>()</code>. Внутри скобок указываются параметры, разделенные запятыми. Тело функции пишется с отступом и может использовать переданные параметры для выполнения задач.<img alt=\"\" height=\"480\" name=\"carbon - 2025-01-29T021624.584.png\" src=\"https://ucarecdn.com/fc68cbd6-5529-450e-ae73-40f29b932e3f/\" width=\"2560\">Разберем пример: Как написать функцию сложения двух чисел? Для этого нужно принять 2 числа, сделать над ними операцию и выдать результат. Таким образом напишем функцию:&nbsp;<img alt=\"\" height=\"564\" name=\"carbon - 2025-01-29T021831.876.png\" src=\"https://ucarecdn.com/25705d77-899e-468c-a568-c16b05a35671/\" width=\"2560\">Так, функция summ принимает в себя 2 переменные, с которыми работает и помещает результат в переменную result. Впоследствии эта переменная и возвращается функцией для работы с ней уже внутри основной программы.</p>\r\n\r\n<p>Другой пример: Создадим программу для суммирования всех элементов списка и вывода количества его элементов<img alt=\"\" height=\"692\" name=\"carbon - 2025-01-29T022349.588.png\" src=\"https://ucarecdn.com/8dca5567-db99-4d07-a468-7dfee82c2f9e/\" width=\"2560\">Таким образом мы принимаем список для функции <code>(list_1)</code>&nbsp;и создаем внутри функции переменную counter для подсчета суммы элементов. После этого, с помощью цикла считаем сумму каждого элемента и выводим на экран.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Поведение переменных внутри функций</h2>\r\n\r\n<h2>Локальные переменные</h2>\r\n\r\n<p>Обратите внимание, внутри функций переменные являются <strong>локальными!&nbsp;</strong>Это значит, что переменные, которые объявлены (созданы) внутри функций только там и остаются. Они не могут быть использованы в основной программе.</p>\r\n\r\n<p><img alt=\"\" height=\"564\" name=\"carbon - 2025-01-29T023241.033.png\" src=\"https://ucarecdn.com/9756e502-7598-4af0-ba92-b022aa118ed1/\" width=\"2560\">Однако:<img alt=\"\" height=\"608\" name=\"carbon - 2025-01-29T023433.135.png\" src=\"https://ucarecdn.com/b985d99b-8742-4086-9a7b-57a0e20a10c8/\" width=\"2560\"></p>\r\n\r\n<h4>Особенности локальных переменных:</h4>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p>Создаются при вызове функции.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Уничтожаются после завершения работы функции.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Не конфликтуют с переменными вне функции, даже если имеют одинаковые имена.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<h2>Глобальные переменные</h2>\r\n\r\n<p>Если локальные переменные - те, которые объявлены внутри функции, то глобальные переменные - переменные, которые объявлены вне функции, то есть, в основной программе. Это те же самые переменные, которые мы создавали.</p>\r\n\r\n<p>Их основное отличие в том, что глобальные переменные можно использовать внутри функций, в то время, как локальные внутри программы - нет.&nbsp;<img alt=\"\" height=\"650\" name=\"carbon - 2025-01-29T023948.146.png\" src=\"https://ucarecdn.com/1fe1934b-d239-43a9-bb1d-77f478f9aebc/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\">Изменение глобальной переменной внутри функции</h2>\r\n\r\n<p>Бывает так, что необходимо с помощью функции изменить глобальную переменную. Для того, чтобы указать функции, что нам нужно не объявить переменную, а изменить существующую и изменить ее на уровне всей программы, нам нужно указать ключевое слово <code>global</code>, которое покажет, что мы работаем с переменной извне<img alt=\"\" height=\"820\" name=\"carbon - 2025-01-29T024329.652.png\" src=\"https://ucarecdn.com/952d6721-b751-4261-8ee6-67598fb8d0aa/\" width=\"2560\">Таким образом, мы смогли изменить значение глобальной переменной с помощью функции.</p>\r\n\r\n<p>Локальные и глобальные переменные — это важные концепции в Python, которые помогают управлять областью видимости данных. Локальные переменные изолированы внутри функций, что делает код более безопасным и предсказуемым. Глобальные переменные доступны везде, но их следует использовать с осторожностью.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Функции с параметрами — это мощный инструмент, который позволяет создавать гибкие и универсальные программы. Они принимают данные извне, обрабатывают их и возвращают результат. Использование параметров делает код более модульным, читаемым и удобным для повторного использования.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 59,
  "fields": {
    "topic": 58,
    "type": "text",
    "title": "try - except",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Как мы знаем, во время исполнения программы могут происходить различные ошибки и нужно уметь как - то их обрабатывать, чтобы программа не сворачивалась при первой ошибке, а научилась обрабатывать неожиданные ситуации и \"достойно\" реагировать на каждую из потенциальных ошибок.&nbsp;</p>\r\n\r\n<h3><strong>Что такое <code>try-except</code>?</strong></h3>\r\n\r\n<p><code>try-except</code> используется для обработки ошибок (исключений), которые могут возникнуть во время выполнения программы. Вместо того чтобы программа аварийно завершалась при ошибке, она может продолжить выполнение или выполнить альтернативные действия.</p>\r\n\r\n<p>Вот подробное объяснение конструкции <strong><code>try-except</code></strong> в Python:</p>\r\n\r\n<h3><strong>Как это работает?</strong></h3>\r\n\r\n<ul>\r\n\t<li><strong><code>try:</code></strong> — блок кода, который может вызвать исключение.</li>\r\n\t<li><strong><code>except:</code></strong> — блок кода, который выполняется, если возникает ошибка.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Давайте попробуем в своем IDE поделить 10 / 0 просто так. Что может пойти не так?</p>\r\n\r\n<p><img alt=\"\" height=\"150\" name=\"image.png\" src=\"https://ucarecdn.com/d8198557-cfa2-4dac-b6a2-1b1fad57f6b6/\" width=\"805\"></p>\r\n\r\n<p>Дело в том, что python в случае какой - то \"плохой\" ситуации - выбрасывает ошибку на экран. В случае с делением на ноль такая же ситуация, ведь на ноль делить нельзя. Давайте попробуем обойти ошибку и сделать так, чтобы программа не просто сворачивалась при выбросе ошибки, а что - то сделала и продолжила свою работу<img alt=\"\" height=\"564\" name=\"carbon - 2025-01-29T032135.396.png\" src=\"https://ucarecdn.com/96ede1eb-4344-4f79-9272-44b30e0a8e6d/\" width=\"2560\">Более показательный пример:<img alt=\"\" height=\"736\" name=\"carbon - 2025-01-29T032245.280.png\" src=\"https://ucarecdn.com/5f1941ac-92fd-4986-bf7b-f3b6ba29f9d3/\" width=\"2560\"></p>\r\n\r\n<p>Вывод:&nbsp;<img alt=\"\" height=\"110\" name=\"image.png\" src=\"https://ucarecdn.com/0dbc979d-7b38-4998-882d-f8528843f8dd/\" width=\"455\"></p>\r\n\r\n<h3><strong>Обработка нескольких типов исключений</strong></h3>\r\n\r\n<p>Вы можете обрабатывать разные типы ошибок отдельно.</p>\r\n\r\n<p><br>\r\nПример:<img alt=\"\" height=\"650\" name=\"carbon - 2025-01-29T032343.797.png\" src=\"https://ucarecdn.com/3dfac149-2d68-4dbb-b33a-6126d531fc6f/\" width=\"2560\"></p>\r\n\r\n<h3>&nbsp;</h3>\r\n\r\n<h3><strong>Исключение без указания типа (<code>except:</code>)</strong></h3>\r\n\r\n<p>Если вам нужно поймать любую ошибку:<img alt=\"\" height=\"564\" name=\"carbon - 2025-01-29T032416.804.png\" src=\"https://ucarecdn.com/db822d06-dd16-4868-ae21-2f793313a777/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3><strong>Использование блока <code>else</code></strong></h3>\r\n\r\n<p>Блок <code>else</code> выполняется, если ошибок не было:<img alt=\"\" height=\"692\" name=\"carbon - 2025-01-29T032454.003.png\" src=\"https://ucarecdn.com/b2b514b7-5719-4763-ba1f-4738eeeaa5f2/\" width=\"2560\"></p>\r\n\r\n<h3>&nbsp;</h3>"
  }
},
{
  "model": "courses.content",
  "pk": 60,
  "fields": {
    "topic": 59,
    "type": "text",
    "title": "Как быть?",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p><strong>Поздравляем с завершением курса!</strong></p>\r\n\r\n<p>Вы успешно прошли важный этап на пути к освоению Python, и мы гордимся вашими достижениями! Этот курс предоставил вам прочный фундамент и ключевые знания, которые необходимы для дальнейшего роста. Но это только начало, и впереди вас ждёт ещё более захватывающее путешествие.</p>\r\n\r\n<p>В следующих курсах мы используем <strong>новый подход</strong>, ориентированный на глубокое погружение в теорию и, что важнее всего, на <strong>практическую работу</strong>. Если на предыдущих этапах мы изучали основные концепции, теперь наш фокус смещается в сторону их глубокого освоения и применения на практике. Мы будем идти гораздо глубже, чем раньше, разбирать как старые, так и новые темы, тщательно анализируя их и решая задачи, которые встретятся на вашем пути.</p>\r\n\r\n<p>Этот курс станет более сложным и требует готовности не только к теоретическим, но и к практическим испытаниям. Мы будем активно работать с реальными проектами, задачами и кодом, и именно <strong>практика</strong> будет основным двигателем нашего обучения.</p>\r\n\r\n<p><strong>Готовы ли вы к новым вызовам?</strong> Этот курс предназначен для тех, кто не боится трудностей и готов идти вглубь, преодолевая новые сложности на пути к мастерству. Мы уверены, что с таким подходом вы сможете достичь новых высот и уверенно шагать вперёд.</p>\r\n\r\n<p><strong>Спасибо за ваше упорство и труд!</strong> Желаем удачи в следующем этапе и с нетерпением ждём вас на новых занятиях!</p>"
  }
},
{
  "model": "courses.content",
  "pk": 61,
  "fields": {
    "topic": 60,
    "type": "text",
    "title": "Что бы хотелось увидеть в новых курсах?",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Привет! Этот курс по Python — один из наших первых, и мы постоянно работаем над тем, чтобы делать обучение еще лучше. Нам важно услышать твое мнение: какие темы тебе хотелось бы разобрать глубже? Возможно, есть сложные моменты, которые хотелось бы объяснить понятнее, или тебе не хватает практики, реальных задач, разборов ошибок?</p>\r\n\r\n<p>Мы только в начале пути, и каждый отзыв помогает нам становиться лучше. Нам важно понимать, в каком формате тебе удобнее учиться: больше практики, теории, проектов или чего-то еще? Поделись своими мыслями в комментариях — это поможет нам развивать курсы и делать их максимально полезными!</p>"
  }
},
{
  "model": "courses.content",
  "pk": 62,
  "fields": {
    "topic": 61,
    "type": "text",
    "title": "Решение задачи 1: Two Sum | Две суммы",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center\">Решение задачи 1: Two Sum | Две суммы</h2>\r\n\r\n<p><img alt=\"\" height=\"438\" name=\"image.png\" src=\"https://ucarecdn.com/92279b36-ba3d-413d-9b7c-8cd9f1b7748c/\" width=\"1016\" /></p>\r\n\r\n<p>Здесь мы видим явное решение данной задачи. Давайте разберем подробно каждый шаг <strong>построчно</strong>.&nbsp;</p>\r\n\r\n<p><strong>строка 1</strong>.На первой строке мы видим приемку списка. Первым принимается число цикольного выражения <code>(for i in range(int(input())))</code> где <code>int(input()) который в конце</code>&nbsp;- количество чисел внутри списка. Допустим, вводим 3. Теперь цикл 3 раза запросит <code>int(input()) - который вначале</code> и поместит его в цикл</p>\r\n\r\n<p><strong>строка 2</strong>. Прием таргета (сумма двух чисел в списке должна давать это число)</p>\r\n\r\n<p><strong>строка 4</strong>. Флаг для завершения программы. Так как нам необходимо только одно решение - первое подходящее, следовательно нам нужен флаг, который сменится на True после нахождения правильного решения и завершит программу.&nbsp;</p>\r\n\r\n<p><strong>строка 5.&nbsp;</strong>Данная строка проходится по всему списку и <code>переменная i</code> принимает <strong>его индексы</strong>, не сами числа. Дальше будет легче доставать числа и выводить индексы на экран (по условию задачи)</p>\r\n\r\n<p><strong>строка 6.&nbsp;</strong>Цикл - принимающий числа, которые идут после i. Как по условию. Если i - это индекс условно первого числа, то j будет принимать все числа после первого и суммировать их. Иными словами, если у нас есть список [1, 2, 3, 4] то когда первый цикл примет число 1, второй цикл будет суммировать эту единицу с всеми последующими числами то есть будет искать сумму, которая дает таргет в таком порядке: <code>1 + 2; 1 + 3; 1 + 4; | 2 + 3; 2 + 4; | 3 + 4 |</code>&nbsp;То есть первое число - по порядку из списка, а второе - все после него.</p>\r\n\r\n<p><strong>строка 7.&nbsp;</strong>Условие на нахождение той самой суммы. Если первое число + второе число дает таргет, выполняем вывод и завершаем программу</p>\r\n\r\n<p><strong>строка 8.</strong>&nbsp;Выводим на экран список из двух тех самых индексов</p>\r\n\r\n<p><strong>строка 9.&nbsp;</strong>Для того, чтобы внешний цикл не повторялся, меняем флаг на True, ведь ниже у нас есть условие на продолжение цикла - 11 и 12 строки. Нет смысла считать дальше, так как мы нашли решение, а программа требует первое найденное. Поэтому этот флаг показывает, что наша сумма уже найдена и можно не продолжать считать</p>\r\n\r\n<p><strong>строка 10.&nbsp;</strong>Флаг показывает только внешнему циклу, продолжать перебирать числа или же нет. Для завершения внутреннего цикла (его тоже нет смысла считать, так как <strong>решение уже найдено</strong>) используем оператор break</p>\r\n\r\n<p><strong>строка 11.&nbsp;</strong>Условие на продолжение перебора внешнего цикла. Если решение еще не найдено (<code>found == False</code>) то продолжать поиск. Если же найдено ( <code>if flag == True:</code>) или можно писать просто (<code>if flag:</code>)&nbsp;</p>\r\n\r\n<p><strong>строка 12.&nbsp;</strong>В таком случае завершить и внешний цикл с помощью <code>break</code></p>\r\n\r\n<p><em><strong>Решение на LeetCode:</strong></em></p>\r\n\r\n<p><img alt=\"\" height=\"224\" name=\"image.png\" src=\"https://ucarecdn.com/d37a0408-1b9a-47e6-93fd-67705092e0e0/\" width=\"1234\" />Тут то же самое, только оформлено в виде ООП (о нем у нас есть отдельный курс, который готовится к выходу) и методами внутри класса (о них мы уже говорили в нашем втором курсе по python). В данном коде приемку оформляет метод, а <code>return </code>заменяет нам оба <code>break</code> для внутреннего и внешнего цикла так как <code>return</code>&nbsp;полностью сворачивает функцию и выводит результат</p>"
  }
},
{
  "model": "courses.content",
  "pk": 63,
  "fields": {
    "topic": 63,
    "type": "text",
    "title": "Решение задачи 3 | Римское в арабское",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 3 | Римское в арабское</h2>\r\n\r\n<p>Вот само условие задачи с LeetCode:&nbsp;<img alt=\"\" height=\"1080\" name=\"image.png\" src=\"https://ucarecdn.com/1aa8a087-4c4d-4314-81df-80b9b3f5d209/\" width=\"1210\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Принимается на вход строка и конвертируется в привычное нам число. Так как существуют различные необычные случаи (нельзя просто обработать каждую цифру по отдельности) то нам нужно обработать сначала случаи \"пар\" например: 'IV' или 'XC' а потом уже пройтись по обычным оставшимся цифрам.&nbsp;</p>\r\n\r\n<p>Решение для LeetCode:</p>\r\n\r\n<p><img alt=\"\" height=\"2798\" name=\"carbon - 2025-02-01T151154.065.png\" src=\"https://ucarecdn.com/8bf1bb41-51aa-4e54-bddc-11b9f2fa2341/\" width=\"2560\"></p>\r\n\r\n<p>На самом деле код очень прост. Мы просто обрабатываем различные случаи, проходясь по строке ровно столько раз, сколько может быть у нас значений.&nbsp;</p>\r\n\r\n<p><strong>строка 3.&nbsp;</strong>Создается счетчик (именно его мы будем выводить по окончанию)</p>\r\n\r\n<p><strong>строка 4.&nbsp;</strong>Особенных значений у нас всего 6 и все мы заменим на пустую строку и прибавим это значение к счетчику. То есть: Нашли условно в строке IX, удалили из строки и прибавили к счетчику. Поэтому цикл проходиться только 7 раз, ведь это максимальное количество разнообразий. Даже если все случаи будут в числе, они все заменятся за 7 проходов цикла.</p>\r\n\r\n<p><code>Метод replace() : replace(arg1, arg2)</code>&nbsp;где <code>arg1 </code>заменится на <code>arg2</code>. У нас же <code>s.replace('IV', '')</code> заменяет IV на пустую строку.</p>\r\n\r\n<p><strong>строка 5 - 6.</strong>&nbsp;Если строка пустая, заканчиваем программу и выводим счетчик на экран (ведь строка пуста, нечего больше считать)</p>\r\n\r\n<p><strong>строки 7 - 24.&nbsp;</strong>Обработчики различных случаев. Если нашлась такая последовательность - удалить ее из строки и прибавить значение к счетчику. Затем идти дальше</p>\r\n\r\n<p><strong>строка 26. </strong>Такой же самый момент. Только тут мы обрабатываем уже оставшиеся простые цифры.&nbsp;</p>\r\n\r\n<p><strong>строка 27 - 49.&nbsp;</strong>Такой же обработчик, как и в прошлый раз, только теперь уже прибавляем не просто, допустим, 10,&nbsp; а количество десяток * 10.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2 style=\"text-align:center;\"><strong>Статистика задачи:</strong></h2>\r\n\r\n<p><img alt=\"\" height=\"554\" name=\"image.png\" src=\"https://ucarecdn.com/e4a5474e-fbcd-4174-b7c0-bfc14d1ec005/\" width=\"980\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 64,
  "fields": {
    "topic": 64,
    "type": "text",
    "title": "Решение задачи 4 | Самый длинный общий префикс",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 4 | Самый длинный общий префикс</h2>\r\n\r\n<p><em><strong>Решение для LeetCode:</strong></em><img alt=\"\" height=\"1204\" name=\"carbon - 2025-02-01T152525.747.png\" src=\"https://ucarecdn.com/0986b18e-5d05-4653-b62c-731c4bfcb691/\" width=\"2560\"></p>\r\n\r\n<p>Давайте разберем каждую строку подробно.</p>\r\n\r\n<p>Алгоритм в том, чтобы выбрать какое - то слово (в нашем случае - самое минимальное, ведь нет смысла сравнивать дальше, так как префикс в таком случае уже не общий будет. Ведь длина самого минимального слова - и есть максимально возможная длина префикса) выбирать из него по букве и сравнивать со всеми остальными словами. Если буква есть в том же срезе, что и у нашего слова, то добавляем ее как общую для всех.&nbsp;</p>\r\n\r\n<p>Строки 3 - 4. Определения переменных</p>\r\n\r\n<p>Строка 5. Так как нам нужны именно срезы [0:0] работать не будет, а также если слово длиной 4 символа срез [0:4] даст нам только первые 3, так как последний индекс в срезе идет не включительно. Поэтому ставим от 1 до длины нашего слова + 1.</p>\r\n\r\n<p>Строка 6. Создаем флаг. Если следующая буква хоть где - то не будет общей - закрываем программу и выводим результат.</p>\r\n\r\n<p>Строка 7. Данная переменная будет олицетворять нашу строку, которую мы проверяем. Если в слове flow, то сначала она заберет от этого слова только f и проверит (как в строке 10) на вхождение в той же позиции этой буквы. Дальше с fl и так далее.</p>\r\n\r\n<p>Строка 8 - 9. Проход по словам и только если flag = True, то есть префиксы все еще общие.</p>\r\n\r\n<p>Строка 10. Проверка на вхождение сравниваемой строки и ее среза в том же положении в проверяемых словах.</p>\r\n\r\n<p>Строка 11. Если есть, то начинаем проверять у следующего слова</p>\r\n\r\n<p>Строка 12 - 14. В ином же случае получается, что этот префикс уже не общий для всех и поэтому закрываем цикл и меняем флаг на False, чтобы он не перезапускался.</p>\r\n\r\n<p>Строка 15 - 16. Если же цикл завершился штатно (то есть все слова проверены и у всех есть этот общий префикс) то добавляем этот символ к нашей строке для вывода.</p>\r\n\r\n<p>Строка 17 - 18. Выход из программы если префикс не общий.</p>\r\n\r\n<h2><strong>Статистика задачи на LeetCode:</strong></h2>\r\n\r\n<p><img alt=\"\" height=\"608\" name=\"image.png\" src=\"https://ucarecdn.com/b5634c34-7a4a-40c9-892f-9ac16fec041a/\" width=\"1083\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 65,
  "fields": {
    "topic": 65,
    "type": "text",
    "title": "Задача 5 | Валидные скобки",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\"><strong>Решение задачи 5 | Валидные скобки</strong></h2>\r\n\r\n<p><img alt=\"\" height=\"853\" name=\"image.png\" src=\"https://ucarecdn.com/1ff1e57f-9c71-463f-8230-e39dd450cf9b/\" width=\"1206\"></p>\r\n\r\n<p>На самом деле решение тоже довольно простое. Все что нам нужно это убрать все правильные скобки с помощью цикла и посмотреть, осталось ли что - то еще помимо правильных скобок. Вот, как это сделать:<img alt=\"\" height=\"692\" name=\"carbon - 2025-02-01T154843.050.png\" src=\"https://ucarecdn.com/ffa28d0e-92f7-49e9-abb8-2611ab90dc9a/\" width=\"2560\">Так как у каждой скобки есть своя, закрывающая, то проходиться циклом можно <code>len(s) / 2</code> раз, так как если строка - <code>[()]</code>, то всего 2 раза (одна для круглых скобок, другая для внешних - квадратных). Таким образом те скобки, что снаружи будут соединяться после того, как внутренние уйдут. И если после всех этих процедур останется что - то, то скобки - неправильные.&nbsp;</p>\r\n\r\n<p>У нас булевый вывод <code>(true/false)</code> поэтому мы возвращаем результат выражения: Пустой ли стала строка или нет.</p>\r\n\r\n<h2>Cтатистика решения задачи:</h2>\r\n\r\n<p><img alt=\"\" height=\"621\" name=\"image.png\" src=\"https://ucarecdn.com/5acc5fd5-7f0d-47ae-b0f1-3e5665e0c72d/\" width=\"1108\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 66,
  "fields": {
    "topic": 66,
    "type": "text",
    "title": "Решение задачи 6 | Найдите вставленную позицию",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\"><strong>Решение задачи 6 | Найдите вставленную позицию</strong></h2>\r\n\r\n<p style=\"text-align:center;\">В данном случае мы просто создадим новый список с значением внутри в любом случае и обработаем оба случая.</p>\r\n\r\n<p><strong><em>Решение для LeetCode</em></strong><img alt=\"\" height=\"856\" name=\"carbon(1).png\" src=\"https://ucarecdn.com/80dc1e85-95a0-40fe-a72d-dc23f80d070c/\" width=\"2560\"></p>\r\n\r\n<p>Наша функция принимает на вход список целых чисел. Создадим сразу копию с уже таргетом внутри в любом случае и отсортируем его для вывода. Дальше просто обработаем оба случая (когда есть и когда нет)</p>\r\n\r\n<p>строка 1. Создание копии списка (для добавления внутрь таргета)</p>\r\n\r\n<p>строка 2. Добавление таргета</p>\r\n\r\n<p>строка 3. Сортировка списка</p>\r\n\r\n<p>Условия дальше просто работают в зависимости от того, есть ли то самое число в начальном списке. Если нет - то проходимся по нашему новому списку и выводим результат. Если да - то проходимся по начальному списку и по нахождению числа выводим его индекс.</p>\r\n\r\n<h2><strong>Cтатистика решения на LeetCode:</strong></h2>\r\n\r\n<p><img alt=\"\" height=\"549\" name=\"image.png\" src=\"https://ucarecdn.com/5a6f42c1-197a-4e56-a3a1-7f819a18de4d/\" width=\"994\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 67,
  "fields": {
    "topic": 67,
    "type": "text",
    "title": "Задача 7 | Найдите индекс первого вхождения в строке.",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 7 | Найти индекс первого вхождения в строке.</h2>\r\n\r\n<p>Насколько мы помним - одна из целей данного курса - просто подбить знания из первых двух курсов по языкам программирования. В этой задаче мы будем просто использовать метод как раз для таких случаев, однако ничего не мешает вам попробовать решить по своему. Мы же решили вот так:</p>\r\n\r\n<p>Решение для LeetCode:</p>\r\n\r\n<p><img alt=\"\" height=\"484\" name=\"carbon(3).png\" src=\"https://ucarecdn.com/97a52490-7adb-4fc7-adf8-2a414d525dd1/\" width=\"2560\"></p>\r\n\r\n<p>Здесь мы прсото использовали на строке haystack метод find, который как раз и выполняет все условия нашей задачи.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 68,
  "fields": {
    "topic": 68,
    "type": "text",
    "title": "Задача 8 | Длина последнего слова",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 8 | Длина последнего слова</h2>\r\n\r\n<p>Решение тут также очень простое. Примем строку, составим список из слов(разделенного по пробелам), вычислим длину последнего слова. <img alt=\"\" height=\"520\" name=\"carbon(5).png\" src=\"https://ucarecdn.com/77e54523-6727-4a52-9da9-040c97c31b15/\" width=\"2560\">Принимаем строку и с помощью&nbsp; метода split(без аргумента) просто разбиваем строку на итератор из слов и создаем из него список. Далее остается только извлечь последнее слово и вывести его длину.</p>"
  }
},
{
  "model": "courses.content",
  "pk": 69,
  "fields": {
    "topic": 69,
    "type": "text",
    "title": "Задача 9 | Плюс один",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 9 | Плюс один</h2>\r\n\r\n<p>Дело в том, что на задаче для степика принимается именно список, поэтому мы разберем решение для степика. В вашем случае нетрудно превратить строку в тот же самый список (как мы делали в одной из прошлых задач). В любом случае наша команда всегда готова помочь с решением.</p>\r\n\r\n<p>Тут мы принимаем на вход список цифр. Давайте рассмотрим и разберем решение.<img alt=\"\" height=\"804\" name=\"carbon(7).png\" src=\"https://ucarecdn.com/5134a269-66cd-45fc-bdaf-34fa7388c688/\" width=\"2560\"></p>\r\n\r\n<p>Мы просто создаем копию списка с цифрами уже в строчном варианте (для объединения их)</p>\r\n\r\n<p>Потом мы объединяем их в строку. То есть условно из ['1', '2', '3', '4'] мы получаем '1234'</p>\r\n\r\n<p>далее просто превратим строку в число с помощью int(), затем прибавим уже к числу 1 и превратим обратно в строку уже приплюсованное число. Дальше составим список из каждой цифры и превратим его в целочисленный тип. Далее просто возвращаем его.</p>\r\n\r\n<h2><strong><em>Статистика решения на LeetCode:</em></strong><img alt=\"\" height=\"571\" name=\"image.png\" src=\"https://ucarecdn.com/5b17c898-969c-40b4-abf9-aee221f61a0e/\" width=\"1022\"></h2>"
  }
},
{
  "model": "courses.content",
  "pk": 70,
  "fields": {
    "topic": 70,
    "type": "text",
    "title": "Задача 10 | Добавить двоичное",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 10 | Сумма двоичных</h2>\r\n\r\n<p>Решение тут тоже довольно простое. Python реализовал эту функцию за нас:</p>\r\n\r\n<p><img alt=\"\" height=\"558\" name=\"carbon(8).png\" src=\"https://ucarecdn.com/3bebc18f-59e7-4ca7-b44c-e857aaefc124/\" width=\"2560\"></p>\r\n\r\n<p>Тут предлагаем вам разобраться самим. Функция инт не только превращает строку в число, она также позволяет выполнять различные операции над разрядами чисел и их алфавитами.</p>\r\n\r\n<p>Также попробуйте разобраться, зачем нужен срез в четвертой строке. Ответы будут чуть далее.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика решения для LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"547\" name=\"image.png\" src=\"https://ucarecdn.com/b5f50840-d224-4317-bfb3-24c47f21e43a/\" width=\"987\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 71,
  "fields": {
    "topic": 71,
    "type": "text",
    "title": "Задача 11 | Валидный палиндром",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 11 | Валидный палиндром</h2>\r\n\r\n<p><strong><em>Решение задачи очень простое:</em></strong></p>\r\n\r\n<p><img alt=\"\" height=\"564\" name=\"carbon - 2025-02-07T230721.131.png\" src=\"https://ucarecdn.com/cafb6528-dd22-414c-b2ab-e1081356b04b/\" width=\"2560\"></p>\r\n\r\n<p>На самом деле тут нет ничего сложного. Что касается третьей строки - тут все понятно. Метод lower() просто возвращает ту же строку, только в нижнем регистре.&nbsp;</p>\r\n\r\n<p>Строка 4: Здесь мы создаем список из символов (не очень то и важно, что проверять - строку или же список таких же символов через запятую)</p>\r\n\r\n<p>Эта строка на Python представляет собой генератор списка и выполняет фильтрацию символов строки <code>s</code>. Вот подробное объяснение:</p>\r\n\r\n<h3>Разбор четвертой строки</h3>\r\n\r\n<p><code>s1 = [c for c in s if 'a' &lt;= c &lt;= 'z' or '0' &lt;= c &lt;= '9'] </code></p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong><code>[c for c in s]</code></strong> — генератор списка. Он перебирает каждый символ <code>c</code> из строки <code>s</code> и добавляет его в список, если выполняется условие в части <code>if</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Условие <code>if 'a' &lt;= c &lt;= 'z' or '0' &lt;= c &lt;= '9'</code>:</strong></p>\r\n\r\n\t<ul>\r\n\t\t<li><code>a &lt;= c &lt;= z</code> — проверяет, что символ <code>c</code> находится в диапазоне строчных латинских букв от <code>'a'</code> до <code>'z'</code>.</li>\r\n\t\t<li><code>0 &lt;= c &lt;= 9</code> — проверяет, что символ <code>c</code> является цифрой от <code>'0'</code> до <code>'9'</code>.</li>\r\n\t\t<li><code>or</code> — объединяет оба условия: символ должен быть либо буквой, либо цифрой</li>\r\n\t</ul>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>В return мы выводим: Является ли список - таким же списком в обратном порядке. Если да - палиндром - true</p>"
  }
},
{
  "model": "courses.content",
  "pk": 72,
  "fields": {
    "topic": 72,
    "type": "text",
    "title": "Задача 12 | Одиночное число",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 12 | Одиночное число</h2>\r\n\r\n<p><strong><em>Решение задачи:</em></strong><img alt=\"\" height=\"564\" name=\"carbon - 2025-02-07T231346.116.png\" src=\"https://ucarecdn.com/f9354a16-d55b-4420-9cfd-7cd127807e18/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>Здесь мы просто проходимся циклом по списку и проверяем каждое число на его второе вхождение в списке.&nbsp;</p>\r\n\r\n<p><strong>3 строка</strong>: Проход циклом по списку nums где num - каждое число</p>\r\n\r\n<p><strong>4 строка</strong>: Проверка, одно ли только такое число в списке. <code>if nums.count(num) == 1:</code>&nbsp;Если да, то нет смысла проверять дальше - вывести его на экран и завершить программу</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong>Статистика на LeetCode:</strong></h2>\r\n\r\n<p><img alt=\"\" height=\"688\" name=\"image.png\" src=\"https://ucarecdn.com/8b445f8f-71f0-47d7-aadd-aea5d74f42de/\" width=\"851\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 73,
  "fields": {
    "topic": 73,
    "type": "text",
    "title": "Задача 13 | Главный элемент",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\"><strong>Решение задачи 13 | Главный элемент</strong></h2>\r\n\r\n<p><em><strong>Решение задачи на LeetCode</strong></em></p>\r\n\r\n<p><img alt=\"\" height=\"608\" name=\"carbon - 2025-02-07T232921.983.png\" src=\"https://ucarecdn.com/e38d48a6-d9fd-4208-880b-827d0500f5a5/\" width=\"2560\"></p>\r\n\r\n<p>Разберем код построчно.&nbsp;</p>\r\n\r\n<p>3 строка: Так как у нас много различных чисел в зависимости от нашего условия нет смысла проходиться по числам несколько раз. Поэтому создадим множество этих чисел, чтобы исключить повторения</p>\r\n\r\n<p>4 строка: Проходимся по каждому числу отдельно</p>\r\n\r\n<p>5 строка: Если это число встречается в списке(по условию) больше чем длина половины его списка, то</p>\r\n\r\n<p>6 строка:&nbsp;возвращаем это число и завершаем программу</p>\r\n\r\n<h2>Статистика:</h2>\r\n\r\n<p><img alt=\"\" height=\"825\" name=\"image.png\" src=\"https://ucarecdn.com/9396b6d4-b50c-4f9c-acd3-9f3d09952920/\" width=\"993\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 74,
  "fields": {
    "topic": 74,
    "type": "text",
    "title": "Задача 14 | Обычную дату в бинарную",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 14 | Обычная дата в бинарную</h2>\r\n\r\n<p><strong><em>Решение задачи:</em></strong><img alt=\"\" height=\"480\" name=\"carbon - 2025-02-07T234103.261.png\" src=\"https://ucarecdn.com/5a6f6a45-435a-4286-859d-11335604c28d/\" width=\"2560\">Просто выводим f-строку которая умеет форматировать интовое число в бинарный код. Таким образом: <code>int(date[:4])</code>&nbsp;отделяет срезом то число что нужно (год) и <code>:b</code> форматирует его в бинарное представление. Так же с днем и месяцем.&nbsp;</p>\r\n\r\n<h2>Статистика на LeetCode:</h2>\r\n\r\n<p><img alt=\"\" height=\"764\" name=\"image.png\" src=\"https://ucarecdn.com/4fc9e04a-70c7-4506-8489-e2173c7811ce/\" width=\"1003\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 75,
  "fields": {
    "topic": 75,
    "type": "text",
    "title": "Задача 15 | Счастливое число",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 15 | Счастливое число</h2>\r\n\r\n<p><strong><em>Решение на LeetCode:&nbsp;</em></strong></p>\r\n\r\n<p><img alt=\"\" height=\"862\" name=\"carbon - 2025-02-07T235225.468.png\" src=\"https://ucarecdn.com/fceae0dd-d5a3-46b5-bb75-5d5260bed408/\" width=\"2560\"></p>\r\n\r\n<p>Разбираем построчно:</p>\r\n\r\n<p>3 строка: Создаем функцию для подсчета суммы</p>\r\n\r\n<p>4 строка: Сама реализация: Создаем (изнутри) итератор с проходом по строковой вариации числа. Например в числе 12 достали 1 и заполнили итератор его квадратом. Также и с двойкой. После вернули их сумму.&nbsp;</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p>6 строка: Создаем множество и заполняем его этими самыми суммами.</p>\r\n\r\n<p>8 строка: Создаем цикл. Пока n != 1 (по условию) и n не в этих суммах</p>\r\n\r\n<p>9 строка: мы добавляем это число в seen_numbers</p>\r\n\r\n<p>10 строка: Присвоим к n значение функции</p>\r\n\r\n<h2>Статистика:&nbsp;</h2>\r\n\r\n<p><img alt=\"\" height=\"691\" name=\"image.png\" src=\"https://ucarecdn.com/f3ea5731-d460-4b2c-8bc2-9236f8301896/\" width=\"1409\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 76,
  "fields": {
    "topic": 76,
    "type": "text",
    "title": "Задача 16 | Лучшее время купли-продажи",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 16 | Лучшее время купли - продажи</h2>\r\n\r\n<p>Предлагаем вам самим попробовать разобраться с решением. Благо оно тут простое, и мы будем иногда оставлять вам простор для размышлений.</p>\r\n\r\n<p><strong><em>Решение на LeetCode:</em></strong><img alt=\"\" height=\"948\" name=\"carbon - 2025-02-08T000741.631.png\" src=\"https://ucarecdn.com/de3d95ac-2849-45a3-b136-876518c1965b/\" width=\"2560\"></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Статистика&nbsp;</h2>\r\n\r\n<p><img alt=\"\" height=\"556\" name=\"image.png\" src=\"https://ucarecdn.com/a27c57b0-c77c-469e-970a-f5d22eb7e03f/\" width=\"1015\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 77,
  "fields": {
    "topic": 77,
    "type": "text",
    "title": "Задача 17 | Cтепень ли двойки",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 17 | Степень ли двойки</h2>\r\n\r\n<p>Дело тут в признаках. Давайте разберем решение задачи:<img alt=\"\" height=\"480\" name=\"carbon - 2025-02-08T184000.047.png\" src=\"https://ucarecdn.com/2fc9b178-cce1-44ba-8d55-43c11d3a7b14/\" width=\"2560\">Начнем с того, что любое число меньше единицы - не может быть степенью в нашем случае.&nbsp;</p>\r\n\r\n<p><strong><code>(n &amp; (n - 1)) == 0</code></strong><br>\r\nЭто битовая операция <code>AND</code> между <code>n</code> и <code>n - 1</code>.<br>\r\nОна проверяет, является ли <code>n</code> степенью двойки.</p>\r\n\r\n<h4>Как это работает:</h4>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p>В бинарной системе любое число, являющееся степенью двойки (<code>1, 2, 4, 8, 16, ...</code>), представлено одним единственным битом, установленным в <code>1</code>. Например:</p>\r\n\r\n\t<ul>\r\n\t\t<li><code>1</code> = <code>0001</code> (2⁰)</li>\r\n\t\t<li><code>2</code> = <code>0010</code> (2¹)</li>\r\n\t\t<li><code>4</code> = <code>0100</code> (2²)</li>\r\n\t\t<li><code>8</code> = <code>1000</code> (2³)</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p>Если вы вычтете единицу из числа <code>n</code>, которое является степенью двойки, все биты после единственного <code>1</code> станут <code>1</code>, а сам этот бит станет <code>0</code>:</p>\r\n\r\n\t<ul>\r\n\t\t<li>Для <code>4</code> (<code>0100</code>):<br>\r\n\t\t<code>4 - 1 = 3</code> (<code>0011</code>)</li>\r\n\t\t<li>Для <code>8</code> (<code>1000</code>):<br>\r\n\t\t<code>8 - 1 = 7</code> (<code>0111</code>)</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p>Битовая операция <code>n &amp; (n - 1)</code> обнулит все биты, если в числе <code>n</code> был только один установленный бит:</p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"458\" name=\"image.png\" src=\"https://ucarecdn.com/ccb54f76-5933-49b0-8c4f-31ac6ef0d43f/\" width=\"831\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 78,
  "fields": {
    "topic": 78,
    "type": "text",
    "title": "Задача 18 | Анаграмма ли?",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 18 | Анаграмма ли?</h2>\r\n\r\n<p>Так как для анаграммы должно быть одинаковое количество букв и буквы должны быть те же, в том же количестве, то мы просто отсортируем обе строки и проверим их на равенство.&nbsp;</p>\r\n\r\n<h2><strong><em>Решение для LeetCode:</em></strong><img alt=\"\" height=\"480\" name=\"carbon - 2025-02-08T184447.948.png\" src=\"https://ucarecdn.com/8f85063a-cf99-4b51-b35c-b97273d52d0a/\" width=\"2560\"></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"573\" name=\"image.png\" src=\"https://ucarecdn.com/2b31e572-4bb3-4496-a584-8ad507929e76/\" width=\"1035\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 79,
  "fields": {
    "topic": 79,
    "type": "text",
    "title": "Задача 19 | Добавить цифр",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 19 | Добавить цифр</h2>\r\n\r\n<h2><strong><em>Решение на LeetCode:</em></strong><img alt=\"\" height=\"906\" name=\"carbon - 2025-02-08T184831.714.png\" src=\"https://ucarecdn.com/58d1ab49-fd53-48b3-94fe-adcfa9abd0fa/\" width=\"2560\"></h2>\r\n\r\n<p>Создадим еще одну функцию (строка 3) для подсчета суммы всех цифр какого либо числа.</p>\r\n\r\n<p>строка 10. Создадим цикл, который будет использовать эту функцию до тех пор, пока не останется только одна цифра. А потом выведем результат.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em><strong>Статистика для LeetCode:</strong></em></h2>\r\n\r\n<p><img alt=\"\" height=\"530\" name=\"image.png\" src=\"https://ucarecdn.com/46f79866-f842-44c5-b45d-da90fc74190d/\" width=\"963\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 80,
  "fields": {
    "topic": 80,
    "type": "text",
    "title": "Задача 20 | Уродливый номер",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 20 | Уродливый номер</h2>\r\n\r\n<p>Если нельзя иначе в числе без делителей на 2, 3 и 5, то мы просто будем делить число сначала на 2 (пока делится), затем на 3 (пока делится) и на 5 (также пока делится) и если по окончанию получим единицу - То число не уродливое</p>\r\n\r\n<h2><strong><em>Реализация циклов:</em></strong><img alt=\"\" height=\"990\" name=\"carbon - 2025-02-08T185310.867.png\" src=\"https://ucarecdn.com/581d5bb5-0e62-4557-8047-1239a26d3a6c/\" width=\"2560\"></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em><strong>Cтатистика для LeetCode:</strong></em></h2>\r\n\r\n<p><img alt=\"\" height=\"545\" name=\"image.png\" src=\"https://ucarecdn.com/ed9c0152-21ff-4019-a56f-cb36ecb75926/\" width=\"960\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 81,
  "fields": {
    "topic": 81,
    "type": "text",
    "title": "Задача 21 | Потерянное число",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 21 | Потерянное число</h2>\r\n\r\n<p><strong><em>Решение задачи для LeetCode:</em></strong></p>\r\n\r\n<p><img alt=\"\" height=\"158\" name=\"image.png\" src=\"https://ucarecdn.com/a619e57c-8ae7-453d-8e83-4277fbfa2c28/\" width=\"1064\"></p>\r\n\r\n<p>Так как наши числа презентуют какой - то промежуток, ничего не мешает нам просто отсортировать список и найти пробел в этом самом списке.</p>\r\n\r\n<p>строка 3: Сортируем список (по возрастанию)</p>\r\n\r\n<p>строка 4: Создаем цикл где i - индекс какого либо числа.&nbsp;</p>\r\n\r\n<p>строка 5: Сравнение, является ли индекс тождественным с числом по этому индексу. Если нет - это потеря и ее нам нужно вывести на экран</p>\r\n\r\n<p>строка 6: Вывод на экран</p>\r\n\r\n<p>строка 8: В случае же, если список полон, нужно вывести следующее число за промежутком. А следующее число это длина нашего списка</p>\r\n\r\n<h2>Статистика на LeetCode</h2>\r\n\r\n<p><img alt=\"\" height=\"692\" name=\"image.png\" src=\"https://ucarecdn.com/25952d1b-bfb4-4154-b82e-ae416627e771/\" width=\"1408\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 82,
  "fields": {
    "topic": 82,
    "type": "text",
    "title": "Задача 22 | Передвинуть нули",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 22 | Передвинуть нули</h2>\r\n\r\n<p><strong><em>Решение задачи для LeetCode:</em></strong><img alt=\"\" height=\"990\" name=\"carbon - 2025-02-08T180016.041.png\" src=\"https://ucarecdn.com/69d51b17-2a49-417a-b8d5-09e40d04a0eb/\" width=\"2560\">Попробуйте и эту задачу разобрать сами. Это полезно для практики и в случае чего, мы ответим на вопросы. Решений многих задач здесь, конечно же, больше. Однако мы предоставляем именно наши вариации, но ничего не мешает вам придумать свои способы. Это, безусловно, поможет в дальнейшем развитии.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<p><strong><em>Статистика для LeetCode:</em></strong><img alt=\"\" height=\"555\" name=\"image.png\" src=\"https://ucarecdn.com/49c51aed-8f5e-4a44-ab6a-acb333bb0424/\" width=\"1000\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 83,
  "fields": {
    "topic": 83,
    "type": "text",
    "title": "Задача 23 | Игра Нима",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 23 | Игра Нима</h2>\r\n\r\n<p>Решение задачи слишком простое. Достаточно понять тенденцию и алгоритм. В игре Нима действительно решает первый ходящий и число камней. Поэтому решение данной задачи очень простое.&nbsp;</p>\r\n\r\n<p><img alt=\"\" height=\"480\" name=\"carbon - 2025-02-08T180605.132.png\" src=\"https://ucarecdn.com/f9081b08-9b39-4b31-9bfd-703c746d5a2e/\" width=\"2560\"></p>\r\n\r\n<p>Если число делится на 4 без остатка, то тут вы проиграете, так как ваш друг в конечном итоге заберет последние камни.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em><strong>Статистика для LeetCode:</strong></em><img alt=\"\" height=\"569\" name=\"image.png\" src=\"https://ucarecdn.com/376badae-9bde-4e65-940f-f257569b6530/\" width=\"1020\"></h2>"
  }
},
{
  "model": "courses.content",
  "pk": 84,
  "fields": {
    "topic": 84,
    "type": "text",
    "title": "Задача 24 | Степень ли тройки?",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 24 | Степень ли тройки?</h2>\r\n\r\n<p>Мы уже решали похожую задачу, только проверка была именно на степень двойки. Логично предположить, что и тут есть какое - то простое решение. А оно действительно есть.</p>\r\n\r\n<p><strong><em>Решение для LeetCode:</em></strong><img alt=\"\" height=\"736\" name=\"carbon - 2025-02-08T181156.583.png\" src=\"https://ucarecdn.com/eb2c5228-5b9e-40eb-bb52-a8f8ba0e7744/\" width=\"2560\"></p>\r\n\r\n<p>Дело в признаках того, что число - степень тройки. Если данное число все время делить на 3, то в случае, если на конце оно даст единичку, то это и была степень тройки. Таким образом: 6 // 3 = 2 (Не делится на 3 без остатка и не единица). А вот 9 // 3 = 3 =&gt; 3 // 3 == 1 (число являлось степенью единицы.)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"568\" name=\"image.png\" src=\"https://ucarecdn.com/2737fa6a-54b5-496b-afd7-c69ae5749acb/\" width=\"1025\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 85,
  "fields": {
    "topic": 85,
    "type": "text",
    "title": "Задача 25 | Подсчет битов",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 25 | Подсчет битов</h2>\r\n\r\n<p>Для того, чтобы решить задачу просто пройдемся циклом по каждому числу из промежутка и (как мы уже умеем) переведем его в двоичное представление с помощью <code>bin()</code>&nbsp;а после добавим в список количество единиц в этом представлении.</p>\r\n\r\n<h2><strong><em>Решение задачи для LeetCode:</em></strong><img alt=\"\" height=\"650\" name=\"carbon - 2025-02-08T182019.291.png\" src=\"https://ucarecdn.com/5a8a27aa-f149-4a28-af67-69aa1e5b0cb9/\" width=\"2560\"></h2>\r\n\r\n<h2>Объяснение:</h2>\r\n\r\n<p>Строка 3: Создание списка для хранения и вывода количества единиц в каждом числе</p>\r\n\r\n<p>Строка 4: Проход циклом. Чтобы, допустим, для числа 3 у нас были числа 0 1 2 3</p>\r\n\r\n<p>Строка 5: <code>bin(i)</code> - битовое представление; <code>[2: ]</code> - срез для удаления приставки <code>0bчисло; .count('1') -</code> для подсчета единиц</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em><strong>Cтатистика на LeetCode:</strong></em></h2>\r\n\r\n<p><img alt=\"\" height=\"533\" name=\"image.png\" src=\"https://ucarecdn.com/92cd5667-ef89-4ac2-9a01-4195c2528ef9/\" width=\"964\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 86,
  "fields": {
    "topic": 86,
    "type": "text",
    "title": "Задача 26 | Cтепень четырех",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 26 | Степень четырех</h2>\r\n\r\n<p>Тут мы просто будем делить число в обратную сторону, пока не получим единицу. Если же мы единицу не получим - значит ложно.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Решение для LeetCode:</em></strong><img alt=\"\" height=\"756\" name=\"carbon - 2025-02-09T040443.150.png\" src=\"https://ucarecdn.com/72fd63cb-6fee-4b66-9430-6c5fb662d135/\" width=\"2560\"></h2>\r\n\r\n<p>Сначала обрабатываем случай с простым нулем, а затем уже реализуем цикл с бесконечным делением (до числа не делящегося на 4)</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Cтатистика на LeetCode:</em></strong><img alt=\"\" height=\"548\" name=\"image.png\" src=\"https://ucarecdn.com/eb79bf70-e0c3-42ce-880e-1e40ec25351b/\" width=\"997\"></h2>"
  }
},
{
  "model": "courses.content",
  "pk": 87,
  "fields": {
    "topic": 87,
    "type": "text",
    "title": "Задача 27 | Перевернуть строку",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 27 | Перевернуть строку</h2>\r\n\r\n<h2><em><strong>Решение для LeetCode:</strong></em></h2>\r\n\r\n<p><img alt=\"\" height=\"584\" name=\"carbon - 2025-02-09T040836.717.png\" src=\"https://ucarecdn.com/d9f7e63e-7390-4250-88dc-5cc1b01ba684/\" width=\"2560\">Предлагаем вам посмотреть и поиграться с данным кодом. Попробуйте поменять значения и посмотреть, что получится.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика для LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"545\" name=\"image.png\" src=\"https://ucarecdn.com/b1053102-439e-4666-b182-4bd448e7ec01/\" width=\"984\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 88,
  "fields": {
    "topic": 88,
    "type": "text",
    "title": "Задача 28 | Перевернуть только гласные в строке",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 28 | Перевернуть только гласные буквы в строке</h2>\r\n\r\n<h2><strong><em>Решение для LeetCode (объяснения на скриншоте)</em></strong><img alt=\"\" height=\"1180\" name=\"carbon - 2025-02-09T041529.126.png\" src=\"https://ucarecdn.com/08ae67fe-946a-40ee-addb-992bd758c6c1/\" width=\"2560\"></h2>\r\n\r\n<h2><strong><em>Статистика на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"556\" name=\"image.png\" src=\"https://ucarecdn.com/11229673-d8d3-4cb4-a2fe-34aed9bfc736/\" width=\"998\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 89,
  "fields": {
    "topic": 89,
    "type": "text",
    "title": "Задача 29 | Пересечение двух массивов",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<p>Выведите пересечение двух списков.</p>\r\n\r\n<p><img alt=\"\" height=\"522\" name=\"image.png\" src=\"https://ucarecdn.com/a46d8255-cdc8-442a-a454-b2b281b7f545/\" width=\"998\">Каждый элемент уникальный. (То есть можно использовать множества. ) Однако мы (в отличие от литкод) просим вас отсортировать массив перед выводом. (Для более удобной проверки)</p>"
  }
},
{
  "model": "courses.content",
  "pk": 90,
  "fields": {
    "topic": 90,
    "type": "text",
    "title": "Задача 30 | Пересечение двух массивов 2",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 30 | Пересечение двух массивов 2</h2>\r\n\r\n<p>Так как теперь нам важно количество чисел (они не уникальны) мы не должны использовать множества и их методы (множество просто удалит дублирующиеся числа, а это нам не подходит) Поэтому мы реализуем процесс самостоятельно:</p>\r\n\r\n<h2><strong><em>Решения для LeetCode:</em></strong><img alt=\"\" height=\"756\" name=\"carbon - 2025-02-09T042408.964.png\" src=\"https://ucarecdn.com/04efde14-3df1-4cfc-b8ac-93c56f08d3cf/\" width=\"2560\"></h2>\r\n\r\n<p>строка 3: Создаем список для заполнения числами, общими для обеих списков.</p>\r\n\r\n<p>Строки 4 - 5: Проход циклом и проверка, есть ли элемент из списка 1 в списке2. Если да - удалить элемент из списка 2 и добавить этот элемент в ss</p>\r\n\r\n<p><code>pop()</code> - удаляет и возвращает элемент списка по индексу</p>\r\n\r\n<p>.<code>index(elem)</code> возвращает индекс элемента в списке</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Cтатистика на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"575\" name=\"image.png\" src=\"https://ucarecdn.com/6b6968cc-83c3-4a88-80dd-ec8cd71ee8ff/\" width=\"1019\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 91,
  "fields": {
    "topic": 91,
    "type": "text",
    "title": "Задача 31 | Идеальный валидный квадрат",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 31 | Идеальный валидный квадрат</h2>\r\n\r\n<h2><strong><em>Решение на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"108\" name=\"image.png\" src=\"https://ucarecdn.com/9de46322-fc2d-4914-87d7-b72ffe47e07d/\" width=\"1091\">Чтобы не использовать функцию в модуле math (о котором мы не раз говорили в наших курсах) мы просто возведем число в степень 0.5 (что является корнем числа) и проверим, результат является таким же, но без дробных частей и вернем результат</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Статистика</h2>\r\n\r\n<p><img alt=\"\" height=\"548\" name=\"image.png\" src=\"https://ucarecdn.com/58a3b969-5b42-4b66-9976-c2f3856ecdc0/\" width=\"987\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 92,
  "fields": {
    "topic": 92,
    "type": "text",
    "title": "Задача 32 | ransomNote",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 32 | ransomNote</h2>\r\n\r\n<h2><strong><em>Решение для LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"650\" name=\"carbon - 2025-02-10T210652.603.png\" src=\"https://ucarecdn.com/0631a39b-0250-44cb-9fbb-f65601fa326e/\" width=\"2560\"></p>\r\n\r\n<p>строка 3: Перебираем циклом все буквы (уникальные) от ransomNote<br>\r\nстрока 5: проверяем, если букв в слове больше, то нельзя будет из них составить это слово.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2>Статистика решения:</h2>\r\n\r\n<p><img alt=\"\" height=\"564\" name=\"image.png\" src=\"https://ucarecdn.com/8a1c5169-bfd3-4e65-9a06-61e4c657ef9e/\" width=\"1027\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 93,
  "fields": {
    "topic": 93,
    "type": "text",
    "title": "Задача 33 | Первый уникальный символ в строке",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 33 | Первый уникальный символ в строке</h2>\r\n\r\n<p>В решении данной задачи мы подключим кое - какой модуль (попробуйте разобраться с его работой). Объясним, зачем он нужен в контексте этой задачи и объясним полное решение</p>\r\n\r\n<p><strong><em>Решение для LeetCode:</em></strong><img alt=\"\" height=\"692\" name=\"carbon - 2025-02-10T211941.906.png\" src=\"https://ucarecdn.com/bff0d169-5a68-4e69-942f-733a206d823d/\" width=\"2560\">Начнем с того, что эта строка использует <code>Counter</code> из модуля <code>collections</code>, чтобы создать словарь, где ключ — символ строки, а значение — количество его повторений. Например, если <code>s = \"loveleetcode\"</code>, то <code>Counter(s)</code> будет таким:</p>\r\n\r\n<p><code>{'l': 2, 'o': 2, 'v': 1, 'e': 4, 't': 1, 'c': 1, 'd': 1}</code></p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p>Здесь цикл проверяет каждый символ и его количество. Если количество равно <code>1</code>, возвращается индекс первого вхождения символа с помощью <code>s.find(b)</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p>Если цикл завершился, а уникальных символов не нашлось, метод возвращает <code>-1</code>.</p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика для LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"561\" name=\"image.png\" src=\"https://ucarecdn.com/44242e18-4963-4255-a936-48bfda758ab0/\" width=\"1012\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 94,
  "fields": {
    "topic": 94,
    "type": "text",
    "title": "Задача 34 | Найди разницу",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 34 | Найди разницу</h2>\r\n\r\n<h2><em><strong>Решение для LeetCode:</strong></em><img alt=\"\" height=\"778\" name=\"carbon - 2025-02-10T212505.835.png\" src=\"https://ucarecdn.com/af2d2513-c042-417d-8a39-941d052f0df2/\" width=\"2560\"></h2>\r\n\r\n<p>Этот код решает задачу поиска дополнительного символа в строке <code>t</code>, который появляется по сравнению со строкой <code>s</code>.</p>\r\n\r\n<h3>Как работает код</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Цикл по символам строки <code>t</code>:</strong></p>\r\n\r\n\t<p><code>for i in t: </code></p>\r\n\r\n\t<p>Перебираем каждый символ строки <code>t</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Проверка наличия символа:</strong></p>\r\n\r\n\t<p><code>if i in s: </code></p>\r\n\r\n\t<p>Если символ <code>i</code> есть в строке <code>s</code>, выполняется проверка частот:</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Сравнение количества символов:</strong></p>\r\n\r\n\t<p><code>if s.count(i) == t.count(i): continue else: return i </code></p>\r\n\r\n\t<p>Если количество символов <code>i</code> в <code>s</code> и <code>t</code> одинаково, пропускаем текущий символ. Если встречается символ с разным количеством появлений, он возвращается как дополнительный символ.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Если символ отсутствует:</strong></p>\r\n\r\n\t<p><code>else: return i </code></p>\r\n\r\n\t<p>Если символ вообще отсутствует в <code>s</code>, он сразу возвращается как результат.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Cтатистика для LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"568\" name=\"image.png\" src=\"https://ucarecdn.com/0a3bf7c8-e5a4-4c9f-94db-664535d8853d/\" width=\"1001\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 95,
  "fields": {
    "topic": 95,
    "type": "text",
    "title": "Задача 35 | FizzBuzz",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 35 | FizzBuzz</h2>\r\n\r\n<h2><strong><em>Решение для LeetCode:</em></strong><img alt=\"\" height=\"948\" name=\"carbon - 2025-02-10T213249.722.png\" src=\"https://ucarecdn.com/51c2b089-0945-4e4b-b954-30a1d51cf199/\" width=\"2560\"></h2>\r\n\r\n<p>Этот код решает классическую задачу <strong>FizzBuzz</strong>, где числа от <code>1</code> до <code>n</code> заменяются строками по определённым правилам:</p>\r\n\r\n<ul>\r\n\t<li>Числа, кратные <code>3</code>, заменяются на <code>\"Fizz\"</code>.</li>\r\n\t<li>Числа, кратные <code>5</code>, заменяются на <code>\"Buzz\"</code>.</li>\r\n\t<li>Числа, кратные одновременно <code>3</code> и <code>5</code>, заменяются на <code>\"FizzBuzz\"</code>.</li>\r\n\t<li>Остальные числа остаются неизменными в виде строк.</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика решения на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"559\" name=\"image.png\" src=\"https://ucarecdn.com/f057308b-67a4-4a46-9e28-4abc1233b0f1/\" width=\"987\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 96,
  "fields": {
    "topic": 96,
    "type": "text",
    "title": "Задача 36 | Третий максимальный номер",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 36 | Третий максимальный номер</h2>\r\n\r\n<h2><em><strong>Решение для LeetCode:</strong></em></h2>\r\n\r\n<p><img alt=\"\" height=\"862\" name=\"carbon - 2025-02-10T213633.348.png\" src=\"https://ucarecdn.com/ae9695b7-1ea1-455b-a5e3-2a8ce93dc949/\" width=\"2560\"></p>\r\n\r\n<p>Создаем список из уникальных чисел нашего списка.</p>\r\n\r\n<p>Если его длина меньше трех, то выводим самое большее в списке.</p>\r\n\r\n<p>Если же длина больше трех, то выводим его третье отсортированное число.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика решения на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"551\" name=\"image.png\" src=\"https://ucarecdn.com/2a161f13-56cd-49ec-aeb0-1441eeda74a2/\" width=\"986\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 97,
  "fields": {
    "topic": 97,
    "type": "text",
    "title": "Задача 37 | Добавить строки",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 37 | Добавить строки</h2>\r\n\r\n<p>Этот код решает задачу сложения двух больших чисел, которые представлены в виде строк.</p>\r\n\r\n<h3>Как работает код:</h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Преобразование строк в числа:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p>python</p>\r\n\r\n\t<p>КопироватьРедактировать</p>\r\n\r\n\t<p><code>int(num1) + int(num2) </code></p>\r\n\r\n\t<p>Оба числа (<code>num1</code> и <code>num2</code>) преобразуются из строк в целые числа, затем суммируются.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Возврат результата:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>return str(int(num1) + int(num2)) </code></p>\r\n\r\n\t<p>Сумма преобразуется обратно в строку и возвращается.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<h3>Решение на LeetCode:<img alt=\"\" height=\"480\" name=\"carbon - 2025-02-10T223950.460.png\" src=\"https://ucarecdn.com/08d52790-049f-416e-a1c3-f8ac97701164/\" width=\"2560\"></h3>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Cтатистика на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"587\" name=\"image.png\" src=\"https://ucarecdn.com/0161ae7c-32f1-4045-8d63-0b135ef2027e/\" width=\"1043\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 98,
  "fields": {
    "topic": 98,
    "type": "text",
    "title": "Задача 38 | Номер сегментов в строке",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 38 | Количество сегментов строки</h2>\r\n\r\n<h2><strong><em>Решение для leetcode:</em></strong><img alt=\"\" height=\"522\" name=\"carbon - 2025-02-10T224208.517.png\" src=\"https://ucarecdn.com/9c9acaac-386e-4aac-9908-de5217081754/\" width=\"2560\"></h2>\r\n\r\n<p>Просто вернем длину списка слов, разделенного с помощью <code>split()</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"570\" name=\"image.png\" src=\"https://ucarecdn.com/411e0064-b908-449a-9499-c6c522e634bf/\" width=\"1030\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 99,
  "fields": {
    "topic": 99,
    "type": "text",
    "title": "Задача 39 | Разбиение монеточек",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 39 | Разбиение монеточек</h2>\r\n\r\n<h2><strong><em>Решение для LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"862\" name=\"carbon - 2025-02-10T224601.824.png\" src=\"https://ucarecdn.com/23656041-af66-4d3d-8457-0bf75e270587/\" width=\"2560\"></p>\r\n\r\n<h3>Как работает код:</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Базовая проверка:</strong></p>\r\n\r\n\t<p><code>if n == 1: return 1 </code></p>\r\n\r\n\t<p>Если количество монет равно <code>1</code>, можно сразу вернуть результат <code>1</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Инициализация переменных:</strong></p>\r\n\r\n\t<p><code>counter = 0 # Сумма использованных монет step = 0 # Число полных ступеней </code></p>\r\n\r\n\t<p>Переменная <code>counter</code> отслеживает общее количество использованных монет, а <code>step</code> хранит количество полных ступеней.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Цикл для подсчёта:</strong></p>\r\n\r\n\t<p><code>for i in range(1, n + 1): counter += i step += 1 if counter &gt; n: return step - 1 </code></p>\r\n\r\n\t<ul>\r\n\t\t<li>На каждой итерации прибавляется количество монет <code>i</code> для очередной ступени.</li>\r\n\t\t<li>Если сумма превысила <code>n</code>, значит последняя ступень неполная, и нужно вернуть <code>step - 1</code>.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Завершение работы:</strong><br>\r\n\tБлок <code>break</code> избыточен, поскольку <code>return</code> уже завершает выполнение функции.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<h2>&nbsp;</h2>\r\n\r\n<h2><strong><em>Статистика решения на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"580\" name=\"image.png\" src=\"https://ucarecdn.com/1aa5d712-647c-491c-bb3c-3622b642e1f5/\" width=\"1034\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 100,
  "fields": {
    "topic": 100,
    "type": "text",
    "title": "Задача 40 | Найти все пропавшие номера в списке",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 40 | Найти все пропавшие номера в списке</h2>\r\n\r\n<h2><strong><em>Решение на LeetCode:</em></strong><img alt=\"\" height=\"736\" name=\"carbon - 2025-02-10T224928.451.png\" src=\"https://ucarecdn.com/f9e31519-85b7-4642-8b80-9480d19d5cdd/\" width=\"2560\"></h2>\r\n\r\n<h3>Пояснение работы кода:</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Определение длины массива:</strong></p>\r\n\r\n\t<p><code>n = len(nums) </code></p>\r\n\r\n\t<p>Переменная <code>n</code> хранит размер списка <code>nums</code>, который определяет диапазон чисел от <code>1</code> до <code>n</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Создание множества всех возможных чисел:</strong></p>\r\n\r\n\t<p><code>all_nums = set(range(1, n + 1)) </code></p>\r\n\r\n\t<p>Создаётся множество чисел от <code>1</code> до <code>n</code>. Например, если <code>n = 5</code>, то <code>all_nums = {1, 2, 3, 4, 5}</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Вычисление отсутствующих чисел:</strong></p>\r\n\r\n\t<p><code>list(all_nums - set(nums)) </code></p>\r\n\r\n\t<p>Создаётся множество присутствующих чисел <code>set(nums)</code>. Затем выполняется вычитание множеств (<code>all_nums - set(nums)</code>), чтобы получить те числа, которые отсутствуют.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Возврат результата:</strong><br>\r\n\tРезультат преобразуется в список и возвращается.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"561\" name=\"image.png\" src=\"https://ucarecdn.com/c87dd848-171f-45d8-bc31-9bfb054f169c/\" width=\"1003\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 101,
  "fields": {
    "topic": 101,
    "type": "text",
    "title": "Задача 41 | Hamming Distance",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 41 | Hamming Distance</h2>\r\n\r\n<h2><em><strong>Решение для LeetCode:</strong></em><img alt=\"\" height=\"480\" name=\"carbon - 2025-02-10T232734.601.png\" src=\"https://ucarecdn.com/cac994ee-330f-48ca-a85e-ae43f83c24ab/\" width=\"2560\"></h2>\r\n\r\n<h3>Объяснение решения задачи <strong>Hamming Distance:</strong></h3>\r\n\r\n<p>Метод <code>hammingDistance</code> вычисляет расстояние Хэмминга между двумя числами <code>x</code> и <code>y</code>.</p>\r\n\r\n<h4>Что такое расстояние Хэмминга?</h4>\r\n\r\n<p>Расстояние Хэмминга между двумя числами — это количество битов, которые отличаются между их двоичными представлениями. Например:</p>\r\n\r\n<ul>\r\n\t<li><code>x = 3 (011)</code></li>\r\n\t<li><code>y = 1 (001)</code></li>\r\n\t<li>Расстояние Хэмминга: <code>1</code>, так как отличаются только второй бит (<code>1</code> вместо <code>0</code>).</li>\r\n</ul>\r\n\r\n<h3>Пошаговый разбор решения</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Побитовое исключающее ИЛИ (XOR):</strong></p>\r\n\r\n\t<p><code>x ^ y </code></p>\r\n\r\n\t<p>Оператор <code>^</code> выполняет побитовое исключающее ИЛИ (XOR). Бит результата равен <code>1</code>, если биты входных чисел разные, и <code>0</code>, если одинаковые.</p>\r\n\r\n\t<p>Пример:</p>\r\n\r\n\t<p><code>x = 3 (011) y = 1 (001) x ^ y = 010 (2) </code></p>\r\n\r\n\t<p>Результат <code>2</code> (<code>010</code>), где второй бит — это различие между <code>x</code> и <code>y</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Преобразование в двоичную строку:</strong></p>\r\n\r\n\t<p><code>bin(x ^ y) </code></p>\r\n\r\n\t<p>Функция <code>bin()</code> возвращает строковое двоичное представление числа, например <code>bin(2)</code> будет <code>\"0b10\"</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Подсчёт единиц:</strong></p>\r\n\r\n\t<p><code>.count('1') </code></p>\r\n\r\n\t<p>Метод <code>.count('1')</code> считает количество единиц в двоичной строке, что и есть расстояние Хэмминга.</p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Cтатистика для LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"574\" name=\"image.png\" src=\"https://ucarecdn.com/bf716ff6-028c-414a-b458-309797a6c72a/\" width=\"1036\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 102,
  "fields": {
    "topic": 102,
    "type": "text",
    "title": "Задача 42 | Периметр острова",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 42 | Периметр острова</h2>\r\n\r\n<h2><strong><em>Решение на LeetCode:</em></strong><img alt=\"\" height=\"1076\" name=\"carbon - 2025-02-10T233150.589.png\" src=\"https://ucarecdn.com/58f9e7ff-a671-49d8-9ba0-c3c1b21e2e12/\" width=\"2560\"></h2>\r\n\r\n<p>Задача заключается в нахождении периметра острова, который представлен матрицей <code>grid</code>, где:</p>\r\n\r\n<ul>\r\n\t<li><code>1</code> — клетка суши,</li>\r\n\t<li><code>0</code> — клетка воды.</li>\r\n</ul>\r\n\r\n<p>Каждая клетка суши (<code>1</code>) изначально считается имеющей 4 стороны. Однако если она соприкасается с другой клеткой суши, общая сторона убирается из периметра, так как она больше не считается внешней границей.</p>\r\n\r\n<h3>Пошаговый разбор решения:</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Инициализация переменных:</strong></p>\r\n\r\n\t<pre>\r\n&nbsp;</pre>\r\n\r\n\t<p><code>rows, cols = len(grid), len(grid[0]) perimeter = 0 </code></p>\r\n\r\n\t<p>Переменные <code>rows</code> и <code>cols</code> хранят размеры сетки, а <code>perimeter</code> будет использоваться для накопления периметра.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Проход по всем ячейкам матрицы:</strong></p>\r\n\r\n\t<pre>\r\n&nbsp;</pre>\r\n\r\n\t<p><code>for r in range(rows): for c in range(cols): </code></p>\r\n\r\n\t<p>Здесь цикл перебирает каждую ячейку сетки.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Обработка клеток суши:</strong></p>\r\n\r\n\t<pre>\r\n&nbsp;</pre>\r\n\r\n\t<p><code>if grid[r][c] == 1: perimeter += 4 </code></p>\r\n\r\n\t<p>Если текущая ячейка — суша, добавляем 4 к периметру.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Вычитание сторон для соседних клеток суши:</strong></p>\r\n\r\n\t<pre>\r\n&nbsp;</pre>\r\n\r\n\t<p><code>if r &gt; 0 and grid[r - 1][c] == 1: # Сосед сверху perimeter -= 2 if c &gt; 0 and grid[r][c - 1] == 1: # Сосед слева perimeter -= 2 </code></p>\r\n\r\n\t<ul>\r\n\t\t<li>Если сверху есть клетка суши, вычитаем 2 из периметра (потому что граница между ними общая).</li>\r\n\t\t<li>Аналогично проверяется левая сторона.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Возврат результата:</strong></p>\r\n\r\n\t<pre>\r\n&nbsp;</pre>\r\n\r\n\t<p><code>return perimeter</code></p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em>Статистика решения для LeetCode:</em><img alt=\"\" height=\"569\" name=\"image.png\" src=\"https://ucarecdn.com/cf8b32ad-577c-46e4-bfb5-66c309844232/\" width=\"1017\"></h2>"
  }
},
{
  "model": "courses.content",
  "pk": 103,
  "fields": {
    "topic": 103,
    "type": "text",
    "title": "Задача 43 | Дополненное число",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 43 | Дополненное число</h2>\r\n\r\n<h2><strong><em>Решение для LeetCode:</em></strong><img alt=\"\" height=\"820\" name=\"carbon - 2025-02-10T233817.308.png\" src=\"https://ucarecdn.com/e91b4fe5-e57b-4a76-9588-4593c0595953/\" width=\"2560\"></h2>\r\n\r\n<p>Решение представлено комментариями</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Статистика решения для LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"571\" name=\"image.png\" src=\"https://ucarecdn.com/9ecc8b4d-3d08-4eea-8fef-7a12e6c9fd1c/\" width=\"1013\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 104,
  "fields": {
    "topic": 104,
    "type": "text",
    "title": "Задача 44 | Самые последовательные",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 44 | Самые последовательные</h2>\r\n\r\n<h2 style=\"text-align:center;\">Решение задачи на LeetCode:<img alt=\"\" height=\"1076\" name=\"carbon - 2025-02-10T234231.194.png\" src=\"https://ucarecdn.com/c380bddc-c4fb-4d4a-bd25-8c63bc74d331/\" width=\"2560\"></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<ul>\r\n\t<li>\r\n\t<p><strong>Инициализация переменных:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>max_num = 0 counter = 0 </code></p>\r\n\r\n\t<ul>\r\n\t\t<li><code>max_num</code>: хранит максимальное количество подряд идущих единиц.</li>\r\n\t\t<li><code>counter</code>: временный счетчик для текущей последовательности единиц.</li>\r\n\t</ul>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Проход по каждому элементу массива:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>for i in nums: </code></p>\r\n\r\n\t<p>Цикл перебирает все элементы массива.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Увеличение счетчика при нахождении единицы:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>if i == 1: counter += 1 if counter &gt; max_num: max_num = counter </code></p>\r\n\r\n\t<p>Если текущий элемент равен <code>1</code>, увеличиваем <code>counter</code>. Если текущая последовательность длиннее, обновляем <code>max_num</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Сброс счетчика при нахождении нуля:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>else: counter = 0 </code></p>\r\n\r\n\t<p>Если встречается <code>0</code>, обнуляем <code>counter</code>, так как последовательность прерывается.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Возврат результата:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>return max_num</code></p>\r\n\t</li>\r\n</ul>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><strong><em>Cтатистика на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"581\" name=\"image.png\" src=\"https://ucarecdn.com/e52c231b-4af4-47b2-ab1c-3da420ad5fd0/\" width=\"1042\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 105,
  "fields": {
    "topic": 105,
    "type": "text",
    "title": "Задача 45 | Cледующий больший элемент",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 45 | Следующий больший элемент</h2>\r\n\r\n<h2><strong><em>Решение для LeetCode:</em></strong><img alt=\"\" height=\"906\" name=\"carbon - 2025-02-10T234634.830.png\" src=\"https://ucarecdn.com/7de7d41e-803c-4e77-9bf7-b8a4605cd8e6/\" width=\"2560\"></h2>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h3>Пошаговое объяснение решения</h3>\r\n\r\n<ol>\r\n\t<li>\r\n\t<p><strong>Инициализация пустого списка:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>initial = [] </code></p>\r\n\r\n\t<p>Список <code>initial</code> будет хранить результаты для каждого элемента из <code>nums1</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Внешний цикл по элементам <code>nums1</code>:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>for i in range(len(nums1)): </code></p>\r\n\r\n\t<p>Цикл перебирает каждый элемент из <code>nums1</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Поиск индекса текущего элемента в <code>nums2</code>:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>s = nums2.index(nums1[i]) </code></p>\r\n\r\n\t<p>Находим индекс элемента <code>nums1[i]</code> в массиве <code>nums2</code>. Это позволяет начать поиск следующего большего элемента с правильной позиции.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Поиск следующего большего элемента:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>for j in nums2[s:]: if j &gt; nums1[i]: initial.append(j) break else: initial.append(-1) </code></p>\r\n\r\n\t<p>Вложенный цикл проходит по элементам справа от текущего элемента и ищет первое число, большее чем <code>nums1[i]</code>. Если такое число найдено, оно добавляется в <code>initial</code>. Если нет — добавляется <code>-1</code>.</p>\r\n\t</li>\r\n\t<li>\r\n\t<p><strong>Возврат результата:</strong></p>\r\n\r\n\t<pre>&nbsp;</pre>\r\n\r\n\t<p><code>return initial</code></p>\r\n\t</li>\r\n</ol>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em><strong>Cтатистика решения на LeetCode:</strong></em></h2>\r\n\r\n<p><img alt=\"\" height=\"555\" name=\"image.png\" src=\"https://ucarecdn.com/e907cf02-6e46-4f01-b156-95b9955b01ba/\" width=\"991\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 106,
  "fields": {
    "topic": 106,
    "type": "text",
    "title": "Задача 46 | Клавиатурный ряд",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\"><strong><em>Решение задачи 46 | Клавиатурный ряд</em></strong></h2>\r\n\r\n<h2><strong><em>Решение для LeetCode:</em></strong><img alt=\"\" height=\"1970\" name=\"carbon - 2025-02-11T031454.855.png\" src=\"https://ucarecdn.com/bf571d47-4d53-489e-a199-ae3f6f2beff1/\" width=\"2560\"></h2>\r\n\r\n<h4><strong>1. Инициализация данных:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>initial = list() k_1 = 'qwertyuiop' k_2 = 'asdfghjkl' k_3 = 'zxcvbnm' </code></p>\r\n\r\n<p>Переменные <code>k_1</code>, <code>k_2</code>, <code>k_3</code> содержат символы строк клавиатуры.</p>\r\n\r\n<h4><strong>2. Перебор слов:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>for i in words: </code></p>\r\n\r\n<p>Итерация по каждому слову из списка <code>words</code>.</p>\r\n\r\n<h4><strong>3. Проверка первой буквы:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>if i[0].lower() in k_1: </code></p>\r\n\r\n<p>Проверяем, в какой строке клавиатуры находится первая буква слова. Это позволяет определить, какой набор символов использовать для проверки всех последующих букв.</p>\r\n\r\n<h4><strong>4. Проверка всех символов слова:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>for j in i: if j.lower() not in k_1: break else: initial.append(i) </code></p>\r\n\r\n<p>Для каждого символа проверяем, находится ли он в той же строке клавиатуры (<code>k_1</code>, <code>k_2</code>, <code>k_3</code>). Если хоть один символ не подходит, прерываем цикл (<code>break</code>). Если цикл завершился без <code>break</code>, слово добавляется в результат.</p>\r\n\r\n<h4><strong>5. Итоговое возвращение результата:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>return initial</code></p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em><strong>Cтатистика решения на LeetCode:</strong></em><img alt=\"\" height=\"552\" name=\"image.png\" src=\"https://ucarecdn.com/3cc9ee0b-5d2d-431f-a3a2-2c6c61a59186/\" width=\"989\"></h2>"
  }
},
{
  "model": "courses.content",
  "pk": 107,
  "fields": {
    "topic": 107,
    "type": "text",
    "title": "Задача 47 | По основанию семи",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\"><em>Решение задачи 47 | По основанию семи</em></h2>\r\n\r\n<h2><em>Решение для LeetCode:</em><img alt=\"\" height=\"1204\" name=\"carbon - 2025-02-11T032019.869.png\" src=\"https://ucarecdn.com/cc44eb82-6eb2-43bc-8000-25221415c511/\" width=\"2560\"></h2>\r\n\r\n<h4><strong>1. Базовая проверка:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>if num == 0: return \"0\" </code></p>\r\n\r\n<p>Если число равно <code>0</code>, сразу возвращаем строку <code>\"0\"</code>, так как это уже семеричная форма.</p>\r\n\r\n<h4><strong>2. Инициализация переменных:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>result = \"\" is_negative = num &lt; 0 num = abs(num) </code></p>\r\n\r\n<ul>\r\n\t<li><code>result</code> — пустая строка, куда будет накапливаться результат.</li>\r\n\t<li><code>is_negative</code> — проверка, является ли число отрицательным.</li>\r\n\t<li>Преобразуем отрицательное число в положительное для удобства вычислений (<code>abs()</code>).</li>\r\n</ul>\r\n\r\n<h4><strong>3. Построение семеричной записи:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>while num &gt; 0: result += str(num % 7) # Добавляем остаток от деления на 7 num //= 7 # Целочисленное деление для перехода к следующему разряду </code></p>\r\n\r\n<ul>\r\n\t<li>В цикле вычисляется остаток от деления на <code>7</code> (<code>num % 7</code>) и добавляется к строке <code>result</code>.</li>\r\n\t<li>Затем число делится на <code>7</code>, чтобы перейти к следующему разряду.</li>\r\n</ul>\r\n\r\n<h4><strong>4. Обработка знака:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>if is_negative: result += \"-\" </code></p>\r\n\r\n<p>Если исходное число было отрицательным, добавляем знак <code>\"-\"</code>.</p>\r\n\r\n<h4><strong>5. Возврат результата:</strong></h4>\r\n\r\n<pre>\r\n&nbsp;</pre>\r\n\r\n<p><code>return result[::-1] </code></p>\r\n\r\n<p>Переворачиваем строку <code>result</code> с помощью среза <code>[::-1]</code>, так как разряды добавлялись в обратном порядке.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em>Cтатистика решения на LeetCode:</em></h2>\r\n\r\n<p><img alt=\"\" height=\"548\" name=\"image.png\" src=\"https://ucarecdn.com/25e1f715-a1d2-47e8-86bf-33da6a2e2e4b/\" width=\"987\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 108,
  "fields": {
    "topic": 108,
    "type": "text",
    "title": "Задача 48 | Идеальное число",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\"><em><strong>Решение задачи 48 | Идеальное число</strong></em></h2>\r\n\r\n<p><em><strong>Решение для LeetCode:</strong></em><img alt=\"\" height=\"862\" name=\"carbon - 2025-02-11T031825.529.png\" src=\"https://ucarecdn.com/096c0d23-d990-4a10-8010-d23d193b25a4/\" width=\"2560\"></p>\r\n\r\n<h4><strong>1. Инициализация переменной для суммы делителей:</strong></h4>\r\n\r\n<pre>&nbsp;</pre>\r\n\r\n<p><code>count = 1 </code></p>\r\n\r\n<p>Начальная сумма делителей равна <code>1</code>, так как <code>1</code> — делитель любого натурального числа.</p>\r\n\r\n<h4><strong>2. Проверка на исключение:</strong></h4>\r\n\r\n<pre>&nbsp;</pre>\r\n\r\n<p><code>if num == 1: return False </code></p>\r\n\r\n<p>Число <code>1</code> не является совершенным, поэтому сразу возвращаем <code>False</code>.</p>\r\n\r\n<h4><strong>3. Поиск делителей:</strong></h4>\r\n\r\n<pre>&nbsp;</pre>\r\n\r\n<p><code>a = int(num ** 0.5) for i in range(2, a + 1): </code></p>\r\n\r\n<p>Мы перебираем числа от <code>2</code> до квадратного корня из <code>num</code>. Это эффективный способ нахождения делителей, так как делители всегда симметричны относительно квадратного корня.</p>\r\n\r\n<h4><strong>4. Проверка делимости и обновление суммы делителей:</strong></h4>\r\n\r\n<pre>&nbsp;</pre>\r\n\r\n<p><code>if num % i == 0: count += i if num // i != i: count += num // i </code></p>\r\n\r\n<ul>\r\n\t<li>Если <code>num % i == 0</code>, значит <code>i</code> — делитель числа <code>num</code>.</li>\r\n\t<li>Мы добавляем делитель <code>i</code> к сумме <code>count</code>.</li>\r\n\t<li>Если делитель <code>num // i</code> не равен <code>i</code> (не является квадратным корнем), то также добавляем его к сумме.</li>\r\n</ul>\r\n\r\n<h4><strong>5. Сравнение суммы делителей:</strong></h4>\r\n\r\n<pre>&nbsp;</pre>\r\n\r\n<p><code>return num == count </code></p>\r\n\r\n<p>Возвращаем <code>True</code>, если сумма делителей совпадает с самим числом.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em><strong>Cтатистика решения на LeetCode:</strong></em></h2>\r\n\r\n<p><img alt=\"\" height=\"575\" name=\"image.png\" src=\"https://ucarecdn.com/e32b5421-146e-449d-9e29-d12c42344629/\" width=\"1032\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 109,
  "fields": {
    "topic": 109,
    "type": "text",
    "title": "Задача  49 | Выявить столицу",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 49 | Выявить столицу</h2>\r\n\r\n<h2><strong><em>Решение на LeetCode : )</em></strong><img alt=\"\" height=\"480\" name=\"carbon - 2025-02-11T002412.102.png\" src=\"https://ucarecdn.com/9434ebf0-9855-4424-b18d-3b9ecee67568/\" width=\"2560\"></h2>\r\n\r\n<p>Решение максимально простое. Проверим, подходит ли слово к одному из трех случаев (описанных в задании)</p>\r\n\r\n<h2><strong><em>Статистика решения на LeetCode:</em></strong></h2>\r\n\r\n<p><img alt=\"\" height=\"466\" name=\"image.png\" src=\"https://ucarecdn.com/07ce4f56-e356-4500-92f9-b59c9fce778b/\" width=\"832\"></p>"
  }
},
{
  "model": "courses.content",
  "pk": 110,
  "fields": {
    "topic": 110,
    "type": "text",
    "title": "Задача 50 | Перевернуть строку 2",
    "video_url": null,
    "video_duration": null,
    "essence_html": "<h2 style=\"text-align:center;\">Решение задачи 50 | Перевернуть строку 2</h2>\r\n\r\n<h2><strong><em>Решение задачи для LeetCode:</em></strong><img alt=\"\" height=\"778\" name=\"carbon - 2025-02-11T002128.750.png\" src=\"https://ucarecdn.com/f7627f1b-b3cf-48cb-b2f0-b70c255e54fe/\" width=\"2560\"></h2>\r\n\r\n<h4><strong>1. Преобразование строки в список:</strong></h4>\r\n\r\n<pre>&nbsp;</pre>\r\n\r\n<p><code>s = list(s) </code></p>\r\n\r\n<p>Строки в Python неизменяемы, поэтому мы преобразуем строку в список символов. Это позволит эффективно заменять части строки.</p>\r\n\r\n<h4><strong>2. Итерация с шагом <code>2k</code>:</strong></h4>\r\n\r\n<pre>&nbsp;</pre>\r\n\r\n<p><code>for i in range(0, len(s), 2 * k): </code></p>\r\n\r\n<p>Мы идем по строке с шагом <code>2k</code>, чтобы работать с каждой группой символов.</p>\r\n\r\n<h4><strong>3. Обращение первых <code>k</code> символов:</strong></h4>\r\n\r\n<pre>&nbsp;</pre>\r\n\r\n<p><code>s[i:i + k] = reversed(s[i:i + k]) </code></p>\r\n\r\n<p>Этот код берет срез <code>s[i:i + k]</code> и заменяет его на его обратную последовательность с помощью функции <code>reversed()</code>. Если оставшихся символов меньше <code>k</code>, функция просто обратит их все.</p>\r\n\r\n<h4><strong>4. Преобразование списка обратно в строку:</strong></h4>\r\n\r\n<pre>&nbsp;</pre>\r\n\r\n<p><code>return ''.join(s) </code></p>\r\n\r\n<p>Метод <code>join()</code> собирает список символов обратно в строку.</p>\r\n\r\n<p>&nbsp;</p>\r\n\r\n<h2><em><strong>Статистика для LeetCode:</strong></em></h2>\r\n\r\n<p><img alt=\"\" height=\"556\" name=\"image.png\" src=\"https://ucarecdn.com/6226cc9a-fd20-436c-801d-c5bf3da36a01/\" width=\"999\"></p>"
  }
}